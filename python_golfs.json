{
    "produce-the-number-2014-without-any-numbers-in-your-source-code": [
        "t=True\nprint str(t+t)+str(t-t)+str(+t)+str(t+t+t+t)",
        "print ord(',')*ord('-')+ord('\"')",
        "print int('bbc',ord(\"\\r\"))",
        "print(ord(\"\u07de\"))",
        "print hash(\"w_'qe\")",
        "(ord('\\t')+ord('\\n'))*ord('j')",
        "print sum(ord(c) for c in 'Happy new year to you!')",
        "s=int('RZ',ord('$'));print s+s"
    ],
    "hello-world": [
        "print(\"Hello, World!\")",
        "_=-~(_==_)\n_*=_-~_\n__=_*_+~-~-_\n_=('%'+`'\f'`[~_/_])*-~-~_%(~-_*~-~-_,_*_+_/_,__,__,_*_-~_,',',' ',__-_+~_,_*_-~_,`_==_`[_/_],__,_*_)+'!'",
        "print\"Hello, World!\""
    ],
    "covfefify-a-string": [
        "def f(s):g=lambda x,y:[(i in\"aeiouy\")for i in s].index(x,y);j=g(0,g(1,0));c=s[j];z=\"ckbdfszvtpgg\"+c;return s[:j+1]+2*((c+z)[-z.index(c)-2]+s[g(1,j)])",
        "s=input()\ng=lambda i,f='aeiuoy':i if s[i]in f else g(i+1,f)\nq=g(g(0),c:='pgtcvkh jglmn bqrzd fwx s')\nexit(s[:-~q]+(c[ord(s[q])-98]+s[g(q)])*2)",
        "f=lambda s,g='aeiouy':min([s.index(l)for l in g if l in s])\nC='bcdfghjklmnpqrstvwxyz'\nq=input()\nv=f(q)\nc=f(q[v:],C)+v+1\nprint(q[:c]+('pgtvkhjglmnbqrzdfwxs'[C.index(q[c-1])]+q[f(q[c:])+c])*2)",
        "def c(s,t='bpcgdtfvgksz'):\n q,r,t='aeiouy',range(len(s)),t+t[::-1]\n c=[i for i in r if i>[j for j in r if s[j]in q][0]and s[i]not in q][0]\n C=([t[2*i+1]for i in range(12)if s[c]==t[i*2]]or s[c])[0]\n return s[:c+1]+(C+s[[i for i in r if i>c and s[i]in q][0]])*2",
        "def f(s):\n  r=c='';n=0;w='aeiouy';a='bcdfghjklmnpqrstvwxz'\n  for i in s:\n    if n<2:r+=i\n    if n<1and i in w:n=1\n    if n==1and i in a:c='pgtvkhjglmnbqrzdfwxs'[a.index(i)];n=2\n    if n==2and i in w:r+=c+i+c+i;break\n  return r"
    ],
    "tips-for-golfing-in-python": [
        "S={1,2,3}",
        ">>> a, b, *c = [1, 2, 3, 4, 5]\n>>> a\n1\n>>> b\n2\n>>> c\n[3, 4, 5]",
        ">>> a,*b,c=range(5)\n>>> a\n0\n>>> b\n[1, 2, 3]\n>>> c\n4"
    ],
    "were-no-strangers-to-code-golf-you-know-the-rules-and-so-do-i": [
        "print(\"\"\"We're no strangers to love\nYou know the rules and so do I\nA full commitment's what I'm thinking of\nYou wouldn't get this from any other guy\n{10}{8}\n{11}\n\n%s\n{13}\nAnd if you ask me{8}\nDon't tell me you're too blind to see\n\n%s\n%s\n{0}, {2})\n{0}, {2})\n{0})\n{1}{12}\n{9}\n{0})\n{1}{12}\n{9}\n\n{13}\n\n{10}{8}\n{11}\n\n%s\n%s\n%s\"\"\"%tuple(['{1}{2}\\n{1}{3}\\n{1}{4}\\n{1}{5}\\n{1}{6}\\n{1}{7}']*6)).format(*\"(Ooh|Never gonna |give you up|let you down|run around and desert you|make you cry|say goodbye|tell a lie and hurt you\\n| how I'm feeling|(Give you up)|I just wanna tell you|Gotta make you understand|give, never gonna give|We've known each other for so long\\nYour heart's been aching but\\nYou're too shy to say it\\nInside we both know what's been going on\\nWe know the game and we're gonna play it\".split('|'))",
        "s=\"e |nd|-We| a|-(Ooh|N| what|ive| go|ay it-|I|er|G|o |make5 |D| th| othH |A| tF|ing |nna |tell|'s been|'rS|-You|-N4| know|L5 up|PR | you|evHK>| how I'm feeling-|O, g7)|O)9gL, n4gL-(G7)|-I just wa>=53Gotta EuRHstaR-.|Q've8n eachBfor sFlong:r heart<Pch?but:;toFshy@sJInsidSwSboth8M<K?onQ8CSgame6we;go>plJ|9g79let5 down9runProuR6desHt59Ecry9sayKodbye9=P lie6hurt5-|\\n|Q;nFstrangHs@love:8CSrules6sFdFI-A full commitment'sM I'mCink?of: wouldn't getCis fromPnyBguy0/AR if5Psk me3Don't = me5;toFbliR@see-..2211-/0..\";i=83\nexec\"x,s=s.split('|',1);s=s.replace(chr(i),x);i-=1\"*39\nprint s",
        "w=\"\\n|gonna|you|Never|and|give||tell|make|say|goodbye|a|desert|lie|up|hurt|down|let|run|cry|know|around|it|been|I'm|to|up)|the|so|I|other|how|feeling|too|(Ooh)|play|aching|heart's|You|Your|understand|but|what's|both|we're|long|We've|wanna|on|never|Inside|we|for|give,|each|shy|game|(Ooh,|Gotta|me|(Give|going|We|just|You're|what|A|no|if|any|this|And|known|commitment's|from|you're|love|blind|wouldn't|of|ask|do|full|strangers|see|guy|Don't|rules|get|thinking|We're|*\".split(\"|\")\no=\"!UVN7M:`S!&$4%3!cDZ<,9!&$+%6!jg%s^B;C!&$XT$(!y*^nDp<w!&$,-!@bR*%B;C!Q7YAW?P!I7>z'?t@!]+%K!euld;|r!&$(%1!E!_%=!Iq{imhAx!}fv<o!\\(%=!&$*.0'2%!JH:GL!&$58'/%!QkYAW?P!a7>['O$F9!\"\nl=\"5.04,/#1%9'+7#:8&$;(*#1%9'+7#1%9'+7#662)32)3#-8&$;#,/#1%9'+7#1%9'+7#1%9'+7\"\nprint \"\\n\".join([[\" \".join([\"\".join(w[ord(p)-35]) for p in k]) for k in o.split(\"!\")][ord(m)-35] for m in l])",
        "$in = file_get_contents(\"http://pastebin.com/raw.php?i=wwvdjvEj\");\n$compressed_string = '';\n$inc = true;\n\nfor ($i = 0; $i < strlen($in); $i++) {\n    $offset = 0;\n    $length = 0;\n\n    for ($j = 1; $j < strlen($in) - $i + 1; $j++) {\n        if (($os = strpos(substr($in, 0, $i), substr($in, $i, $j))) !== false) {\n            $offset = $os;\n            $length = $j;\n        } elseif ($length > 0) {\n            break;\n        } else { \n            $length = 0;\n            break;\n        }\n    }   \n\n    if ($length > 0) {\n        $rep = '';\n        if (!$inc) {\n            $rep = '>';\n        } \n\n        $rep .= $offset . '|' . $length;\n\n        if (strlen($rep) < $length) {\n            $compressed_string .= $rep;\n            $i += $length - 1;\n            $inc = false;\n            continue;\n        }\n    }\n\n    $compressed_string .= substr($in, $i, 1);\n    $inc = true;\n}\n\necho '<?$f=\"' . $compressed_string . '\";do$f=preg_replace_callback(\\'/>?(\\d+)\\|(\\d+)/\\',create_function(\\'$m\\',\\'global$f;return substr($f,$m[1],$m[2]);\\'),$f,1,$c);while($c);echo$f;';",
        "d=\"\"\"ellU wTay it\nS otherRConna Qmake4 PveMndL aK'reJingHt's beenFo E gC\n(OohB\nYouz txKL q know9\nN28 how I'm feelH\n7iM4 up66)B)8giM, n2giM\n(G5 you4\nI justTannaxU47Gotta PuLerstaL03eMrQ2\n\nWe'M9n eachR for sElongzr hearFKchH butzJxoEshyxEsSInsideTe both9ThaFCoH on\nWe9xheCameqweJQplS1\n8g68let4 down8runKrouLqdesert48Pcry8sayCoodbye8tUK lieqhurt40WeJ nEstrangersxEloMz9xhe rulesqsEdEI\nA full commitment'sThat I'mxhinkH ofzTouldn'tCetxhis fromKnyRCuy31AL if4Ksk me7Don'txU me4JxoEbliLxEsee00\nB,C6)B,C556)1300\"\"\"\nfor s in'UTSRQPMLKJHFECBzxq9876543210':a,b=d.split(s,1);d=b.replace(s,a)\nprint d"
    ],
    "disarm-the-b-o-m-b": [
        "x=[2**n for n in xrange(16)]\ny=-5\nprint('exec\"\"\"exec'+x[7]*'%'+'c\"\"'+x[6]*'%'+'cr'+x[-2]*'%'+'c'+x[-1]*'%'+'ct'+x[8]*'%'+'c'+x[-4]*'%'+'cASSW'+x[-5]*'%'+'cRD'+x[-3]*'%'+'c'+x[0]*'%'+'s1'+x[10]*'%'+'c '+x[9]*'%'+'c\"\"'+x[y]*'%'+x[1]*'%'+'s'+x[y]*'%'+x[2]*'%'+'s'+x[y]*'%'+x[3]*'%'+'s'+x[y]*'%'+x[4]*'%'+'s'+x[y]*'%'+x[5]*'%'+'s\"\"\"'+'%`1>>1`%`2531>>5`%`321>>2`%`1521>>4`%`211>>1`%`221>>1`%112%34%34%34%34')",
        "exec\"\"\"exec\"exec\"+\"%ca\"%34+\"%c52+53\"\"\"+\"%c55+55\"%44+\"%c34\"%44+\"%c45+35\"%44+\"%c\"%44+\"\"\"34%%cexec\"%\"\"\"+\"%c\"%54+\"\"\"1+\"%c\"%34+\"%%5%c+\"%5\"\"\"+\"%c\"%55+\"\"\"+\"%c\"%34+\"%c\"\"\"+\"%c\"%112+\"\"\"r%%c%%ct%%c%%cASSW\"+\"%c%%34+\"%34+\"%c%%cRD\"%34+\"%c%%\"\"\"+\"%c\"%55+\"\"\"\"%34+\"%c+\"%5\"\"\"+\"%c\"%55+\"\"\"+\"%c%%c\"%34+\"%c%%\"%34+\"%c5+\"%5\"\"\"+\"%c\"%55+\"\"\"+\"%c\"%34+\"%c1%%c\"+\"%c%%4\"%34+\"%c+\"%5\"\"\"+\"%c\"%54+\"\"\"+\"%c\"%34+\"%c%%a\"+\"%c%%34\"%34\"\"\""
    ],
    "golf-you-a-quine-for-great-good": [
        "_='_=%r;print _%%_';print _%_",
        "print(str.format(*['print(str.format(*[{!r}]*2))']*2))",
        "s=\"print's=%r;exec s'%s\";exec s"
    ],
    "print-every-character-your-program-doesnt-have": [
        "print(''.join(set(map(chr,range(32,127)))-set(open('q').read())))",
        "x=r\"print(*set(map(chr,range(32,127)))-set(x+'=\\\"'))\"\nexec(x)",
        "print\"\".join(set(map(chr,range(32,127)))-set(open(__file__).read()))",
        "print !\"#$%&'90*+,-.0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[/\\]^_`abcdefghjklmoqsuvwxyz{|}",
        "for x in range(38):print chr(x+59)#!\"$%&'*,-./012467bdjklmqsuvwyz{|}~"
    ],
    "is-this-number-a-prime": [
        "P=n=1\nexec\"P*=n*n;n+=1;\"*~-input()\nprint P%n",
        "___=_\n__(\"__=_/_\"+\";_=-~_;__*=_*_\"*~-_)\n_=__%___",
        "kirbyfan64sos",
        "m=n=input()\na=1\nwhile~-m:m-=1;a*=m*m\nprint a%n",
        "input()",
        "p=n=1\nexec(\"p*=n*n;n+=1;\"*~-int(input()))\nprint(p%n)"
    ],
    "no-a-just-caps-lock": [
        "f=lambda s:s and[s[0]+f(s[1:]),f(s[1:]).swapcase()][s[0]in\"aA\"]",
        "def f(x):x=x.replace('A','a').split('a');return''.join(i.swapcase()if i in x[1::2]else i for i in x)"
    ],
    "im-not-the-language-youre-looking-for": [
        "#if/*\n\"\"\"*/1\nmain(){char*//\"\"\"\ns=\"This program wasn't written in %s, it was built for %s!\"\n#if/*\n\"\"\"*/1\n;printf(s,\"C\",\"Python\");}\n#endif\n#endif/*\"\"\"\nprint s%(\"Python\",\"C\")\n#*/",
        "q=\"This program wasn't written in %s, it was built for %s!\"\nr='\\';printf $q zsh Python;r=';print q%(\"Python\",\"zsh\")#'",
        "a=[\"Python\",\"Ruby\"];b=(0 and 1);print(\"This program wasn't written in \"+a[b]+\", it was built for \"+a[~b]+\"!\")",
        "#?.*\nprint\"This program wasn't written in Python, it was built for Retina!\"\n#?.*t\"\n\n#?(\\w+)(,.* )(.+)!\"\n#$3$2$1!\n#",
        "\"\"\"This program wasn't written in CJam, it was built for Python!\" \"\"\";print('This program wasn\\'t written in Python, it was built for CJam!')#\";",
        "#define def main(){0?\n#define print printf(\n#define return 0)));}\n#define pass 0);\n\ndef main():\n    print \"This program wasn't written in \",\n    pass\n    print \"Python\",\n    print \", it was built for \",\n    print \"C\",\n    return\n\nmain();",
        "#_()(println\"This program wasn't written in Clojure, it was built for Python!\")(comment\nprint(\"This program wasn't written in Python, it was built for Clojure!\")#_())",
        "\"\"\"\"(princ \"This program wasn't written in Lisp, it was built for Python!\")\"\"\";print 'This program wasn\\'t written in Python, it was built for Lisp!';\"\"\" \" \"\"\"",
        "#v\"This program wasn't made for ><>, it was built for Python 2.7!\"\n#l\n#0\n#)\n#?\n#!\n#;\n#o\n#!\nprint\"This program wasn't made for Python 2.7, it was built for ><>!\"",
        "print(\"This program wasn't written in Python %d, it was built for Python %d!\"%(3/2*2,4-3/2))",
        "a=[\"Ruby\",\"Python\"];a.sort();print(\"This program wasn't written in \"+a[0]+\", it was built for \"+a[1]+\"!\")",
        "0//1|\"\\(\".__len__();console={'log':lambda x:print(x.replace('JavaScript','Python 3').replace('jq','JavaScript'))}#\")\"|\n\"\\(\";console['log']('This program wasn\\u0027t written in JavaScript, it was built for jq!');0//1#\"|\"This program wasn't written in jq, it was built for Python 3!\")\"",
        "v=1//2\nn=(\"Python\",\"Boo\");print\"This program wasn't written in \"+n[v]+\", it was built for \"+n[1-v]+\"!\"",
        "print(1^2==1 and \"This program wasn't written in Lua, it was built for Python!\" or \"This program wasn't written in Python, it was built for Lua!\")",
        "pass#b=b\npass##b=pass++b\np=print#putStrLn where print=p\nmain=p(\"This program wasn't written for \"##(\n \"Python\"#\"Haskell\")##\n \", it was built for \"##(\n \"Haskell\"#\"Python\")##\n \"!\")",
        "\"\\(\"; print('This program wasn\\u0027t written in Python 3, it was built for jq!')#\" | \"This program wasn't written in jq, it was built for Python 3!\")\"",
        "print(#x)O\n\"This program wasn't written in \"#xO\"Pip\"Y\n\"Python\"#xO\n\", it was built for \"  \"Pip!\")\n#xy.'!",
        "#\ud83d\ude2d!2 nohtyP rof tliub saw ti ,nocimonitomE ni nettirw t'nsaw margorp sihT\ud83d\ude32\u23ea\u23ec\u23e9\nprint\"This program wasn't written in Python 2, it was built for Emotinomicon!\"",
        "' ''\"This program wasn\"!'' \"t written in Mouse, it was built for Python\"33!'\"!\"#A;$A@$\nprint\"This program wasn't written in Python, it was built for Mouse!\"",
        "'''\n\ubc23\ubc19\ubc18\ub530\ub530\ubc25\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc25\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc19\ub2e4\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc15\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc15\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc25\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc18\ubc27\ub098\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc1b\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc25\ub2e4\ub2e4\ub9e3\ubc1e\ubc19\ubc18\ub530\ub530\ubc20\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc1e\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc15\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc1e\ub2e4\ub2e4\ub9e3\ubc1e\ubc19\ubc18\ub530\ub530\ubc20\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc19\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc1e\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc26\ub2e4\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc15\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc1e\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc25\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc26\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc26\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc18\ubc27\ub098\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc15\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc15\ub2e4\ub9e3\ubc19\ubc19\ubc1a\ubc19\ubc1a\ubc25\ubc24\ub530\ub530\ub530\ub530\ub530\ub530\ubc19\ubc19\ubc1a\ubc24\ub530\ub530\ub530\ub2e4\ub9e3\ubc19\ubc19\ubc1a\ubc19\ubc1a\ubc25\ubc24\ub530\ub530\ub530\ub530\ub530\ub530\ubc19\ubc19\ubc1a\ubc19\ubc23\ub530\ub530\ub530\ub530\ubc19\ubc1a\ubc24\ub530\ub530\ubc25\ubc19\ubc18\ub530\ub530\ubc23\ub2e4\ub2e4\ub2e4\ub2e4\ub9e3\ubc25\ubc19\ubc18\ub530\ub530\ubc25\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc15\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc26\ub2e4\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc15\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc1e\ub2e4\ub2e4\ub9e3\ubc1e\ubc19\ubc18\ub530\ub530\ubc20\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc19\ub2e4\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc15\ub2e4\ub9e3\ubc1e\ubc19\ubc18\ub530\ub530\ubc23\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc20\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc23\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc26\ub2e4\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc15\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc15\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc18\ubc27\ub098\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc25\ub2e4\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc15\ub2e4\ub9e3\ubc23\ubc19\ubc18\ub530\ub530\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc15\ubc19\ubc18\ub530\ub530\ubc18\ubc27\ub098\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc26\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc25\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ubc18\ubc27\ub098\ub2e4\ub2e4\ub9e3\ubc19\ubc1a\ubc24\ub530\ub530\ubc19\ubc18\ub530\ub2e4\ub9e3\ubc1b\ubc19\ubc18\ub530\ub530\ubc1b\ub2e4\ub9e3\ud76c\n'''\nprint(\"This program wan't written in Python, it was built for \uc544\ud76c!\")",
        "Python"
    ],
    "mathematics-is-fact-programming-is-not": [
        "f=lambda s:s<\"0\"and 1-f(s[1:])or\"0\"<s",
        "lambda s:(s[1::2]>s[::2])^ord(s[-1])%2",
        "lambda x:(x[-1]=='0')^len(x.rstrip('!'))%2"
    ],
    "do-you-want-to-code-a-snowman": [
        "def s(g):H,N,L,R,X,Y,T,B=[int(c)-1for c in g];e='.oO-';print(' '*9+'_ _ ___ _ _\\n\\n\\n\\n    _. (=./_=._*=.\\\\__. )')[H::4]+'\\n'+' \\\\  '[X]+'('+e[L]+',._ '[N]+e[R]+')'+' /  '[Y]+'\\n'+'< / '[X]+\"(\"+' ]> :    [< '[T::4]+')'+'> \\\\ '[Y]+'\\n ('+' \"_ : _  \"_ '[B::4]+\")\"",
        "l='_===_| ___\\n .....|  _\\n  /_\\| ___\\n (_*_)| : |] [|> <|   |>| |\\| | : |\" \"|___|   '.split('|')\nl[4:4]=' \\  .oO-,._ .oO- /  < / '\ndef s(a):print(' {}\\n{}({}{}{}){}\\n{}({}){}\\n ({})'.format(*[l[4*m+int(a[int('0421354657'[m])])-1]for m in range(10)]))",
        "V='.oO-'\ndef F(d):\n D=lambda i:int(d[i])-1\n print\"  \"+(\"\",\"___\",\" _ \",\"___\")[D(0)]+\"\\n \"+\\\n\"_. (=./_=._*=.\\\\__. )\"[D(0)::4]+\"\\n\"+\\\n\" \\\\  \"[D(4)]+\"(\"+V[D(2)]+',._ '[D(1)]+V[D(3)]+\")\"+\" /  \"[D(5)]+'\\n'+\\\n\"< / \"[D(4)]+\"(\"+\" ]> :    [< \"[D(6)::4]+\")\"+\"> \\\\ \"[D(5)]+\"\\n (\"+\\\n' \"_ : _  \"_ '[D(7)::4]+\")\"",
        "H,N,L,R,X,Y,T,B=map(int,i)\nl='\\n'\ns=' '\ne=' .o0-'\nF='  \\  / '\nS=' < / \\ >'\no,c='()'\nprint s+'      _ _ ___ _ _\\n\\n\\n\\n    _. (=./_=._*=.\\__. )'[H::4]+l+F[X]+o+e[L]+' ,._ '[N]+e[R]+c+F[-Y]+l+S[X]+o+'  ]> :    [< '[T::4]+c+S[-Y]+l+s+o+'  \"_ : _  \"_ '[B::4]+c"
    ],
    "1-2-fizz-4-buzz": [
        "for i in range(100):print(i%3//2*\"fizz\"+i%5//4*\"buzz\"or-~i)",
        "0;exec\"print _%3/2*'Fizz'+_%5/4*'Buzz'or-~_;_+=1;\"*100",
        "_____=_;_=-~(_==_);___=_**(_*_+_);____=___+___/_+_+_\n___=(('%'+`'\u00ac'`[-_])*_)%(___+_,___*_-_*_-_)\n___=`_>_`[_>_]+`__`[_*_+_]+___[~-_]*_,___[-_]+`__`[_]+___[~-_]*_\n_=_>_\n__('____=\"\"'+(';_=-~_;____+=((_%-~-~(_==_)<(_==_))*___[_>_]+(_%-~-~-~-~(_==_)<(_==_))*___[_==_]'+`_____`[_==_]+`_==_`[_==_]+'`_`)+'+`\"\"\"\n\"\"\"`)*____)\n_=____",
        "for i in range(1,101):print\"Fizz\"*(i%3<1)+\"Buzz\"*(i%5<1)or i",
        "def f(n):\n if n%3+n%5<1:return\"FizzBuzz\"\n if n%5<1:return\"Buzz\"\n if n%3<1:return\"Fizz\"\n return n\nfor x in map(f,range(1,101)):print x",
        "i=0;exec\"print i%3/2*'Fizz'+i%5/4*'Buzz'or-~i;i+=1;\"*100",
        "i=0\nexec(\"i+=1;print(i%3*i%5and i or(i%3<1)*'Fizz'+(i%5<1)*'Buzz');\"*100)"
    ],
    "dont-google-google": [
        "lambda u:[len][u=='google'](u)",
        "lambda x:len(x)//(x!=\"google\")",
        "lambda n:len(n)if n!='google'else d",
        "lambda s:len(s)if\"google\"!=s else~s",
        "a=input()\nprint(0/0 if a==\"google\" else len(a))",
        "lambda x:len(x)/(x!='google')"
    ],
    "trick-or-treat-polyglot": [
        "print[\"trick\",\"treat\"][\"\"==0];",
        "#define print(_)main(){puts(\"trick\");}\nprint(\"treat\")",
        "1//2;print\"trick\"\nalert(\"treat\")",
        "print\"trick\"#||echo.treat",
        "#\"treat\"\nprint\"trick\";",
        "print(\"treat\")#+++++++++[>+++++++++<-]>+++.--.<+++[>---<-]>.<++[>---<-]>.<++++[>++<-]>.",
        "l=[\"trick\",\"treat\"]\nprint(l[1])",
        "[\"Trick\",\"Treat\"][+(1/2>0)]",
        "print([]and\"trick\"or\"treat\")",
        "s=\"trick\"\n--0;s=\"treat\"\nprint s",
        "0. # .\" trick\"\n( print(\"treat\"))",
        "print\"trick\"#X\"treat\"",
        "\"Treat\";print('Trick' )",
        "a=1//2;alert=print\nalert([\"trick\",\"treat\"][a])",
        "1\nprint\"trick\";\"treat\""
    ],
    "implement-a-truth-machine": [
        "def l(i):\n if i:print(i);l(int(i))",
        "a=input()\nwhile 1:print a;1/a",
        "x=input()\nif x==0:print\"0\"\nelif x==1:\n while True: print\"1\""
    ],
    "is-my-swipe-pattern-legal": [
        "v={9}\ns=input()\nfor n,l in zip(s[1:]or q,s):n/3+l/3&1|n%3+l%3&1or n+l>>1in v or q;v|={l};n in v>q",
        "v={0};k=input()\nfor l,n in zip(k,k[1:])or q:(2**n+~2**l)%21%15%9==5<v-{l+n>>1}==v>q;v|={l};n in v>q"
    ],
    "i-double-the-source-you-double-the-output": [
        "stdout",
        "print open(__file__,\"a\").tell()#",
        "id=print('\\r',1+(not id),end='');",
        "1or exit(2)\n0/0",
        "try:y*=2\nexcept:y=1\nopen('x','w').write(str(y))",
        "print len(open(__file__).read())#",
        "+7\ntry:_\nexcept:_=7;print _",
        "+1\nif id:id=0;print 1",
        "x=1\nprint 4*'\\b',x,;x=2#",
        "'+1#';exec'print 1''' ''",
        "try:f+=[2]\nexcept:f=[2]\nopen('o','w').write(str(sum(f)))"
    ],
    "unscramble-the-source-code": [
        "\\n    ((((()))))***,-0123:=____aaaabdegiilmmmnnoopprrrrsttttu",
        "print *********************--///222222222222222222",
        "i(b)t14i])2*2tni*(pr2[3:n(n)",
        "((((((((((((())))))))))))),,,,accdddiiiiillmmnopprrrrrssssssttttttttu",
        "int(22 ** 2 ** 2+range(irr)[]__npof_)",
        "\" \"(()).01A\\[]____aceeeeiillmnopprrrrttxx",
        "mr79ltmo22mat51p*h(* .ian tpihgt)or()",
        "\"rne) n(sxx+ai(cpi)% ( *2n+f 1 )corii\\.5n /r +5xeini+\"h(5te4437f3)xjxo2]2or[)%(#\"g r\"+\"lf/r2 # 1xn\"h5",
        "lp[__et._i(ri`2(]-:)pn1[s:)]t~i]t.`r[_",
        "____        ,,,,:::''\"\"\"\"\"\"\"\"\"\"((()))[[]]\\\\\\0126aaaabcccceeeeeeeeeEffggiiiiiilllllmmmmnnnnnnooooopppppqqrrrrrrrrrssssStttttttuuvxxyy",
        "#print(']'2p/')'\\xdh))2[:roo,h+(2*e'rw)/r(d'o(()",
        "\"\"(())****666;;;;====ceeinprtxxxxxxxxxxxx",
        "\"\"((((()))))....abefiilllmnnprrssttuz",
        "11124455566899^",
        "print (70-70)",
        "print(war is peace)\nprint(freedom is slavery)\nprint(ignorance is strength)",
        "print(....__str__)\n[[(4,)=={-6}]];",
        "print (abcd)",
        "-/*[st0r3:.1245689])(()",
        "(.;i;=)de mnoprrrsssssssttyyy",
        "((()))**+,.0112589:={}\n____aacdefgiiimmmnnnoopprrrrsttu",
        "\"\"(((())))****++++222222222;;;;;=======cccccccccceeeiinnpprrttxxxxxxxx",
        "help tim__rolo__",
        "for i in \"iprint()\".join(([2,3,7,0,9,chr((-7+732^70)])))",
        "\"\"\"\"%(((((((()))))))),,,,,-...////00011111133355888==[[[[]]]]            ________aacccdddeeeefffffghiiiiiiiiiiiiijjjjjllmnnnnnnnoooooooppprrrrrrrrsttttuuu",
        "print(((((((((((((()))))))))))))),,<<<<<<<~~",
        "(33*(4*12+4))/1",
        "r~s]l][]:.c[():sit_'3-'(pt_trp.l]2-~n:][.i':o:p0Te[d_u1[.')i_"
    ],
    "shortest-error-message": [
        "a=b=c=d=e=f=g=h=i=j=k=l=m=n=o=p=q=r=s=t=u=v=w=x=y=z=A=B=C=D=E=F=1#\nis=0",
        "`\n  File \".code.tio\", line 1\n    ^`````\nSyntaxError: invalid syntax",
        "b(h)#This has to be 67 characters. Thus, I'm writing this bullshit."
    ],
    "hello-world-every-other-character": [
        "#\nprint'Hello, World!'\n#p r i n t ' H e l l o ,   W o r l d ! '",
        "rant=\"partisn't\"\nprint((\"HHeelllloo,,  WWoorrlldd!!\"\"\"[::2]))",
        "print\"=#0##Hello, World!\"[5:] \n#portionate \"\"IHeeelallof,A TWookralade!?\""
    ],
    "fibonacci-function-or-sequence": [
        "def f(i,j):print i;f(j,i+j)\nf(1,1)",
        "a,b,n=0,1,10\nwhile n:a,b,n=b,a+b,n-1;print b",
        "a,b=0,1\nexec\"a,b=b,b+a;\"*input()\nprint b",
        "x,y=0,1\nwhile 1:print x;x,y=y,x+y",
        "f=lambda n:n<3or f(n-2)+f(n-1)",
        "__('__=_/_;'+'_,_=_+__,__;_'*_)",
        "def f(n):k=9**n;return k**-~-~n/~-(k*~-k)%k",
        "a=1\nb=1\nwhile 1:c=a+b;print(c);a=c;b=c",
        "f=lambda x:x>1and f(x-1)+f(x-2)or x"
    ],
    "obfuscated-hello-world": [
        "print'\\x48e\\x6c\\x6co %cor\\x6c\\x64'%-~86",
        "input(('%c'*11)%(9*8,93+8,99+9,9+99,3999//36,4*8,9*9+6,3996//36,4353//38,36*3,5*4*5))",
        "op=\"\"\nfor i in \"Tqxx{,c{~xp\":\n    op=op+chr(ord(i)-(4*3))\nprint op",
        "print'Uryyb Jbeyq'.decode('rot13')"
    ],
    "a-keyboard-so-real-you-can-almost-taste-it": [
        "s=\"SHIFT   \"\nfor k in[(*\"`1234567890-=\",\"BS   \"),(\"TAB  \",*\"QWERTYUIOP[]\\\\\"),(\"CAPS  \",*\"ASDFGHJKL;'\",\"ENTER\"),(s,*\"ZXCVBNM,./\",s)]:\n for f in\"{1}__ ,|{} ||,|{1}||,/{1}\\|\".split(\",\"):print(f[-1]+\"\".join(f.format(c,\"_\"*-~len(c))for c in k))",
        "k=[4]*13+[8],[8]+[4]*13,[9]+[4]*11+[8],[11]+[4]*10+[11];m='`1234567890-=*','*QWERTYUIOP[]*',\"*ASDFGHJKL;'*\",'*ZXCVBNM,./*';c,d,e,n,u=0,'','|','\\n','_'\nfor a in 0,1,2,3:\n f=s=t=o='';x=0\n for y in k[a]:g=y-2;f+=' '+u*y;s+=e*2+m[a][x].replace('*','%s')+' |';t+=e*2+u*g+e;o+='|/'+u*g+'\\\\';x+=1\n d+=f+n+s+e+n+t+e+n+o+e+n\nl='SHIFT   ';print d%('BS   ','TAB  ','\\\\','CAPS  ','ENTER',l,l)",
        "print 'x\\x9c\\xad\\xd3\\xb9\\x0e\\x82@\\x10\\x80\\xe1\\x9e\\xa7\\xa0\\xb3\\xf1\\xbe\\x8d\\xb1\\x00\\xbc\\x0f<\\xc0\\x1b\\xb3>\\xc8<\\xbc\\xfc\\x8bf\\x8d\\xed8\\xc5\\x17\\x9a\\xddd\\xfe,\\xbe\\xc9\\xc7\\xd7b?<\\x91\\xa7/\"\\rhB\\x0b\\xda\\xd0\\x81.\\xf4\\xa0\\x0f\\x03\\xa8C\\x05F\\x10&~>\"\\xf9]\\xc6\\x88\\x16\\x86\\xbbj\\xc6dZ\\x98L<\\xb7\\xae\\x9a|\\xc74\\x08\\xed\\xba\\xb2\\x873L\\xe0\\x00)\\\\\\xe1\\x08\\x0b\\xd8\\xc2\\x0e\\xee\\xf0\\x80\\xec\\xd3\\xabXW\\x1d\\xces\\xeb\\xaa\\xc3\\xb9^\\x7fy_Q\\xb0K\\x8a`\\x01$0\\x86)\\xcc`\\x0eKX\\xc1\\x1a\\x86P\\xb2u\\xe3tr\\xf8\\xee\\xf5\\xaf\\xf7\\xa5\\x0e\\xf6\\xfb\\xbet\\xb1\\xde\\xbd\\x92\\xf9b\\x9a\\x16\\x7f\\x94\\xdc\\xe0\\x02\\x11\\x9c\\xec\\xef\\x061l\\xa0\\x0cU\\xa8\\xd9\\xbc\\xee\\xb4\\xeb\\xa5\\x8a\\xf5\\xd3K\\x15\\xcb\\x9e~\\x01r\\xfc\\xb9\\xee'.decode('zlib')"
    ],
    "la-la-land-no-wait-moo-moo-moonlight": [
        "lambda s:(s[:[x in\"aAeEiIoOuUyY\"for x in s][1:].index(0)+1]+\" \")*2+s",
        "def l(s,v=0):\n for l in range(len(s)):\n  if s[l]in\"aeiouyAEIOUY\":v=1\n  elif v:return(s[:l]+\" \")*2+s",
        "s=input()\nv=i=0\nfor c in s:\n w=c in'aAeEiIoOuUyY'\n if v*~-w:break\n v=w;i+=1\nprint(s[:i],s[:i],s)",
        "w=input();a='';v=0\nfor i in w:\n\tif i in 'aeiouyAEIOUY': v=1\n\telif v:\n\t\tbreak\n\ta+=i\na+=' ';print(a*2+w)"
    ],
    "program-that-creates-larger-versions-of-itself-quine-variant": [
        "s='s=%r;print s%%s*2;';print s%s",
        "print(open(__file__).read())\nf=lambda:print('f()')\nf()",
        "s='print\"s=%r;exec s;\"%s+s';exec s"
    ],
    "go-out-and-vote": [
        ".write()",
        "a=\"\\033[3%sm\"\nr,b=a%\"1;47\",a%4\nprint(r+\"I \"+b+\"V\"+r+\"o\"+b+\"t\"+r+\"e\"+b+\"d\")",
        "r='\\033[91m'\nb='\\033[94m'\nprint r+'\\033[47mI '+b+'V'+r+'o'+b+'t'+r+'e'+b+'d'",
        "termcolor"
    ],
    "hello-world-in-zero-lines-of-code": [
        "\"\"\"'''\"\"\";print(\"Hello, World!\")",
        "'''\"\"\"''';print\"Hello, World!\""
    ],
    "its-my-birthday-d": [
        "m=input()\nn=m-1\np=\"---\"+\"--\"*n\ng=\"\\n~~~\"+\"~~\"*n+\"\\n\"\nif m>0:print\" $\"*m,\"\\n\",\" |\"*m\ns=p+g+p\nprint s if m!=0 else\"Congratulations on your new baby! :D\"",
        "x,y,n=\"$|-~-\",\"  -~-\",input()\nfor i in zip(y,*[y,y]*(n<0)+[x,y]*n)if n else[\"Congratulations on your new baby! :D\"]:print\"\".join(i)",
        "i=input()\nl='\\n'\ns=''\nif i==0:s='Congratulations on your new baby! :D'\nelif i<0:s='---\\n~~~\\n---'\nelse:n=i*2+1;a=l+'-'*n;s=' $'*i+l+' |'*i+a+l+'~'*n+a\nprint s",
        "n=int(input())\nm=max(n*2+1,3)\nf=' {}'*n+'\\n'+' {}'*n+'\\n'+'-'*m+'\\n'+'~'*m+'\\n'+'-'*m\nif n==0:f='Congratulations on your new baby! :D'\nprint(f.format(*['$']*n+['|']*n))"
    ],
    "im-a-palindrome-are-you": [
        "lambda s:list(s)==list(reversed(list(s)))#)))s(tsil(desrever(tsil==)s(tsil:s adbmal",
        "lambda s:s[::-1]==s#s==]1-::[s:s adbmal"
    ],
    "print-a-10-by-10-grid-of-asterisks": [
        "print(\"*\"*10+\"\\n\"*10)",
        "exec(\"print('*'*10);\"*10)",
        "print((\"*\"*9+\"*\\n\")*10)",
        "exec\"print'**'*5;\"*10",
        "print('*'*10+'\\n')*10",
        "print(('*'*10+'\\n')*10)"
    ],
    "draw-the-national-flag-of-iceland": [
        "b,w,r=\"\\0H\\xe0\"*28,\"\\xff\"*12,\"\\xd7((\"*8\nA,B=28*(b+w+r+w+2*b),4*(8*w+r+15*w)\nprint\"P6 100 72 255 \"+A+B+100*r+B+A",
        "STDOUT"
    ],
    "xorting-an-array": [
        "o=input()\ns=sorted\np=s(set(o),key=o.index)\nn=q=0\nwhile 1:\n a=1\n while 1-q and p[0]<p[1]:p=p[1:];q=len(p)==1\n if q:break\n while not p[0]^a<p[1]^a:a*=2\n n+=a;p=[i^a for i in p]\nt=[a^n for a in o]\nprint[-1,n][s(t)==t]",
        "def f(a):\n m=n=0\n for i in range(32):\n  b=2**(31-i);m|=b\n  for n in[n,n|b]:\n   if not q(a,m,n):break\n  else:return-1\n return n\ndef q(a,m,n):\n if a:p=a[0]&m^n\n for t in a:\n  t=t&m^n\n  if t<p:return 1\n  p=t"
    ],
    "draw-the-olympic-games-logo": [
        "def f(s,i,j,c): \n    for (k,l) in zip([i,i,i+1,i+1,i+2,i+2,i+3,i+3,i+4,i+4,i+5,i+5],[j+2,i+3,j+1,j+4,j,j+5,j,j+5,j+1,j+4,j+2,j+3]):s[k][l]=c+'+'+'\\033[0m'\na=[]; \nfor i in range(9):a+=[14*[' ']]\nfor i in [0,4,8]:f(a,0,i,'\\033[9%im'%((4*i+4)%5))\nfor i in [2,6]:f(a,3,i, '\\033[9%im'%((i+1)%5))\nfor l in a:print''.join(l)",
        "for o in\"jzd360 1zlpwci 3ydgr29 20pzv5u jzd360 149ytc b8n40\".split():print bin(int(o,36))[2:].rjust(34,'0')",
        "print(\"\"\"  000     000     000\n 0   0   0   0   0   0\n0     000     000     0\n 0   0   0   0   0   0\n  000     000     000\n     0   0   0   0\n      000     000\"\"\")"
    ],
    "shortest-code-that-raises-a-sigsegv": [
        "eval((lambda:0).__code__.replace(co_consts=()))",
        "exec'()'*7**6"
    ],
    "possibly-quit-your-job-with-a-polyglot": [
        "n=int(input())\ns=\"Isf  tthhies ,b oIs sq ufiitn.d\"\nprint([\"not \"*any([n%a<1for a in range(2,n)])+\"prime\",s[::2]+s[1::2]][1/2>0])",
        "# Hey boss!  Here is that primality test function.  Please feel free to get rid of the comments.  I know they take up a lot of space.\ndef p(n):\n    mi = 129684688833659498452711087201136397576300593585173647966310022524659397678 # Max integer accepted.  We all want to test big primes, but this is too big.  I did a bunch of really fancy math to come to this number.\n    hm = hex(mi) # This will make mi into a string we can use in errors which include other strings.  I made it hex so that it is shorter and easier to read\n    lm = [hm[2*i:2*i+2] for i in range(len(hm)//2)][1:] # For even greater readability, I am taking off the 0x from the front and splitting into groups of two so you don't get lost!\n    if not type(n) is int or n>mi: # If the number isn't an integer or if it is too big, then\n        return \"Error: Please only input integers smaller than \"+\"\".join([chr(int(i,16)) for i in lm]) # Return the helpful error described above\n    for i in range(2,n): # Loop from 2 to n-1\n        if(n/i==n//i): # If n goes evenly into i, then\n            return \"composite\" # the number is not a prime\n    return \"prime\" # If we have gotten this far, the number must be prime\n# ignore these tests in the character count\nprint(p(7)) # prime\nprint(p(42)) # composite\nprint(p(\"Hello World\")) # \"error handling\"",
        "#Code is commented in both English and Esperanto to be more future proof.\n\n#Read number and convert to int.\n#Vs gur obff svaqf guvf, V dhvg.\nx=input()\n\n#Test if modulus of x equals 0\n#Teja sdgre slauqe te est 0\nprint\"prime\"if all(x%i for i in range(2,x))else\"not prime\""
    ],
    "output-with-the-same-length-as-the-code": [
        "print{+1}",
        "s='s=%r;print(ss)';print(s%s)",
        "print 1e5",
        "print(\"a\"*13)",
        "print 9**9",
        "str(...)[:]",
        "print(2**-9)",
        "print 4**16",
        "s='s=%r;print(\"0\"*~-len(s%%s))';print(\"0\"*~-len(s%s))"
    ],
    "draw-the-national-flag-of-france": [
        "s=\"[3%smF\";print(s%4*26+s%7*26+s%1*26+\"\\n\")*30",
        "print\"P6 78 52 255 \"+(26*\"\\x00U\\xff\"+78*\"\\xff\"+26*\"\\xefA5\")*52",
        "c=\"\\033[0;4%sm \";print((c%4*30+c%7*30+c%1*30+\"\\n\")*30)",
        "s=\"[3%s;1m\"+\"#\"*26;print(s%4+s%7+s%1+\"\\n\")*30"
    ],
    "code-golf-christmas-edition-how-to-print-out-a-christmas-tree-of-height-n": [
        "i=n=input()\nwhile~i:i-=1;print i%n*' '+~i%n*'**'+'*'",
        "i=n=input()\nexec\"i=~-i%n;print' '*i+'*'*(n*2-i+~i);\"*-~n",
        "f=lambda n:'\\n'.join([' '*(n-1-i)+'*'*(i*2+1)for i in range(n)])+'\\n'+' '*(n-1)+'*'",
        "N = int(input())\nprint(' '*N+'\\n','\\n'.join(['\\t'+' '*(N-i)+'*'*(i*2+1) for i in range(N)]) + '\\n', ' '*(N+3)+'*'+'\\n')",
        "n=int(input());\nfor j in range(n):\n print(' '*(n-j)+'*'*(2*j+1))\nprint(' '*n+'*')",
        "i,x=input()*2,1\nexec\"print('*'*(x%i)).center(i);x+=2;\"*(i/2+1)"
    ],
    "if-a-program-terminates-and-there-is-no-one-to-see-it-does-it-halt": [
        "10**10**10**2.004302604952323",
        "9**9**1e9"
    ],
    "proving-that-a-russian-cryptographic-standard-is-too-structured": [
        "def p(x,t=b'@`rFTDVbpPBvdtfR@\\xacp?\\xe2>4\\xa6\\xe9{z\\xe3q5\\xa7\\xe8',l=255,d=17):\n if x<2:return 252-14*x\n while~-x:x=x*2^(x>>7)*285;l-=1\n return(188^t[l//d],d^t[l%d]^t[d+l//d])[l%d>0]",
        "f=lambda x,l=255,k=b'@`rFTDVbpPBvdtfR@':f(x*2^x//128*285,l-1)if~-x*l else[k[l%17]^(0x450a98dc4ed7d6440b99934f92dd01>>l//17*8&255),k[l//17]][l%17<1]^188"
    ],
    "print-a-negative-of-your-code": [
        "(*_,q,n \n)=p=''' \n       p\n'''[2:] \nprint(p \n*2+q*7, \nn+p*4+p \n[0:-1])",
        "print( \n'%+7s' \n'\\n'%1 \n*6+'%' \n'-7s'% \n111111 \n      )"
    ],
    "will-it-halt-cops": [
        "x=input()\ntry:y=len(x)<10and'*'not in x and len(str(eval(x)))==307\nexcept:y=0\nwhile not y:0",
        "try:x=int(input())\nexcept:x=0\np=c=n=0\nwhile x:\n b=x&511\n while (p|c|n)&b or b&(b-1):0\n p|=b;c|=b;n|=b;x>>=12;p>>=1;n*=2\nwhile (x+1)/(c-511)<1:0",
        "def f(x):\n    to_be = x == x\n    while to_be or not to_be:\n        pass\n    while True:\n        pass\n    while 1:\n        pass\n    i = input()\n    s = '!@#$%^&*()_+'\n    if all(c in i for c in s):\n        exec(i[0xf91ea8222d])",
        "def f(x):\n t=\"\"\"def t():\n def t():\n  while t:pass\n  {}\n\n t()\nt()\"\"\"\n if type(x) != str or chr(10) in x:\n  while t:pass\n try:t=compile(t.format(x),'m','exec')\n except:\n  while t:pass\n exec(t)",
        "def f(x):\n y=str(x)\n while not(x and(y[-1]+y[:-1])==str(2*x)):a=1",
        "def f(x):\n    try:x()\n    except:7\n    while True:7",
        "def f(x):\n  while(x==x or not x==x):pass",
        "def _(x):exec x\ntry:(input()or _(\"while 1:0\"))and _(\"while 1:0\")\nexcept:_(\"while 1:0\")",
        "while(lambda:1)():0",
        "while 1:\n try:\n  x = input()\n except:\n  pass",
        "def f(o):\n while bool(o)==bool(o):0",
        "def f(x):\n while isinstance(type(x),type):pass",
        "p=print\ntry:\n    n=input()\nexcept:\n    while 1:p(\"i\")\ntry:\n    while sum(map(int,n))<1or not(int(n[17]+n[:17])==2*int(n[:18])and int(n[45]+n[18:45])==3*int(n[18:46])and int(n[87]+n[46:87])==5*int(n[46:88])):p(\"m\")\nexcept:\n    while 1:p(\"x\")",
        "def f(x):\n try:\n  s=str(x)\n  [c for c in s if c not in'x.']and 0/0\n  exec(s)\n finally:\n  while(1):1",
        "def T(x,t=type):\n while t(x)is t or T(t(x)):0",
        "l=[]\nl+=[l]\ndef l(a,i=id,l=id(l)):\n while i(a)-l:0"
    ],
    "it-took-me-a-lot-of-time-to-make-this-pls-like-youtube-comments-1": [
        "u=lambda n,s,b:s[:b-abs(n-b)]+'\\n'+u(n+1,s,b)if n<2*b else\"\"\ndef c(w):print(u(0,w,len(w)))",
        "f=lambda s,n=1:s[n:]and[s[:n]]+f(s,n+1)+[s[:n]]or[s]",
        "i=input()\nj=[i[:x]for x in range(1,len(i))]\nprint j+[i]+j[::-1]",
        "f=lambda s,i=1:s[i:]and[s[:i]]+f(s,i+1)+[s[:i]]or[s]",
        "lambda s,r='':(l:=[r:=r+c for c in s])+l[-2::-1]",
        "lambda x:'\\n'.join(x[:[i,len(x)-i][i>len(x)]]for i in range(1,len(x)*2))"
    ],
    "does-the-code-terminate": [
        "k=n=1\nwhile(n+1)**.5%1+7/k:k+=1;n*=k",
        "n=196\nwhile 1:\n    x=str(n);r=x[::-1]\n    if x!=r:n=n+int(r)\n    else:1/0",
        "def f(i,j):\n r=range(i)\n for a in r:\n  for b in r:\n   if a**3+b**3==i:1/0\n f(j,i+j)\nf(13,21)",
        "p=lambda n,k=2:n<=k or n%k*p(n,k+1)\ng=lambda n:[p(b)*p(n-b)for b in range(n)]and g(n+2)\ng(4)",
        "p=lambda n:all(n%x for x in range(2,n))\ns=lambda n:0if p((10223*2**n)+1)else s(n+1)\ns(0)",
        "n=2\nwhile 2**~-n%n**3-1:n+=1",
        "n=2\nwhile\"\".join(str((i+2)**n)[0]for i in range(8))!=\"23456789\":n+=1",
        "n=2\nwhile 1:\n L=[];x=n\n while~-n:1/(n not in L);L+=[n];n=(n/2,n*3+1)[n%2]\n n=x+1"
    ],
    "implement-the-thanos-sorting-algorithm": [
        "a=list(input())\nwhile a!=sorted(a):a=a[0:len(a)//2]\nprint(a)",
        "q=lambda t:t>sorted(t)and q(t[::2])or t",
        "a=input()\nwhile a!=sorted(a):a=a[:len(a)/2]\nprint a",
        "f=lambda l:l>sorted(l)and f(l[::2])or l"
    ],
    "create-output-twice-the-length-of-the-code": [
        "def s(c=2):print'A'*24*c",
        "print`id`*1",
        "print`-.1`",
        "print'a'*int(input())*24",
        "print 'aaaaa'*6",
        "print 9**21"
    ],
    "would-this-string-work-as-string": [
        "f=lambda s:s==''or s[:2]in\"__/~~\\/\\_\"*f(s[1:])",
        "def f(x):*l,=map(r'_/\\~'.find,x);return 1-any((i^j//2)%2for i,j in zip(l,l[1:]))",
        "lambda s,d={'\u203e':'\\\u203e','_':'/_','/':'\\\u203e','\\\\':'/_'}:len(s)<2or all([s[i+1] in d[s[i]]for i in range(len(s)-1)if s[i]in d])",
        "p=lambda s:len(s)<2or((ord(s[-2])%13>5)^ord(s[-1])%2)&p(s[:-1])"
    ],
    "in-honor-of-adam-west": [
        "for s in map(lambda x:x+x[-2::-1],b\".$; *',$' ('.* &).* %,+, $R #T #T #T $R %()8 '')&&( *%)$(&\".split()):print(*((u-35)*\" \"+(v-35)*\"*\"for u,v in zip(*[iter(s)]*2)))",
        "for i in range(637):print(' *'[0x301038101800F01C3E1C0781F01FFFFF01F1FFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFC7FC01FF007FC1F8007F000FC03C003F800780078010400F00002000000800>>i&1],end=['\\n',''][(i+1)%49>0])",
        "for l in\"b1d 74a13 54c4 36c4 2995 1o 0p 0p 0p 1o 257b 447343 727162\".split():x=''.join(s*int(k,36)for s,k in zip(' *'*3,l));print(x+x[-2::-1])",
        "for w in'1D 4A13 4C4 6C4 995 O P P P O 57B 47343 27162'.split():r=''.join(c*int(k,36)for c,k in zip(3*'* ',w));print'%25s'%r+r[-2::-1]"
    ],
    "it-was-just-a-bug": [
        "i=8;exec\"print(' '*abs(i)).join('1234567890');i-=1;\"*17",
        "i=8\nwhile i+9:print(*'1234567890',sep=' '*abs(i));i-=1",
        "for i in range(-8,9):print(('%-'+'%ds'%-~abs(i))*10)%tuple('1234567890')",
        "for x in range(-8,9):\n z=\"\"\n for y in range(1,11):z+=str(y%10)+\" \"*abs(x)\n print(z)"
    ],
    "make-a-ceeeeeeee-program": [
        "b=list(input())\nc=input()\ni=1\nwhile i<len(b):\n while b[i]==c:i+=1\n b.pop(i);print(''.join(b))",
        "def g(s,o):\n r,p=s[0],print\n for i in range(1,len(s)):\n  if s[i]==o:r+=s[i]\n  else:p(r+s[i:])\n p(r)",
        "f,m=input();k=f[0]\nwhile f:a=f[0]==m;k+=f[0]*a;f=f[1+a:];print k+f",
        "a,b,l1=input(),input(),0\nfor n in range(len(a)):\n    l2=l1\n    l1=''.join([a[:len(a)-n]]+[x for x in a[len(a)-n:] if x==b])\n    if l2!=l1: print(l1)",
        "(lambda a:print(a[0])or[a.__setitem__(0,a[0][0]+a[0][1:].replace(x,'',1))or print(a[0]) for x in a[0][1:] if x!=a[1]])([input(),input()])",
        "s=open(0).read()\np,c,s=s[0],s[-2],s[:-3]\nfor h in s:p+=s[:h==c];s=s[1:];print(p+s)",
        "lambda s,c:[s[0]+c*s[1:i].count(c)+s[i+1:]for i in range(len(s))]",
        "def e(i,k):\n for r in i:\n  if r!=k:i=i[0]+i[1:].replace(r,'',1);print(i)"
    ],
    "5-favorite-letters": [
        "d,i,o,c,l,s,n='DIOCL \\n'\nT=d*4+s*6+i*5+s*6+o*3+s*7+c*4+s*5+l\nM=d+s*3+d+s*7+i+s*7+o+s*3+o+s*5+c+s*9+l+n\nprint T+n,M,M,M,T+l*3",
        "e,f,i,t,h,s='EFITH '\np=print\nS=s*5\nD=i+s*9+t+s*7\nA=e*5+S\nF=S+i*5+S\nB=e+s*9+f+s*11+D+h+s*3+h\nC=h+s*3+h\np(A+f*5+F+t*5+S+C)\np(B)\np(e*4+s*6+f*4+s*8+D+h*5)\np(B)\np(A+f+s*4+F,s+t+s*7+C)",
        "E,s,I,L,T,U,n=\"E ILTU\\n\"\nS,b,B,D,u=s*5,s*11,s*9,s*7,\"U   U\"\nC,Z=u+n+E,I+D+L+b+T+D\nprint E*5+S+I*5+S+L+B+T*5+S+C+b+Z+C+E*3+s*8+Z+C+b+Z+U+s*3+U+n+E*5+S+I*5+S+L*5+D+T+s*8+U*3",
        "for i in range(0,25,5):\n for c,p in {'M':18732593,'O':15255086,'N':18667121,'T':32641156,'Y':18157700}.items():\n  print format(p,'025b')[i:i+5].replace('0',' ',).replace('1',c)+'   ',\n print",
        "for l in\"ffffbjfff blbhblbhb eibhblbhe blbhblbhb bjfffhbhf\".split():print(\"\".join(\"F I L T E\"[i]*(ord(l[i])-97)for i in range(9)))"
    ],
    "programming-a-pristine-world": [
        "if 5-open(1,'w').write('world'):a",
        "for[]in{5:[]}[open(1,\"w\").write(\"world\")]:a"
    ],
    "i-am-passive-aggressive-and-want-to-insult-my-boss-without-him-finding-out": [
        "s='';o=input()\nfor n in o.split():s+=[n,'\\n'+n.title()][n[0]==(\"DIEINAGREASEFIRE\"*len(o))[s.count('\\n')]]+' '\nprint([o,s][s.count('\\n')==16])",
        "def c(m,h,l=[]):\n if h:s=m.rindex(h[0]);l=[m[s:]]+l;return c(m[:s],h[1:],l)\n return[m]+l\ni=input()\ntry:print('\\n'.join(c(i,\"ERIF ESAERG A NI EID\")))\nexcept:print(i)"
    ],
    "99-bottles-of-beer": [
        "b=lambda x,y: f'{x} bottle{(\"\",\"s\")[x>1]} of beer{(\"\",\" on the wall\")[y]}'\np=print\nfor i in range(99,0,-1):\n p(f'{b(i,1)}, {b(i,0)}.')\n p((f'Go to the store and buy some more, {b(99,1)}.',f'Take one down and pass it around, {b(i-1,1)}.')[i>1])",
        "i=198\nwhile i:s=`i/2or 99`+' bottle%s of beer'%'s'[1<i<4:];print['%s, '+s+'.','Take one down and pass it around, %s.\\n',\"Go to the store and buy some more, %s.\"][i%2+1/i]%(s+' on the wall');i-=1",
        "i=98;b=\"bottle\";w=\"on the wall\";o=\"of beer\"\nwhile i+1:y=bool(i);s=\"s\"*y;print(i+1,b+s,o,w+\",\",i+1,b+s,o+\".\\n\"+(\"Go to the store and buy some more,\",\"Take one down and pass it around,\")[y],i or 99,b+\"s\"*bool(i-1),o,w+\".\"+\"\\n\"*y);i-=1",
        "b=lambda x:\"%s bottle%s of beer\"%(x,\"s\"*(x>1));o=\"on the wall\"\nfor i in range(99,0,-1):print(\"\\n%s %s, %s.\\n%s\"%(b(i),o,b(i),[\"Take one down and pass it around, %s %s.\"%(b(i-1),o),\"Go to the store and buy some more, %s %s.\"%(b(99),o)][i==1]))",
        "n=198\nwhile n:s=\"bottle%s of beer\"%\"s\"[:n^2>1];print n%2*\"GToa kteo  otnhee  dsotwonr ea nadn dp absusy  isto maer omuonrde,,  \"[n>1::2]+`n/2or 99`,s,\"on the wall\"+[\", %d %s.\"%(n/2,s),\".\\n\"[:n]][n%2];n-=1",
        "def B(n):A='bottle';return A if n==1 else A+'s'\nA=99\nwhile A>=1:F='of';D=F+' beer';E='more';C=D+' on the wall';G='no '+E;H=f\"Take one down and pass it around, {A-1 if A>1 else G} {B(A-1)} {C}\\n\"if A!=1 else f\"Go to the store and buy some {E}, 99 {B(2)} {C}.\";print(f\"{A} {B(A)} {C}, {A} {B(A)} {D}.\\n\"+H);A=A-1",
        "b=\" of beer\"\ns=\"bottles\"+b\nt=s[:6]+b\nq=\"on the wall.\"\np=print\nx=99\nwhile x>1:p(x,s,q,x,s+\".\\nTake one down and pass it around,\",x-1,(s,t)[x>1],q);x-=1\np(1,t,q,1,t+\".\\nGo to the store and buy some more,\",99,s,q)",
        "b,o,s,t=\"bottles of beer\",\"on the wall\",\"bottle of beer\",\".\\nTake one down and pass it around,\"\ni=99;exec'print i,b,o+\",\",i,b+t,i-1,b,o+\".\\\\n\";i-=1;'*97\nprint\"2\",b,o+\", 2\",b+t+\" 1\",s,o+\".\\n\\n1\",s,o+\", 1\",s+\".\\nGo to the store, buy some more, 99\",b,o+\".\"",
        "i=99\ns='s'\nb='%s bottle%s of beer'\no=' on the wall'\ny=b%(i,s)\nwhile i:print(y+o+', '+y+'.');i-=1;s=('',s)[i>1];y=b%(i,s);print(('Take one down, pass it around, '+y+o+'.\\n','Go to the store and buy some more, 99'+b%(s,'s')+o+'.')[i<1])",
        "a=\"\\n%s bottles of beer on the wall\"\nt=\"\\n\\nTGaok et oo nteh ed oswtno raen da npda sbsu yi ts oamreo umnodr e\"\nd=99\nwhile d:print(a%d*2)[:-12]+t[d==1::2]+a%(d-1or 99);d-=1",
        "w=\"bottles of beer on the wall\"\n[print(i,w+',',w[:15]+'.\\nTake one down and pass it around,',str(i-1),w+'.\\n')for i in range(99,1,-1)]\nprint('1 bottle',w[8:],',1 bottle',w[8:15]+'.\\nGo to the store and buy some more,',99,w)"
    ],
    "2048-like-array-shift": [
        "def f(l):b=l[-2:-1]==l[-1:];return l and f(l[:~b])+[l[-1]<<b]",
        "n=lambda l:l[1:]and[*n(l[:~(l[-1]==l[-2])]),l[-1]*-~(l[-1]==l[-2])]or l",
        "def f(a,r=[]):\n while a:\n    if len(a)>1and a[-1]==a[-2]:a.pop();a[-1]*=2\n    r=[a.pop()]+r\n print r"
    ],
    "the-hungry-mouse": [
        "a=input();m=16\nfor i in range(m):a[i*5:i*5]=0,\nwhile m:i=a.index(m);a[i]=0;m=max(a[i+x]for x in[-6,-5,-4,-1,1,4,5,6])\nprint sum(a)",
        "i=x=a=input()\nwhile x:x,i=max((y,j)for j,y in enumerate(a)if i>[]or 2>i/4-j/4>-2<i%4-j%4<2);a[i]=0\nprint sum(a)"
    ],
    "fifty-shades-of-grey": [
        "print'P2 1000 20 50 '+20*(''.join([20*(str(x)+' ')for x in range(50)]))",
        "print\"P2 2500 50 51\"\nr=range(50)\nfor x in r:\n for y in r:\n  for z in r:print y"
    ],
    "print-this-diamond": [
        "k=[]\nfor t in range(10):\n    l=str(111111111**2)[:t]\n    k.append(l.rjust(9)+l[:-1][::-1])\nprint(\"\\n\".join(k+k[:-1][::-1]))",
        "z=\"123456789\"\nfor i in range(9)+range(8)[::-1]:print\"% 8s\"%z[:i]+z[i::-1]",
        "for n in`111111111**2`:print`int('1'*int(n))**2`.center(17)",
        "for i in map(int,str(int('1'*9)**2)):print' '*(9-i),int('1'*i)**2",
        "i=8;exec'print\" \"*abs(i)+`int(\"1\"*(9-abs(i)))**2`;i-=1;'*17",
        "s=str(111111111**2)\nfor i in map(int,s):print'%8s'%s[:i-1]+s[-i:]"
    ],
    "print-a-tabula-recta": [
        "a='%c'*26%tuple(range(65,91))\nfor x in a:print a;a=a[1:]+x",
        "a=range(65,91)*27\na[::-27]=[10]*26\nprint bytearray(a)",
        "print''.join(chr(10+(-~i%27and 55+i%26))for i in range(701))",
        "a=bytearray(range(65,91))*2\nexec'print a[:26];a=a[1:];'*26",
        "''.join",
        "e='ABCDEFGHIJKLMNOPQRSTUVWXYZ';exec('print(e);e=e[1:]+e[0];'*26)",
        "i=702\nwhile i:i-=1;print(end=chr(10+(i%27and 80-i%26)))",
        "s = string.uppercase\nfor i in range(0,26):print s[i:]+s[:i]"
    ],
    "christmas-theme-disclaimer-here": [
        "d,*l=\" _%c_     , [___]   , /:' \\   ,|::   |  ,\\::.  /  , \\::./   ,  '='    \".split(',')\nx=int(input())-2\nprint(' '*3,-~x*'.--.__.--'+'.\\n',d%'(',d%'Y'*x,d%')')\nfor s in l:print(s,s*x,s)",
        "v,p=' \\n'\na,l,n=\".--._\",[\"[___]\",\" /:' \\ \",\"|::   |\",\"\\::.  /\",\" \\::./ \",\"  '='  \"],input()-2\ne,b=v*5+\"_)_\",a[::-1]\nr=v*4,a,(b[:4]+a)*n,b,p+\"  _(_   \",(v*4+\"_Y_  \")*n,e+p+v\nfor i in l:b=4-2*(i in l[1:]);r+=i+v*-~b,(i+v*b)*n,v+i+p\nprint''.join(r)"
    ],
    "nest-a-string": [
        "z=lambda x,*y:x+f'({z(*y)})'if y else x",
        "s=input()\nprint(\"(\".join(s)+len(s)*\")\")",
        "def c(s):if(len(s)==1):return s;return s[0]+\"(\"+c(s[1:])+\")\"",
        "lambda s:s if len(s)<2else s[0]+\"(\"+nest(s[1:])+\")\"",
        "lambda x:print(*x,sep='(',end=')'*~-len(x))",
        "lambda e:\"(\".join(e)+\")\"*~-len(e)"
    ],
    "from-programming-puzzles-to-code-golf": [
        "print' 'and'Programming Puzzles'or'Code\\40Golf'",
        "a=0;ab=\"Programming\";a\nb=\"Code\";ad=\"Puzzles\";a\nd=\"Golf\";print(ab,ad)",
        "print[\"Code\\40Golf\",\"Programming Puzzles\"][\" \">\"\"]"
    ],
    "determine-whether-strings-are-anagrams": [
        "def f(a,b):\n a,b=list(a),list(b)\n while a:\n    try:b.remove(a.pop())\n    except:return\n return len(a)==len(b)",
        "f=lambda a,b,S=sorted:S(a)==S(b)",
        "p=sorted\nf=lambda a,b:p(a)==p(b)",
        "def h(s):\n    r={}\n    for c in s:\n        try:r[c]+=1\n        except:r[c]=1\n    return r\nx=raw_input().split(',')\nprint h(x[0])==h(x[1])",
        "f=lambda w,x,y:w==y if x==\"\"else any([f(w+a,x.replace(a,\"\",1),y)for a in x]) \ng=lambda x,y:f(\"\",x,y)",
        "sorted",
        "sorted(x)==sorted(y)",
        "s=sorted;a,b=input().split(', ')\nprint(str(s(a)==s(b)).lower())"
    ],
    "youre-on-a-8-day-streak": [
        "n=input();print(\"a\"+\"n\"*(len(n)%3>1and n[:2]in\"118\"or\"8\"==n[0]))",
        "s=`input()`\nprint['a','an'][s[:1]=='8'or s[:2]in len(s)%3/2*'118']",
        "lambda n:'a'+'n'[:`n`[0]=='8'or`n`[:2]in len(`n`)%3/2*'118']"
    ],
    "print-your-code-backwards-reverse-quine": [
        "_=']0~::[_%%_ tnirp;%r=_';print _%_[::~0]",
        "s=\"print's cexe;%r=s'%s[::-1]\";exec s"
    ],
    "bake-a-slice-of-pi": [
        "print'()'*6+'\\n|\\\\3.1415926|\\n|:\\\\53589793|'\nfor n in 2384626,433832,79502,8841,971,69,3,'':print'%11s|'%('\\%s'*2%('_:'[n<'']*2,n))",
        "p,d=[2384626,433832,79502,8841,971,69,3],\"|\\n\"\nc=(\"()\"*6)+d[1]+\"|\\\\\"+`3.1415926`+d+\"|:\\\\\"+`53589793`+d\nfor x in range(7):c+=\" \"*x+\"\\\\::\\\\\"+`p[x]`+d\nprint c+\" \"*7+\"\\\\__\\\\|\"",
        "P=\"3.1415926 53589793 2384626 433832 79502 8841 971 69 3\".split()\nf=\"()\"*6+\"\\n|\\%s|\\n|:\\%s|\\n\"%(P[0],P[1])\nfor s in range(7):f+=\" \"*s+\"\\::\\\\\"+P[s+2]+\"|\\n\"\nprint f+\" \"*7+\"\\__\\|\""
    ],
    "hello-world-0-0": [
        "def HelloOWorld():B\ndef B(a):print HelloOWorld.__name__.replace('O',chr(a+~0))+chr(a)\nB(ord(B.__name__)>>-~0)",
        "def Hello(n,m,j):print n.func_name,m.func_name+chr(j)\ndef World():pass\no=-~0;O=o+o;P=O<<O*O;Hello(Hello,World,P+o)",
        "s=ord('O')\na=len('0')\nb=a+a\nc=b+a\nd=c+a\ne=d+a\nf=e+a\ng=f+a\nh=g+a\nprint chr(s-g)+chr(s+g*c+a)+chr(s+g*d+a)+chr(s+g*d+a)+chr(s+h*d)+chr(s-h*f+a)+chr(s+h)+chr(s+h*d)+chr(s+g*e)+chr(s+g*d+a)+chr(s+g*c)+chr(s-h*f+b)",
        "o=-~-~-~0\nL=o+o\nd,W=-~L,o**o\n_=o*W\nprint str().join(chr(L+W+_-i)for i in[d*L,L+d,L,L,o,-~_,W,o,0,L,d+d,_])",
        "o=-~0\ndef World():0\ndef Hello():print Hello.__name__,World.__name__+chr(o+(o<<(o+o+o+o+o)))\nHello()",
        "print str().join([chr((~0*(~0+~0))**(~0*(~0+~0+~0))*(~0*(~0+~0+~0))**(~0*(~0+~(0)))),\n                  chr((~0*(~0+~0))**(~0*(~0+~0))*(~0*(~0+~0+~0+~0+~0))**(~0*(~0+~0))+~0*~0),\n                  chr((~0*(~0+~0))**(~0*(~0+~0))*(~0*(~0+~0+~0)**(~0*(~0+~0+~0)))),\n                  chr((~0*(~0+~0))**(~0*(~0+~0))*(~0*(~0+~0+~0)**(~0*(~0+~0+~0)))),\n                  chr((~0*(~0+~0))**(~0*(~0+~0+~0+~0))*~0*(~0+~0+~0+~0+~0+~0+~0)+~0),\n                  chr((~0*(~0+~0))**(~0*(~0+~0+~0+~0+~0))),\n                  chr((~0*(~0+~0))**(~0*(~0+~0+~0))*(~0*(~0+~0+~0))*(~0*(~0+~0+~0+~0+~0))+~0),\n                  chr((~0*(~0+~0))**(~0*(~0+~0+~0+~0))*~0*(~0+~0+~0+~0+~0+~0+~0)+~0),\n                  chr((~0*(~0+~0))**(~0*(~0+~0))*(~0*(~0+~0+~0+~0+~0))**(~0*(~0+~0))+(~0*(~0+~0))**((~0+~0)*(~0+~0))+~0+~0),\n                  chr((~0*(~0+~0))**(~0*(~0+~0))*(~0*(~0+~0+~0)**(~0*(~0+~0+~0)))),\n                  chr((~0*(~0+~0))**(~0*(~0+~0))*(~0*(~0+~0+~0+~0+~0))**(~0*(~0+~0))),\n                  chr((~0*(~0+~0))**(~0*(~0+~0+~0+~0+~0))+~0*~0)\n                  ])",
        "class World():\n pass\nclass Hello(World):\n def __init__(self):\n  print(self.__class__.__name__, self.__class__.__base__.__name__)\nO=Hello()",
        "O=ord(\"O\")\nN=O/O\nT=N+N\nR=N+T\nE=T**R\nE<<T\nprint'O'[0].join(chr(c+O)for c in[N-E,E*R-T,_-R,_-R,_,N-_-E-E,E,_,_+R,_-R,E*R-R,T-_-E-E])"
    ],
    "telescopic-parentheses": [
        "m,c,l=list(input()),0,[]\nfor j in m:c+=1if j=='('else-1;l+=[c-1if j=='('else c]\nfor i in range(max(l)+1):\n t,p='',0\n for q in m:t+=q if l[p]==i else' ';p+=1\n print t",
        "def f(s,i=0,z=''):\n for x in s:b=x>'(';z+=[' ',x][i==b];i-=2*b-1\n if'('in z:print z;f(s,i-1)",
        "def f(L,n=0,O=()):\n for c in L:n-=c>\"(\";O+=\" \"*n+c,;n+=c<\")\"\n for r in map(None,*O):print\"\".join(c or\" \"for c in r)"
    ],
    "find-the-factorial": [
        "f=lambda n:n*(n and f(n-1))+(n<1)",
        "f=lambda n:n*f(n-1)if n else 1",
        "lambda n:reduce(long.__mul__,range(1,n+1),1L)",
        "f=lambda n:n*f(n-1)if n else 1",
        "f=lambda x:x and x*f(x-1)or 1",
        "__('__=_==_'+';__*=_;_=~-_'*_)\n_=+__",
        "f=lambda n:n and n*f(n-1)or 1",
        "reduce",
        "def f(n):return n and n*f(n-1) or 1",
        "f=lambda x:0**x or x*f(x-1)",
        "f=lambda x:x/~x+1or x*f(x-1)",
        "f=lambda x:x<2or x*f(x-1)"
    ],
    "the-shortest-code-to-invert-bit-wise-a-binary-string": [
        "print(''.join('1'if a=='0' else '0' for a in input()))",
        "lambda s:''.join(['10'[c>'0']for c in s])",
        "for c in input():print(1-int(c),end=\"\")",
        "for i in input():print(1-int(i),end='')",
        "r=str.replace\nr(r(r(input(),'1','a'),'0','1'),'a','0')",
        "a=input()\nprint(bin(int(a,2)^2**len(a)-1)[2:].zfill(len(a)))",
        "lambda s:''.join(str(1-int(c))for c in s)",
        "print''.join(`1-int(x)`for x in raw_input())",
        "print(''.join(['0' if i=='1' else '1' for i in input()]))",
        "print''.join([bin(~0)[3:] if x == '0' else bin(~1)[4:] for x in ''])",
        "b=raw_input();a=''\nfor i in b:\n    if i=='1':a+='0'\n    else:a+='1'\nprint a"
    ],
    "output-the-sign": [
        "lambda n:cmp(n,0)",
        "def s(n):\n try:r=len([1][:n])*2-n/n\n except:r=0\n return r",
        "lambda x:x and(1,-1)[x<0]",
        "lambda n:n and n/abs(n)",
        "print((n>0)*2+(n==0)-1)",
        "lambda x:eval(f'x and {x}**0')",
        "lambda n:n and abs(n)//n",
        "n//abs(n-.1)",
        "lambda n:(n>0)-(n<0)"
    ],
    "count-up-forever": [
        "i=1\nwhile 1:print i;i+=1",
        "print()",
        "i=1\nwhile[print(i)]:i+=1",
        "LOAD_CONST               0\nLOAD_CONST               1\nINPLACE_ADD\nDUP_TOP\nPRINT_ITEM\nJUMP_ABSOLUTE            2"
    ],
    "ddoouubbllee-ssppeeaakk": [
        "t=input()\nfor i in map(lambda x:x[0]+x[1],zip(t,t)):print(end=i)",
        "print(''.join(x*2for x in input()))",
        "lambda i:sum(zip(i,i),())",
        "def d(s,o=\"\"):\n\tfor c in s:o+=c+c\n\treturn o",
        "for x in input():print(end=x*2)"
    ],
    "create-an-h-from-smaller-hs": [
        "f=lambda r:-r*'H'or[x+[x,' '*3**r][b]+x for b in 1,0,1for x in f(r-1)]",
        "def g(a,x,y,s):\n\tif s:s/=3;[g(a,x+k/3*s,y+k%3*s,s)for k in 0,2,3,4,5,6,8]\n\telse:a[x][y]=1\ndef f(s):s=3**s;a=eval(\"s*[0],\"*s);g(a,0,0,s);print a"
    ],
    "count-of-as-and-bs-must-be-equal-did-you-get-it-computer": [
        "eval(input().translate(\")(\"*50))",
        "def q(s):  \n a=len(s)/2  \n for x in range(a):  \n  if s[x]!='a' or s[a+x]!='b' or a*2!=len(s):a=0\nreturn a",
        "lambda s:''<s==len(s)/2*\"a\"+len(s)/2*\"b\"",
        "f=lambda s:s=='ab'or s<s[-1:]>0<f(s[1:-1])",
        "lambda s:s.count('a')==s.count('b')>0"
    ],
    "print-some-json": [
        "print{\"'\":.1}",
        "print{`str`:1}"
    ],
    "fibonacci-fizz-buzz-fibo-nacci": [
        "a,b=0,1\nexec(\"print(f\\\"{''if b%2else'Fibo'}{''if b%3else'Nacci'}\\\"or b);a,b=b,a+b;\"*100)",
        "a=[1,1]\nprint 1\nfor _ in\"q\"*99:print[a[1],\"Fibo\",\"Nacci\",\"FiboNacci\"][a.append(a.pop(0)+a[0])or(1-a[0]%2)+(a[0]%3<1)*2]",
        "a=b=1;exec\"print~a%2*'Fibo'+~a%3/2*'Nacci'or a;a,b=b,a+b;\"*100",
        "x=[1,1]\nexec\"x+=[x[-1]+x[-2]];\"*98\nprint\"\\n\".join([\"Fibo\"*(i%2==0)+\"Nacci\"*(i%3==0)or`i`for i in x])"
    ],
    "the-letter-a-without-a": [
        "print(chr(-~(8<<3)))",
        "print`3<3`[~3]",
        "print(chr(88-23),end='')",
        "print(chr(88-23))",
        "print chr(88-23)"
    ],
    "sing-baby-shark": [
        "for x in\"Baby\",\"Daddy\",\"Mommy\",\"Grandpa\",\"Grandma\":z=x+' Shark';print((z+' doo'*6+\"\\n\")*3+z+\"!\")",
        "for w in\"Baby Daddy Mommy Grandpa Grandma\".split():w+=\" Shark\";print(w+\" doo\"*6+\"\\n\")*3+w+\"!\""
    ],
    "score-rock-paper-scissors": [
        "lambda*l:cmp(*l)*(1|-('R'in`l`))",
        "lambda x,y:(len(2*x+y)^67)%3-1",
        "lambda x,y:2-(94>>len(6*x+y)%7)%4",
        "lambda o,t:(o!=t)*[-1,1]['RPS'['PS'.find(t[0])]!=o[0]]",
        "lambda x,y:+(x!=y,-1)[x[0]+y[0]in'RPSR']"
    ],
    "am-i-a-rude-number": [
        "lambda n:any(n>>5*i&31==4for i in range(n))",
        "f=lambda a:a%32==4or a>0<f(a/32)"
    ],
    "output-the-ppcg-prime": [
        "x='1'*78\ns='7'*156+x\na=1\nfor c in str(int('109PDKEZ3U32K97KJQVELW8GKXCD42EGEYK715B6HPMPL0H8RU',36)):s+=`a`*int(c);a^=9\nprint s+x+'3'*39",
        "s='1'*78\nprint'7'*156+s+bin(int(\"8zlghh9gqo74zwzntkcjmoou35vvlbg1cmasrm6ny1iafcvw568sj\",36))[2:].replace(*'08')+s+'3'*39",
        "print'7'*156+'1'*78+bin(int('JAOKI5B0O6K9IWDU8P76KDLR0VZMNWQ2WB9D8BOS8',36))[2:].replace('0','88')+'1'*80+'3'*39"
    ],
    "build-me-a-brick-wall": [
        "for b in range(10):print('_|__'*175)[b*70:][:70]",
        "_=-~(_==_)\n__=-~_*-~_*_\n_=[('_|__'*__)[:-_],('___|'*__)[:-_]]*-~(_*_)",
        "p=\"_|__\"*17\nprint((p+\"_|\\n__\"+p+\"\\n\")*5)",
        "k='_|__'*18\nprint'\\n'.join([k[:70],k[2:]]*5)",
        "exec(\"print('_|__'*18);print('___|'*18);\"*5)",
        "for i in range(10):print(('_|__'*175)[70*i:70*(i+1)])",
        "s=\"_|__\"*17;print(s+\"_|\\n__%s\\n\"%s)*5",
        "print((\"_|__\"*17+\"_|\\n\"+\"__|_\"*17+\"_\\n\")*5)",
        "s=\"_|__\"*17\nprint((s+\"_|\\n__\"+s+\"\\n\")*5)"
    ],
    "shortest-program-that-throws-stackoverflow-error": [
        "exec('{'*99)",
        "(lambda x:x(x))(lambda y:y(y))",
        "a=[];eval(\"[x \"+\"for x in a \"*800+\"]\")",
        "exec'('*999",
        "c='exec c';exec c"
    ],
    "non-discriminating-programming": [
        "s=input();c=s.count;print[all(c(s[[]>[1]])==c(o)>1. for o in s)];aaafffillpprrtuu>1.>1.;",
        "def f(s):len({2<<s.count(c)-2for c,in s})<2or{{e.dil:-tu,r.dil:-tu,}}",
        "x=input()\nc=map(x.count,x)\nprint max(c)==min(c)>1\n1. or our>ram>>utopia,\n1., 1.,"
    ],
    "uncollapse-digits": [
        "i=3\nwhile i<len(s):\n\tif s[i-3:i]in'ineiveroneghtwoureesixven':s=s[:i]+' '+s[i:]\n\ti+=1",
        "def f(s):h=ord(s[0])*ord(s[1])%83%-7%-3+5;print(s[:h]);f(s[h:])"
    ],
    "is-this-even-or-odd": [
        "_&=_/_",
        "1 .__and__",
        "input()%2",
        "lambda n:~n&1",
        "lambda x:x%2"
    ],
    "input-%e2%88%a9-source-code": [
        "lambda a:set(':&()smelt\\ bad\\'')&set(a)",
        "lambda a:{*\"\\\"\\lambd* :{}&\"}&{*a}",
        "print set(raw_input())&set(\"raw_pint se(u)\\&\\\"\")",
        "print(set(\"printseu()&'\"+'+\"')&set(input()))",
        "x='c=set;print c(`x`)&c(raw_input())';exec x"
    ],
    "turtles-all-the-way-down": [
        "def r(s,p):\n for(a,b)in p:s=a.join(s.split(b))\n return s\ndef t(w):\n i='_'*2*w;s='\\n __%s\\n/,%s,\\o'%(i,i)\n if w:s=r(t(w-1),[('\\n ','\\n'),('Z/',' /'),('\\\\Z\\n','\\\\\\n'),(' /','o/'),('\\\\','\\\\o'),('o','Z')])+s\n return s\nprint t(input()-1)[1:]",
        "m=input()\nfor i in range(m):r=m-i;b=r%2;h='o';a='__';u=i*a;s=' '*r;print s+u+a+'\\n'+s[:b-2]+h*-~-b+\"/,\"+u+\",\\\\\"+b*h",
        "n=input()\ns=' ';r=[];i=k=0\nwhile i<n:a=i%2;r=[s*k+s*a+s+'_'*(n-i)*2+s,s*k+'o'*a+'/,'+'_'*(n-i-1)*2+',\\\\'+'o'*(1-a)]+r;k+=a*2;i+=1\nprint'\\n'.join(r)",
        "m=input()\nfor i in range(m):p=m-i;b=p%2;print' '*p+'__'*-~i+'\\n'+' '*(p-2+b)+'o'*-~-b+'/,'+'__'*i+',\\\\'+'o'*b",
        "def t(n):\n if n>1:t(n-1)\n a=i-n;b=(a+1)%2;print' '*(a+1)+'__'*n+'\\n'+' '*(a-1+b)+'o'*(not b)+'/,'+'__'*(n-1)+',\\\\'+'o'*b\ni=input()\nt(i)"
    ],
    "war-is-peace-freedom-is-slavery-ignorance-is-strength": [
        "lambda w,a=\"war slavery ignorance strength freedom peace\".split():a[~a.index(w)]",
        "def O(W):\n A=\"cenayhglmodrtvifspw\";R=\"\";X=A.find(W[1]);F=round(131440+(X-3)*(63697-(X-1)*(2024847403.324*X-177731638.24852*X**2+4768471.50996*X**3-7117316292.214)))\n  while(F>0):R+=A[F%19];F//=19;\n  return R",
        "l='war peace freedom slavery ignorance strength'.split()\nlambda s:l[l.index(s)^1]"
    ],
    "code-johnny-code-code": [
        "lambda x:(\"{0}, {1}\\n\"+4*\"{0} Johnny {1}, {1}\\n\"+\"Johnny B. {0}ode\").format(x.title(),x)",
        "lambda s:(\"|, #\\n\"+\"| Johnny #, #\\n\"*4+\"Johnny B. |ode\").replace(\"|\",s.title()).replace(\"#\",s)"
    ],
    "stack-exchange-vote-simulator": [
        "s=input()\nprint (0,(1,-1)[s[-1]=='v'])[len(s[s.rfind(('v^','^v')[s[-1]=='v'])+1:])%2!=0]",
        "def v(s): \n c=0 \n for i in s:c=((0,1)[c<1],(0,-1)[c>-1])[i==\"^\"] \n return c",
        "lambda s:reduce(lambda x,c:cmp(cmp('u',c),x),s,0)"
    ],
    "is-this-relationship-creepy": [
        "lambda a,b:0 if(a/2)+7>b or(b/2)+7>a else 1",
        "lambda *a:min(a)<max(a)/2+7",
        "lambda x:max(x)/2+7>min(x)",
        "a=int(input())\nb=int(input())\nc=a\nd=b\nif b < a:\n c=b\n d=a\nif not c < d/2.0+7:\n print(\"Not \",end='')\nprint(\"Creepy\")",
        "lambda a,b:abs(a-b)>min(a,b)-14"
    ],
    "diagonal-alphabet": [
        "for b in'abcdefghijklmnopqrstuvwxyz':print(' '*(ord(b)-97)+b)",
        "print(\"\\n\".join(\" \"*n+chr(n+97)for n in range(26)))",
        "n=65;exec\"print'%*c'%(n,n);n+=1;\"*26",
        "for n in range(26):print(\" \"*n+chr(n+97))",
        "a=map(chr,range(65,91))\nfor i in a:print' '*a.index(i)+i",
        "lambda:[' '*n+chr(n+65)for n in range(26)]"
    ],
    "sum-of-all-integers-from-1-to-n": [
        "_=-~_*_/-~(_==_)",
        "print(sum(range(1,int(input())+1)))",
        "lambda n:-~n*n/2",
        "lambda n:n*-~n/2",
        "_*=-~_*_/(_+_)"
    ],
    "make-an-alphabet-searchlight": [
        "i=26\nwhile i:i-=1;print' '*i+'ZYXWVUTSRQPONMLKJIHGFEDCBA'[25-i:]",
        "for x in range(26):print(' '*(25-x),*map(chr,range(90-x,64,-1)),sep='')",
        "i=26\nwhile i:i-=1;print' '*i+bytearray(range(65+i,64,-1))",
        "for i in range(26):print(' '*(25-i)+'ZYXWVUTSRQPONMLKJIHGFEDCBA'[i:])",
        "for x in range(25,-1,-1):print(\" \"*x)+\"\".join([chr(y+65)for y in range(x+1)][::-1])",
        "i=26\nwhile-~i:print' '*i+''.join(map(chr,range(65,91)))[i::-1];i-=1",
        "for i in range(26):print(\" \"*(25-i)+\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"[i:])",
        "[print(' '*i+''.join([chr(64+i)for i in range(i+1,0,-1)]))for i in range(25,-1,-1)]",
        "for i in range(25,-1,-1):print(' '*i+\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[i::-1])"
    ],
    "happy-birthday-v": [
        "s=input();s+=' '*len(s)\nfor _ in s:s=' '+s[print(s+s[-2::-1]):-1]",
        "def f(s):n=len(s)*2-1;return''.join(i*' '+s[:n+1-i]+(n-2*i)*' '+s[n-i-1::-1]+'\\n'for i in range(n))+n*' '+s[0]"
    ],
    "collatz-conjecture-oeis-a006577": [
        "i=0\nwhile 1:\n i+=1;j=i;k=0\n while j!=1:j=(j/2,j*3+1)[j%2];k+=1\n print i,k",
        "f=lambda n,s=0:s*(n<2)or f((n/2,3*n+1)[n%2],s+1)",
        "i=0;n=input()\nwhile~-n:n=[n/2,n*3+1][n%2];i+=1\nprint i",
        "n=3*n+1;n/=1+n%2*5;",
        "f=lambda n:n<3or-~f([n/2,n*3+1][n%2])",
        "n=int(input())\nm=0\nwhile n>1:\n  if n%2==0:\n    n=n/2\n    m+=1\n  else:\n    n=3*n+1\n    m+=1\nif n==1:\n  print(m)"
    ],
    "uncomment-a-cobol-program": [
        "lambda s:[i[7:]for i in s if'*'>i[6]]",
        "def f(s):\n for w in s.split('\\n'):\n  if w[6]!='*':print(t[7:])"
    ],
    "calculate-phi-not-pi": [
        "n=input()\nprint n,len([b for b in range(len([a for a in range(n)if not all(a%i for i in xrange(2,a))]))if all(b%i for i in xrange(2,b))])",
        "compositepi(k)"
    ],
    "two-lasers-between-two-mirrors": [
        "w,l,a,b=input()\nexec\"print'|%s|'%''.join(' \\/X'[sum(i==k%(2*w)for k in[a,~b]+[~a,b]*2)]for i in range(w));a+=1;b-=1;\"*l",
        "def f(w,l,a,b,A=1,B=-1):\n while l:l-=1;print'|%s|'%''.join(' \\X/'[[0,A,B,2][(i==a)+2*(i==b)]]for i in range(w));a,A=[a,a+A,-A,A][-1<a+A<w::2];b,B=[b,b+B,-B,B][-1<b+B<w::2]",
        "w,n,r,l=input()\nR=L=1\nexec\"\"\"\nd=[~r*R,-~l*L].count\nprint'|%s|'%''.join(' /\\X'[2*d(~x)|d(x+1)]for x in range(w))\nif-1<r+R<w:r+=R\nelse:R=-R\nif-1<l-L<w:l-=L\nelse:L=-L\"\"\"*n",
        "w,h,x,y=input()\na,b,s=1,-1,' \\/'\nexec\"\"\"l=[' ']*w\nl[x],l[y]=s[a],s[b]if x-y else'X'\nif-1<x+a<w:x+=a\nelse:a=-a\nif-1<y+b<w:y+=b\nelse:b=-b\nprint'|%s|'%''.join(l)\n\"\"\"*h"
    ],
    "print-the-alphabet-without-using-each-vowel": [
        "x=97;s='';exec\"s+=chr(x);x+=1;\"*26+\"pr\\x69nt s\"",
        "str('\\x61bcd\\x65fgh\\x69jklmn\\x6fpqrst\\x75vwxyz')"
    ],
    "three-three-three": [
        "AET=' TEE'\nexec(\"\"\"print('A TE');exec('print(\"A AT\");exec(\"print(AET)\")')\"\"\")\nAET==\"\";",
        "print\"\\\\\\\"printprint**\"*333",
        "print\"\\\\\\\"\"*3;print;print;3**3"
    ],
    "make-a-interpreter": [
        "print(''.join(chr(s.count(';')%127)for s in input().split('#')[:-1]))",
        "lambda t:''.join(chr(x.count(';')%127)for x in t.split('#')[:-1])",
        "lambda t:''.join(chr(len([g for g in x if g==';'])%127)for x in t.split('#')[:-1])",
        "a=0\nfor c in input():a-=a*(c=='#'!=print(end=chr(a%127)))-(c==';')",
        "i=0\nfor c in input():\n i+=c==';'\n if'#'==c:print(end=chr(i%127));i=0"
    ],
    "this-is-my-pillow": [
        "for z in range(24):a=('/'*5+'\\\\'*5)*24;print((a+a[::-1])*3)[z*60:z*60+60]",
        "print((((('/'*5+'\\\\'*5)*6+'\\n')*4)+(('\\\\'*5+'/'*5)*6+'\\n')*4)*3)",
        "a=\"/\"*5+\"\\\\\"*5;b=a[::-1];c=6*a+\"\\n\";d=6*b+\"\\n\";e=4*c+4*d;print e*3",
        "b,a='\\/';exec(\"print(a*5+b*5)*6;\"*4+\"a,b=b,a;\")*6",
        "a='\\n'.join([('/'*5+'\\\\'*5)*6]*4);print'\\n'.join([a,a[::-1]]*3)",
        "x=('/'*5+'\\\\'*5)*6;print((x+'\\n')*4+(x[::-1]+'\\n')*4)*3"
    ],
    "interpreting-fish-no-not-that-fish": [
        "a='><> >><> ><>> ><<<> <>< <><< <<>< <>>>< ,<..>,'.split()\ndef d(t,p=0):\n if p<len(t):\n  for e in a:\n   z=p+len(e)\n   if e==t[p:z]:\n    if z==len(t):return[e]\n    c=d(t,z)\n    if c:return[e]+c\nc=d(raw_input())\nif c:\n print' '.join(c)",
        "def z(s,p=''):[z(s[len(f):],p+' '+s[:len(f)])for f in'<>< <><< <<>< <>>>< ><> >><> ><>> ><<<> ,<..>,'.split(' ')if s.startswith(f)]if s else print(p[1:])\nz(input())",
        "F=\"><> >><> ><>> ><<<> <>< <><< <<>< <>>>< ,<..>,\".split()\ndef g(s):\n if s in F:return[s]\n for f in F:\n  i=len(f)\n  if f==s[:i]and g(s[i:]):return[f]+g(s[i:])\nR=g(input())\nif R:print(*R)",
        "*l,s=[],input()\nfor _ in s:l+=[y+[x]for x in\"><> >><> ><>> ><<<> <>< <><< <<>< <>>>< ,<..>,\".split()for y in l]\nfor y in l:\n if\"\".join(y)==s:print(*y);break"
    ],
    "magic-the-gathering-friends-or-foes": [
        "lambda a:a in\"GWUBRGRBUWG\"",
        "\"WUBRGWGRBUW\".count",
        "print input()in\"WUBRGWGRBUW\""
    ],
    "well-thats-odd-no-wait-thats-even": [
        "def f(s,e=0,o=1):i=iter(s);a=next(i);return(a>'a')*a or'eo'[eval(f(i)+a+f(i))%2]",
        "def f(s):i=iter(s);a=next(i);return(a>'a')*a or'oe'[f(i)==f(i)if'*'<a else'e'in f(i)+f(i)]",
        "def p(i):\n s=[]\n for c in i[::-1]:\n  s+=[c>'e'if c>'a'else getattr(s.pop(),'__'+('axnodr'[c>'*'::2])+'__')(s.pop())]\n return'eo'[s[0]]"
    ],
    "rock-polyglot-scissors": [
        "o='rock paper scissors'.split()\nlambda s:o[o.index(s)-1]#\u001bddt.C r\u000e\u001bHd*wywVp",
        "s=['rock','paper','scissors']\nprint s[s.index((0and gets or input()))+(0and-2or-1)]",
        "0,[.5,];p=[\"rock\",\"scissors\",\"paper\"]\n1//1;lambda x:p[p.index(x)-1];\"\"\"\nx=>p[-~p.indexOf(x)%3]//\"\"\"",
        "#include<stdio.h>/*\nf=lambda a:\"rock\"if a[0]==\"r\"else\"paper\"if a[0]==\"p\"else\"scissors\"\n\"\"\"*/\nint f(char*b){puts(sizeof'b'-1?*b=='r'?\"paper\":*b=='s'?\"rock\":\"scissors\":*b=='r'?\"scissors\":*b=='s'?\"paper\":\"rock\");}\n//\"\"\""
    ],
    "cracking-the-enigma": [
        "def d(c,s):\n for a in range(len(c)):\n  if a not in [((c+s)[a+i:]).index(l)+a for i,l in enumerate(s)]:\n   return a",
        "lambda x,y:[sum(map(str.__eq__,x[i:],y))for i in range(len(x)-len(y))].index(0)"
    ],
    "draw-my-downslashes": [
        "i=0\nfor c in input():i-=c<'<'*i;print' '*i+c;i+=c>'<'",
        "a,x='',0\nfor i in input():x+=((1*i!='/')-(1*i=='/'))*(a==i);print(' '*x+i);a=i",
        "p,i='',0\nfor c in input():i+={'\\\\\\\\':1,'//':-1}.get(p+c,0);print' '*i+c;p=c"
    ],
    "make-the-mexican-wave": [
        "a=range(97,123)\nd=False\ni=0\nwhile True:\n    if d and i>24:\n        i-=1\n        continue\n    for (x,l) in enumerate(a):\n        print(chr(l) if x!=i else chr(l-32),end='')\n    i-=1 if d else -1\n    if i<0:\n        break\n    if i>26:\n        i=25\n        d=True\n    print()",
        "f=[];x=0\nfor i in[map(chr,range(97,123))]*26:l=i[:];l[x]=l[x].upper();f+=[''.join(l)];x+=1\nprint'\\n'.join(f[:-1]+f[::-1])",
        "a=\"abcdefghijklmnopqrstuvwxyz\"\nfor i in range(51):\n x=25-abs(25-i)\n print(a.replace(a[x],a[x].upper()))",
        "i=25\nexec\"L=range(97,123);L[~abs(i)]^=32;i-=1;print bytearray(L);\"*51",
        "a='abcdefghijklmnopqrstuvwxyz'\nfor c in range(51):\ni=25-abs(25-c)\nprint a[:i]+a[i].upper()+a[i+1:]",
        "a=list(range(26));[print(''.join([chr([97+x,65+x][x==i])for x in a]))for i in a+a[::-1]]",
        "a,l='abcdefghijklmnopqrstuvwxyz',list(range(26))\nfor i in l+l[24::-1]:print(a[:i]+a[i].upper()+a[i+1:])"
    ],
    "enlarge-ascii-art": [
        "i=input;n,s,a=int(i()),i(),[]\nwhile s:a+=[''.join(c*n for c in s)]*n;s=i()\nprint('\\n'.join(a))",
        "n=int(input())\nfor i in eval(input()):print(((''.join(j*n for j in i)+'\\n')*n)[:-1])"
    ],
    "crack-the-bank-accounts-password": [
        "lambda l:['%05d'%n for n in range(10**5)if all(map(lambda x:''in[x:=x[x[:1]==c:]for c in'%05d'%n],l))]",
        "l=input()\nn=1e5\nwhile n:\n n-=1;s='%05d'%n;t={''}\n for c in s:t|={x+c for x in t}\n if l<t:print s",
        "lambda l:[s for n in range(10**5)if(s:='%05d'%n,t:={''},[t:=t|{x+c for x in t}for c in s])!=t>l]"
    ],
    "yo-boy-must-it-sum": [
        "def f(n):p=[x for x in range(n+1)if`x`==`x`[::-1]];print[filter(None,[a,b,n-a-b])for a in p for b in p if n-a-b in p]",
        "f=lambda n:min([f(n-k)+[k]for k in range(1,n+1)if`k`==`k`[::-1]]or[[]],key=len)",
        "lambda n:[(a,b,n-a-b)for a in range(n)for b in range(n)if all(f'{x}'==f'{x}'[::-1]for x in(a,b,n-a-b))][0]"
    ],
    "the-quantum-drunkards-walk": [
        "def f(n):k=n-~n;N=k*k;A=[0]*N;A[N/2]=2;exec\"A=[[2*([j%k>0and A[j-1],j%k<k-1and A[j+1],j/k>0and A[j-k],j/k<k-1and A[j+k]].count(2)==1),1,1][v]for j,v in enumerate(A)];\"*n;print[map(str,A)[k*x:][:k]for x in range(k)]",
        "x=input()\no=c={x+x*1j}\nR=range(x-~x)\nexec\"n=[C+k for k in-1j,1j,-1,1for C in c];n={k for k in n if(k in o)<2-n.count(k)};o|=c;c=n;\"*x\nprint[[`(X+Y*1jin c)+(X+Y*1jin o|c)`for Y in R]for X in R]"
    ],
    "hare-krishna-hare-krishna-krishna-krishna-hare-hare": [
        "for i in'0101311003020232200':print['Hare','Krishna','Rama','\\n'][int(i)],",
        "a=\"Hare\"\nfor x in\"Krishna\",\"Rama\":print a,x,a,x+'\\n',x,x,a,a"
    ],
    "check-if-words-are-isomorphs": [
        "def C():s=input();return' '.join(str(s.index(c))for c in s)\nprint(C()==C())",
        "f=lambda a,b:''.join(map(lambda g:dict(zip(a,b))[g],a))==b\ng=lambda a,b:f(a,b)&f(b,a)",
        "f=lambda a,b:map(a.find,a)==map(b.find,b)"
    ],
    "help-trump-build-the-wall": [
        "def f(n):[print((s*15*n)[:15*n])for s in['    __   __    ','   |  |_|  |   ','___|       |___','-   ', ' -', '- ', '\u2014']]",
        "x=input();a=['    __   __    ','   |  |_|  |   ','___|       |___','-   -   -   -  ',' - - - - - - - ','- - - - - - - -','\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014']\nfor i in a:print i*x"
    ],
    "golf-all-the-16-logic-gates-with-2-inputs-and-1-output": [
        "[].sort\nmin\nint.__rshift__\nround\nrange\n{}.get\ncmp\nmax\nlambda a,b:a<1>b\nlambda a,b:a==b\nlambda a,b:b<1\npow\n{0:1,1:0}.get\n{0:1}.get\nlambda a,b:a+b<2\nslice",
        "lambda a,b:0\nint.__mul__\nlambda a,b:a>b\nlambda a,b:a\nlambda a,b:a<b\nlambda a,b:b\nint.__xor__\nint.__or__\nlambda a,b:not a|b\nlambda a,b:a==b\nlambda a,b:1-b\nlambda a,b:a>=b\nlambda a,b:1-a\nlambda a,b:a<=b\nlambda a,b:1-a*b\nlambda a,b:1",
        "[(lambda i:lambda a,b:i>>(a*2+b)&1)(i) for i in range(16)]"
    ],
    "print-output-the-l-phabet": [
        "n=0;exec'print bytearray([n+65]*n+range(n+65,91));n+=1;'*26",
        "x=[chr(y) for y in range(65,91)]\nfor y in range(26):print x[y]*y+''.join(x[y:])",
        "a=range(65,91)\nfor c in a:print bytearray(max(c,i)for i in a)",
        "a=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n[print(a[n]*n+a[n:])for n in range(26)]",
        "a=range(65,91)\ni=0\nfor c in a:a[:i]=[c]*i;i+=1;print'%c'*26%tuple(a)",
        "r=range(26)\nfor i in r:print(''.join(chr(max(i,x)+65)for x in r))"
    ],
    "is-the-checkbox-not-not-unchecked": [
        "lambda s:sum(map(ord,s))%2*'!'+'isC'+s[-8:]",
        "lambda s:sum(map(s.count,'!NU'))%2*'!'+'isC'+s[-8:]"
    ],
    "my-daughters-alphabet": [
        "print(''.join(c*max(l.lower().count(c)for l in open(f))for c in map(chr,range(97,123))))",
        "a,r=[0]*26,range(26)\nfor l in open('f'):a=[max(a[i],l.lower().count(chr(i+97)))for i in r]\nprint''.join(chr(i+97)*a[i]for i in r)"
    ],
    "print-the-last-middle-and-first-character-of-your-code": [
        "print( ')(')",
        "print (')(p')",
        "print( ') p')",
        "print' t'",
        "print(')\\'p')",
        "input(r')ri')",
        "print(\")\\\"p\")",
        "Placeholder to make the leading newline visible\n\nprint\"\\\"t\""
    ],
    "addition-in-base-1i": [
        "s=input();L=1\nfor _ in`s`*8:s+=1098*int(str(s).translate('0011'*64));L*=10\nprint s%L",
        "1 + 1 = 1100",
        "f=lambda a,b:a*a+b*b^58and 2*f(a*b%2*6,f(a/2,b/2))|a+b&1if a else b"
    ],
    "output-a-googol-copies-of-a-string": [
        "'x' * 100",
        "for i in range(10**100):print()",
        "i=10**100\nwhile i:print;i-=1"
    ],
    "n-dimensional-nn-array-filled-with-n": [
        "a=n=input()\nexec\"a=[a]*n;\"*n\nprint a",
        "def f(x):\n r=[x for _ in range(x)]\n for _ in range(x-1):r=[r for _ in range(x)]\n print(r)",
        "lambda n:eval('['*n+'n'+']*n'*n)",
        "f=lambda n,c=0:n-c and[f(n,c+1)*n]or 1"
    ],
    "how-lit-is-this-mountain": [
        "p=input();s=0\nfor X,Y in p[1:]:x,y=p.pop(0);n=y-max(zip(*p)[1]);s+=n*(1+((X-x)/(y-Y))**2)**.5*(n>0)\nprint s",
        "M=t=0\nfor x,y in input()[::-1]:\n if y>M:t+=(y-M)*abs((x-X)/(y-Y)+1j);M=y\n X,Y=x,y\nprint t",
        "k=input()[::-1]\nm=r=0\nfor(a,b),(c,d)in zip(k,k[1:]):\n if d>m:r+=(b>=m or(m-b)/(d-b))*((a-c)**2+(b-d)**2)**.5;m=d\nprint r"
    ],
    "output-your-score": [
        "print 9+8,'bytes'",
        "print(6*3,'bytes')",
        "print(9*2,'bytes')",
        "print 8+9,'bytes'"
    ],
    "write-lines-in-detention": [
        "h=\"hundreds were a time for \"\nt=\"The \"\nfor i in h:print t+\"eighteen-\"+h+\"rum.\\n\"+t+\"nineteen-\"+h+\"fun.\\n\"+t+\"two-thousands are a time to run\\na civilized classroom.\"",
        "a=\"teen-hundreds were a time\"\nprint\"The eigh%s for rum.\\nThe nine%s for fun.\\nThe two-thousands are a time to run\\na civilized classroom.\\n\"%(a,a)*len(a)"
    ],
    "what-do-you-get-when-you-multiply-6-by-9-42": [
        "a=input();print(42if a=='6 9'else eval(a.replace(' ','*')))",
        "lambda x,y:42*(x==6)*(y==9)or x*y",
        "lambda x,y:42if x==6==y-3else x*y",
        "lambda x,y:x*[y,7][6==x==y-3]"
    ],
    "oreoorererereoo": [
        "s=input()\nfor c in s:\n\tif'n'<c:j='o'<c;print' '*j+c*(len(s)-2*j)",
        "lambda i:'\\n'.join((x*len(i),' '+x*(len(i)-2))[x>'o']for x in i if'e'<x)",
        "lambda x:x.replace(\"o\",\"-\"*len(x)+\"\\n\").replace(\"re\",\" \"+'.'*(len(x)-2)+\"\\n\")",
        "lambda s:\"\\n\".join((c*(len(s)-2*(c<'f'))).center(len(s))for c in s if'r'>c)"
    ],
    "hash-collision-no-means-yes": [
        "def h(s):\n try:r=int(s,36)\n except:r=0\n return(r,44596)[r==852]",
        "hash(w*9)%537105043",
        "n=int(\"\".join(map(str,map(ord,raw_input()))))    # hashing function\nprint n if 1+(n**2-904862*n)/7067329057 else-1   # input validation",
        "def h(s):n=sum(100**i*ord(c)for i,c in enumerate(s));return (n-7978)*(n-836989)"
    ],
    "determine-the-color-of-a-chess-square": [
        "print('ldiagrhkt'[int(input(),35)%2::2])",
        "print'ldiagrhkt'[int(input(),35)%2::2]",
        "print'dlairgkh t'[sum(map(ord,input()))%2::2]"
    ],
    "a-cheating-quine": [
        "print open(__file__).read(29)",
        "print open(__file__).readline()",
        "print next(open(__file__))",
        "lambda:open(__file__)"
    ],
    "shortest-auto-destructive-loop": [
        "for x in 1,0:x/x",
        "x=lambda a:1/0if a<1 else x(0);x(2)",
        "i=1\ndef x(n):del i;x(i)\nx(i)",
        "for i in 1,0:0/i",
        "def f(x=1): f(x/x-1)"
    ],
    "sugar-free-syntax": [
        "print(*map(repr,input()),[],sep=':')",
        "lambda s:\"%r:\"*len(s)%(*s,)+\"[]\"",
        "lambda s:':'.join(map(repr,s)+['[]'])",
        "lambda a:`list(a)+[[]]`.replace(', ',':')[1:-1]",
        "lambda s:':'.join(map(repr,[*s,[]]))"
    ],
    "is-the-number-binary-heavy": [
        "lambda n:bin(n).count('0')<len(bin(n))/2",
        "lambda x:2*x<4**bin(x).count('1')",
        "f=lambda n,c=0:f(n/2,c+n%2*2-1)if n else c>0",
        "lambda n:max('10',key=bin(n).count)"
    ],
    "lossy-sorting-implement-dropsort": [
        "lambda L:[L[i]for i in range(len(L))if L[i]>=max(L[:1]+L[:i])]",
        "lambda l:[l:=[n]for n in l if n>=l[0]]",
        "f=lambda a:a and f(a[:-1])+a[-1:]*(a[-1]==max(a))",
        "f=lambda x:[e for i,e in enumerate(x)if max(x[:i+1])==e]",
        "def d(l):\n    j=b=0;m=l[j];r=[]\n    for i in l:\n        (m,b)=[(m,0),(i,1)][i>=m]\n        if b>0:r+=[i]\n        j+=1\n    l[:]=r",
        "f=lambda a: reduce(lambda x,y:x+([],[y])[y>x[-1]],a,[a[0]])",
        "for n in input():\n if-n<=id:print n;id=-n",
        "def f(i):\n s=[i[0]]\n for n in i[1:]:\n  if s[-1]<=n:s+=[n]\n return s"
    ],
    "write-the-shortest-self-identifying-program-a-quine-variant": [
        "a='a=%r;print a%%a==raw_input()';print a%a==raw_input()",
        "s=\"print's=%r;exec s'%s==input()\";exec s",
        "_='_=%r;print _%%_==input()';print _%_==input()",
        "exec(s:=\"print('exec(s:=%r)'%s==input())\")"
    ],
    "draw-an-asterisk-triangle": [
        "for n in range(input()+1):print'*'*n",
        "i=1;exec\"print'*'*i;i+=1;\"*input()"
    ],
    "print-all-integers": [
        "i=0;print(i)\nwhile 1:i+=1;print(i);print(-i)",
        "n=0\nwhile 1:print~n,n,;n+=1",
        "p=print\np(0)\ni=1\nwhile 1:p(i);p(-i);i+=1",
        "i=0\nwhile 1:print i;print~i;i+=1"
    ],
    "compute-the-kolakoski-sequence": [
        "n=h=1;l=[]\nwhile n:print(h);n^=3;h,*l=l+[n]*(l+[2])[0]",
        "x=y=0\nwhile 1:print 1+x%2;x^=~y&~-y;y=~-y&x/2",
        "l=[2]\nprint 1,2,\nfor x in l:print x,;l+=x*[l[-1]^3]",
        "f=lambda n:sum([f(i)*[i%2+1]for i in range(2,n)],[1,2,2])[n]"
    ],
    "print-my-clocks-alarm-sound": [
        "g=lambda s,x,m:s if m>n else g(s+\"beep\"*x+\" \",([25,1]+[x+(m%4<1)]*14)[(m+1)%16],m+1)\nv=g(\"\",1,1)\nf=lambda m,i:v[:i] if m>n else f(m+1,v.find(\"b\",i+1))\nprint(f(1,1))",
        "def f(n):\n b=[*'beep']*n\n for i in b'\\4\\t\\16\\23\\30!*3<ER_ly\\x86\\x97\\xa8\\xb9\\xca\\xdb':b.insert(i,' ')\n return''.join(b)",
        "f=lambda n:n*\"?\"and f(n-1)+\"beep \"[:4|0x444444924aabe>>n&1]"
    ],
    "user-appreciation-challenge-1-dennis": [
        "l=[c in'aeouiAEOUI'for c in input()if c.isalpha()]\nprint(l==l[::-1])",
        "def f(x):k=map(lambda y:y.lower()in\"aeiou\",filter(str.isalpha,x));return k==k[::-1]",
        "def f(s):s=[c in'AEIOU'for c in s.upper()if'@'<c<'['];return s==s[::-1]"
    ],
    "print-a-word-clock": [
        "H,M=input().split()\nw=\"\"\"HALF _TEN_\n_QUARTER _TWENTY_\n_FIVE _MINUTES _TO_\n_PAST _TWO _THREE_\n_ONE _FOUR _FIVE_\n_SIX _SEVEN _EIGHT_\n_NINE _TEN _ELEVEN_\n_TWELVE _O'CLOCK\"\"\".split(\"_\")\nh,m=int(H),int(M)\nif h>12:h-=12\nm=(m//5+1)*5 if m%5>2.5 else m//5*5\nif m>30:\n    m=60-m\n    h=(h+1)%12\nX=[m==30,m==10,1,m==15,m in[20,25],1,m in[5,25],m not in[0,15,30],int(M)>30 and m!=0,1,m!=0 and int(M)<31,h==2,h==3,1,h==1,h==4,h==5,1,h==6,h==7,h==8,1,h==9,h==10,h==11,1,h in[0,12],m==0]\nt=\"IT IS \"\nfor i in range(0,28):\n    if(X[i]):t+=w[i]\n    else:t+=\" \"*len(w[i])\nprint(t.strip())",
        "def t(h,m):\n\n\nm=(2+m)//5\n h=h%12\n n=0\n if m>6:n,m=1,12-m;h+=1\n a=\"\"\"IT IS _HALF _TEN_\n _QUARTER _TWENTY_\n _FIVE _MINUTES _TO_\n _PAST _TWO _THREE_\n _ONE _FOUR _FIVE_\n _SIX _SEVEN _EIGHT_\n _NINE _TEN _ELEVEN_\n _TWELVE _O'CLOCK\"\"\".split(\"_\")\n b=[1,m==6,m==2,1,m==3,3<m<6,1,m in[1,5],m in[1,2,4],n*m,1,(1-n)*m,h==2,h==3,1,h==1,h==4,h==5,1,h==6,h==7,h==8,1,h==9,h==10,h==11,1,h==0,m==0]\n for i,c in enumerate(a):\n  if b[i]:print c,\n  else:print' '*len(c),",
        "R=range\nw=\"HALF TEN QUARTER TWENTY FIVE MINUTES TO PAST TWO THREE ONE FOUR FIVE SIX SEVEN EIGHT NINE TEN ELEVEN TWELVE O'CLOCK\".split(' ')\nh=[10,8,9]+R(11,20)\nc=['IT','IS']+[' '*len(x)for x in w]\ni,j=input()\ni=(i,i+1)[j>30]%13-1\nj=int(round(j/5.0)*5.0)%60\nfor z in[[20],[4,5,7],[1,5,7],[2,7],[3,5,7],[3,4,5,7],[0,7],R(3,7),[3,5,6],[2,6],[1,5,6],R(4,7)][j/5]:c[z]=w[z]\nc[h[i]]=w[h[i]]\nx=0\nfor y in[4]+R(6,22,3)+[23]:print' '.join(c[x:y]);x=y"
    ],
    "find-the-smoothest-number": [
        "f=lambda R,F=1,i=2:[n for n in range(*R)if F**n%n<1]or f(R,F*i,i+1)",
        "f=lambda n,p=2:n>1and f(n/p**(n%p<1),p+(n%p>0))or p\nprint min(range(*input()),key=f)",
        "i=input()\nfor a in range(*i):\n s=a;p=2\n while~-a:b=a%p<1;p+=1-b;a/=p**b\n if p<i:i=p;j=s                                        \nprint j"
    ],
    "golf-your-languages-identicon": [
        "a=\":>;$ 8'$;8' 6)$;6) 4+$;4+ 2-%:3, 0/%:1. /0&9.1 1.&9,3 3,'8*5 5*(7)6 7((7'8 9&)6$; ;$)O)$.$ 9&)O(%.% 7(*N(&,& 5**N'',' 3,+M'(*( 1.+M&)*) /0,L&*(* 0/-K%+(+ 2--K%,&, 4+.J$-&- 6).J$.$. 8'.V$ :%/ #<m $;j $;h $;f %:e %:c &9` &9^ '8\\ (7[ (7Y )6V )6U )6U *5U *5U +4U +4U ,3U -2U -2U .1U .1U .1U /0U #<U0 #<U1 #<U1 #<U2 #<U2 #<U3 #<U3 #<U4 #<U4 #<U5 #<U5 #<U6 #<U6 #;V7 #9X7 #7Z8 #5\\8 #3^9 #1`9 #/b: #-d: #+f; #)h; #'j #%l #b/% #c.' $.$V.) $.%-$K-+ %,&-$K-- %+(+%L,/ &*(+%L,0 &*))&M+. '(*)&M+, '(+''N** (&,&(N*( (&-%(O)& )$.%(O)$ <;$7(& <9&7(( <7(8'* <5*8', <3,9&. <1.9&0 </0:%/ <-2:%- <+4;$+ <)6;$) <'8@ <%:>\".split()\nfor b in[[ord(c)-35for c in L]for L in a]:print''.join(c*n for c,n in zip('01'*8,b+[100-sum(b)]))",
        "Z,L,J=zip,list,''.join;y=[134217727,520093695,2130706431,8573157375,34334572543,137413787647,274848546815,68690116607,17148411903,4262461439,1041235967,235405311,34078719,235405311,1040449535,4261675007,17146445823,68686053375,274844418047,137405431807,34326216703,8556396543,2113945599,503332863,100671487,1125899873288192,562949919866880,562949919866880,562949919866880,281474943156224,281474943156224,140737454800896,140737454800896,70368710623232,35184338534400,35184338534400,17592152489984,17592152489984,17592152489984,8796059467776,8796059467776,4398012956672,4398012956672,2198989701120,1099478073344,1099478073344,549722259456,549722259456,549722259456,274844352512];C=[L(n) for n in map(lambda j:'0'*(50-len(j[2:]))+j[2:],[bin(i) for i in y])];U=L(Z(*C[::-1]));Q=L(Z(*U[::-1]));Y=L(Z(*Q[::-1]));Y=[J(i) for i in Y];Q=[J(i) for i in Q];U=[J(i) for i in U];C=[J(i) for i in C];H=[i+j for i,j in Z(C,U)];R=[i+j for i,j in Z(Y,Q)];r='\\n'.join(H+R);print(r)",
        "I=100*[100*\"0\"]\nfor j in range(7500):i=j%25;j/=100;I=map(list,zip(*I[::-1]));I[i][j]=`+[abs(i%12-6)+5<j/2,j>i/2+24,2*i>72-j][j/25]`\nfor r in I:print\"\".join(r)"
    ],
    "same-length-different-string": [
        "lambda s:`s`[:len(s)]",
        "lambda s:'a~'[s<'~']+s[1:]",
        "lambda s:`s<'T'`[0]+s[1:]"
    ],
    "how-much-code-would-a-codegolf-golf-if-a-codegolf-could-golf-code": [
        "lambda n:'How much {0} would a {0}{1} {1} if a {0}{1} could {1} {0}?'.format(*n)",
        "'How much {0} would a {0}{1} {1} if a {0}{1} could {1} {0}?'.format",
        "lambda a,b:' '.join(('How much',a,'would a',a+b,b,'if a',a+b,'could',b,a))+'?'",
        "\"How much {0} would a {0}{1} {1} if a {0}{1} could {1} {0}?\".format"
    ],
    "one-more-lul-and-im-out": [
        "x='\"One more %s and I\\'m out\"'\nf=lambda n,s=x:n and f(n-1,s%x)or(s%\"LUL\")[1:-1]",
        "def f(a):return('\"One more '*a+'LUL'+(' and I%sm out\"'%\"'\")*a)[1:-1]",
        "lambda x:('\"One more '*x+'LUL'+' and I\\'m out\"'*x)[1:-1]",
        "f=lambda n:'One more \"'*(n-1)+\"One more LUL and I'm out\"+'\" and I\\'m out'*(n-1)"
    ],
    "duck-duck-goose": [
        "print\"duck\\n\"*(id(0)%9+1)+\"goose\"",
        "exec(\"print('duck');\"*abs(id({})))\nprint(\"goose\")",
        "print\"duck\\n\"*((id(id)%5)+1),\"goose\""
    ],
    "determine-your-languages-version": [
        "print(3-round(.5))",
        "try:exec(\"print 2\")\nexcept:print(3)",
        "print(3/2*2)",
        "print(len(\"a\u1680a\\x20a\".split()))",
        "[3,2]['cmp' in dir(__builtins__)]",
        "print(str(hash(float('-inf')))[1])"
    ],
    "list-of-primes-under-a-million": [
        "print[a for a in range(2,999999)if all(a%b for b in range(2,a/2+1))]",
        "print filter(lambda n:n==2 or all(n%i for i in range(2,n)),range(15485864))",
        "for i in range(2,int(1e6)):\n\tif all([i%j!=0 for j in range(2,int(i**0.5)+1)]): print i",
        "k=P=1\nwhile k<1e6:P%k>0==print(k);P*=k*k;k+=1",
        "n,p=3,[2]\nwhile n<1e5:exec'print n;p+=[n]'*all(n%x for x in p);n+=2",
        "for k in range(2,10**6):\n if all(k%f for f in range(2,k)):print(k)"
    ],
    "count-trailing-truths": [
        "f=lambda l:len(l)and-~f(l[:-1])*l[-1]",
        "lambda a:(a[::-1]+[0]).index(0)",
        "t=input()[::-1];print len(t[:t.index(0)])"
    ],
    "count-like-chuck-norris": [
        "#{*M`\n#*M`\n\"\"\"\n\n}`$\n1\n\"\"\";i=1\nwhile 1:print str(i)[::-1];i+=1",
        "i=0\n\"#{loop{p i+=1,i}}\"\nexec('while 1:print str(i)[::-1];i+=1')",
        "i=0;\n#/*\nwhile 1:i+=1L;print`i`[::-1]\n'''*/\na(){for(;;)printf(\"%i %1$i \",++i);}//'''"
    ],
    "print-this-question-%e2%86%93": [
        "s='''The basic idea of a [tag:kolmogorov-complexity] challenge \u00dfto print a set output in\u0101\u00e1(though \u00e2 \u00e0ing has changed now). We have had many of them, from [Borro\u00e0 Rings]\u00e6\u00e5s/53417/ascii-borro\u00e0-rings) to [The G\u00e4 Address](\u00e6\u00e5s/15395/how-random-is-the-g\u00e4-address).\n\n##Your Task\n\nT\u00e3\u00e5 \u00dfsimilar, except \u00e2 it requires printing of a special text -\u0101text of t\u00e3\u00e5. Specifically,\u0101very Markdown code \u00e2 I am typing right now.\n\nTo prevent an infinite recursion in\u0101\u00e5,\u0101exact text you have to print can be found [here]\u00e6revisions/1f731ea3-0950-4b03-ae95-24fa812a9a28/view-source).\n\n##Clarifications\n\n- You are not allowed to use any external sources like\u0101internet.\n- T\u00e3\u00e0s \u00e2\u0101purpose of t\u00e3\u00e5 \u00dfnot to download t\u00e3\u00e5 text and parse it, but instead to store it in you program.\n- T\u00e3\u00df[tag:code-golf], so \u00e1in **bytes** wins!'''\nfor x in zip('\u00e6\u00e3\u00e5\u0101\u00e0\u00e1\u00e2\u00e4\u00df','(http://codegolf.stackexchange.com/,h\u00df,question, the ,mean,shortest code ,that,ettysburg,is '.split(',')):s=s.replace(*x)\nprint(s)",
        "print\"eJyVk0Fv2zAMhe/5FRx6aYMoTpoEbXrbdhh22GULMAxBD7RN20Js0ZXoJP73o2S02HraACMOLOnx8XvUoSHIMdgCbEkIXAHCUbB+OnHbcc2ez6bgrm/pamV8hqLBtiVXE9gAwtB760TPBBLgQfpBwDoQVQ0Ne6EgUHBJcCsND3WjKyjQETrramgwREFVK8Hx5W4JP0k/nuNPCR26MRpSsW4BlecOjp/Y61uPw3cVCM+3jUj/lGWxRs1ttQyCxYmuk+pSnWcvg5qw7EK222zXDxmGwlqTvwoZH4XuYi/Hg9r+QiJjyAdfw8ey9BT+s8h6t9nvsoYvxqMruTM2GO3A1G+6Bifdu+VsdnPziwcPBwyn2ezQKNNXpcg32M626BegtaiXCZ4V8PQyWJWY6EeSKbfQU2GxBaGrgEkhpL+J4R/SS/gRd1a20CzHRdp4Jj/CN/Snki9uiixV+wrYgYx9LOJt3UgMSo0fYvR0phi+enWVdVZInRWDD8n+NAWvNacqdMVCJlMjD1PUb0NUqFBOUPHgSjg25OlfyKsJGyby1cNmTbgxq/1uZbb5amOQ9jtzv63wcX2Pe7x/zM6WLiYo84Im/p8VcEKR4pvNDGgigJ60Ue2tbfmi06kmh0AQJ1LNk3eKeVIJ0NoTpe60CV0hWapIyjLOV5g4xvV+8D2ryvs8YtSxmBaJ9FvW4f97QyKm4wQ9ehWwsoA83bQghMldEPZxIXKPaHvPtcfuzYo+6VpHkiaifF5oA+8uqZ6dz/NRP8zncFH1D78BIl92mw==\".decode('base64').decode('zip')",
        "print\"\"\"The basic idea of a [tag:kolmogorov-complexity] challenge is to print a set output in the shortest code (though that meaning has changed now). We have had many of them, from [Borromean RingsZQs/53417/ascii-borromean-rings) to [The Gettysburg AddressZQs/15395/how-random-is-the-gettysburg-address).\n\n##Your Task\n\nThis Q is similar, except that it requires printing of a special text - the text of this Q. Specifically, the very Markdown code that I am typing right now.\n\nTo prevent an infinite recursion in the Q, the exact text you have to print can be found [hereZrevisions/1f731ea3-0950-4b03-ae95-24fa812a9a28/view-source).\n\n##Clarifications\n\n- You are not allowed to use any external sources like the internet.\n- This means that the purpose of this Q is not to download this Q text and parse it, but instead to store it in you program.\n- This is [tag:code-golf], so shortest code in **bytes** wins!\"\"\".replace('Z',\"](http://codegolf.stackexchange.com/\").replace('Q',\"question\")"
    ],
    "this-isnt-rocket-science": [
        "s=input(\"\")\nprint(\"  | \\n /_\\\\\")\nfor c in s:print(\" |\"+c+\"|\")\nprint(\"/___\\\\\\n VvV\")",
        "lambda x:\"  |\\n /_\\\\\\n%s/___\\\\\\n VvV\"%''.join([\" |%s|\\n\"%t for t in list(x+'_')])",
        "lambda x:r\"\"\"  |\n /_\\\n |%s|\n/___\\\n VvV\"\"\"%\"|\\n |\".join(x+\"_\")",
        "o='  | \\n /_\\\\\\n'\nfor c in input()+\"_\":o+=f' |{c}|\\n'\nprint(o+'/___\\\\\\n VvV')"
    ],
    "print-the-n-bonacci-sequence": [
        "def f(x,n):l=[1]*n;exec\"print l[0];l=l[1:]+[sum(l)];\"*x",
        "def r(n,x):f=[1]*n;exec('f+=[sum(f[-n:])];'*x);return f[:x]",
        "n,x=input()\ni,f=0,[]\nwhile i<x:v=[sum(f[i-n:]),1][i<n];f.append(v);print v;i+=1"
    ],
    "expand-the-number": [
        "def f(x):x+='.';i=x.find('.');z=list(x);del z[i];return'+'.join([str(int(o)*10**(i-j-1))for j,o in enumerate(z)if'0'<o])or'0'",
        "f=lambda s,k=0,i=0,o=\"\",z=\"0\":s and f(s[1:],(s<z)+k,i+k,o+(s>=\"1\")*([s[0]+~-(s+\".\").find(\".\")*z,\".\"+z*i+s[0]][k]+\"+\"))or o[:-1]or z",
        "i=input().split(\".\")\nI=i[0]\ne=enumerate\no=[(k+len(I[j+1::])*\"0\") for j,k in e(I) if k!=\"0\"] \ntry:o+=[\".\"+l*\"0\"+m for l,m in e(i[1]) if m!=\"0\"]\nexcept:0\nprint \"+\".join(o or\"0\")",
        "result or['0']"
    ],
    "all-your-base-are-belong-to-us-restricted": [
        "x,w,y,z,v=4*8,55,56,57,58;exec((\"%c\"*38)%(y+y,z+z,49+y,w+w,v+v,39-7,34,65,54+54,54+54,x,v+63,48+63,48+69,z+z,x,98,97,59+y,45+y,x,97,z+z,45+y,x,98,45+y,54+54,w+y,w+w,45+v,x,v+v,w+y,x,v+59,z+v,34))",
        ">>> '\\x41\\x6c\\x6c \\x79\\x6f\\x75\\x72 \\x62\\x61\\x73\\x65 \\x61\\x72\\x65 \\x62\\x65\\x6c\\x6f\\156\\x67 \\x74\\x6f \\x75\\x73'\n'All your base are belong to us'",
        ">>> '\\x41\\x6c\\x6c \\x79\\x6f\\x75\\x72 \\x62\\x61\\x73\\x65 \\x61\\x72\\x65 \\x62\\x65\\x6c\\x6fng \\x74\\x6f \\x75\\x73'\n\n'All your base are belong to us'"
    ],
    "pointers-pointers-pointers": [
        "lambda n,s:s+'\\n%%%dc'%n%94",
        "lambda n,s:s+'\\n'+' '*~-n+'^'",
        "lambda N,S:S+'\\n'+' '*~-N+'^'",
        "def f(s,i):return s+'\\n'+' '*~-i+'^'\n\n# OR \n\ndef f(s,i):print(s+'\\n'+' '*~-i+'^')",
        "lambda*p:'%s\\n%*s'%(p+('^',))"
    ],
    "spoonerise-words": [
        "i=input()\nf=l=''\nA='aeiou'\nfor j in A:\n I=i[0];J=I.find(j)\n if ~J:\n  if f:\n   if f>I[0][:J]:f=I[:J];break\n  else:f=I[:J]\nfor j in A:\n Y=i[1];J=Y.find(j)\n if ~J:\n  if l:\n   if l>Y[:J]:l=Y[:J];break\n  else:l=Y[:J]\nprint I.replace(f,l,1),Y.replace(l,f,1)",
        "p,q=raw_input().split()\na=b=-1\nc=d=0\nv='aeiou'\nwhile a<0:\n if p[c]in v:\n  a=c\n c+=1\nwhile b<0:\n if q[d]in v:\n  b=d\n d+=1\nprint \" \".join((q[:b]+p[a:],p[:a]+q[b:]))",
        "f('blushing','crow')",
        "[\"master\",\"plan\"]",
        "t=lambda s:s[1]in'aeiou'or-~t(s[1:])\nlambda a,b:(b[:t(b)]+a[t(a):],a[:t(a)]+b[t(b):])"
    ],
    "i-love-you-i-love-you-i-love-you": [
        "lambda i=0:exec(\"print(' '.join(''.join('0'+bin(ord(chr(j+30)in' ,0@DL'and'o'or c))[2:]for j,c in enumerate('ilOveyOu'*8))[i:i+21]));i+=21;\"*23)",
        "z='01111011101'\na='011010010110110001'\nb=z+'10011001010111100101'\n[print(' '.join(''.join([a+i[0]+b+i[1]+z+'01'for i in'10 01 10 00 11 01 00'.split()])+a+'0'+b[:16])[i:i+41])for i in range(0,966,42)]",
        "r=str.replace;print r(r(r(r(r(r(r(r(\"\"\"\njh0k1k1k0jk1\nikik1kjk0h1\nik0hjikih\nk1h0k1k1k00k0\ni1ksi1ejk0s1ke0h\ni1sk0kie0si1kiek1\n0ks1hje0s1k1k0ej1\nj1s1kik1kjkjej\njsik0hjikiek\nksk1h0k1k1k0ej\n0jsikik1kjk0ek\nk1sik0hjikei1\n0k1sjh0k1ke1k00\n1kis1kik1k0e1kj\n0ki1sk0k1k1eiki\nhk1sh0ke1k1k0\n0kji1sj1ke1kjk0\nhi1ks0ke1ki1k1\n1hk1ks1e00k1k1k\n00kjikik1kjk\n0hi1k0hjik\nihk1h0k1ki\n000kjikik1kj1\n\"\"\",'h','1010'),'i','11'),'j','01'),'k','10'),'1','1 '),'0','0 '),'s','\\x1b[0;40;31m'),'e','\\x1b[0m')"
    ],
    "are-the-brackets-fully-matched": [
        "def r(s):i=max(map(s.find,['()','[]','{}','<>']));return not len(s)if i<0 else r(s[:i]+s[i+2:])",
        "lambda s:eval(\"s\"+\".replace('%s','')\"*4%([],(),{},'<>')*len(s))==''",
        "def m(s,i=0):exec's=s.replace(\"[({<])}>\"[i%4::4],\"\");i+=1;'*4*len(s);return\"\">=s"
    ],
    "swap-the-alphabet": [
        "str.translate",
        "def f(t,a=\"abcdefghijklmnopqrstuvwxyz\",b=\"\"):\n for c in t:u=64<ord(c)<91;c=c.lower();c=a[::-1][a.index(c)] if c in a else c;b+=c.upper() if u else c\n return b",
        "lambda x:''.join([c,chr(ord(c)+4^31)][c.isalpha()]for c in x)",
        "def ASUB(m,A,B):o = m.maketrans(A,B);r = m.translate(o);return(r);\nASUB(m=\"Programming Puzzles & Code Golf\",\n     A=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n     B=\"zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA\")\n#'Svool, Dliow!'\n#'Kiltiznnrmt Kfaaovh & Xlwv Tlou'"
    ],
    "enthusiastically-russianify-a-string": [
        "lambda s,r:s+')'*int(len(s)*r)",
        "lambda s,p:s+len(s)*p/100*')'"
    ],
    "cheat-at-rock-paper-scissors-lizard-spock": [
        "lambda s:[[\"Scissors\",\"Paper\"]['k'in s],\"Rock\"]['i'in s]",
        "lambda s:[\"Lizard\",\"Rock\",\"Paper\"][cmp(s[-2],\"e\")]",
        "lambda i:l[l.index(i)-1]\nl=\"Rock Lizard Spock Scissors Paper\".split()",
        "lambda s:[\"Spock\",\"Lizard\",\"Rock\"][len(s)%4]"
    ],
    "print-n-squared": [
        "def q(n):s=str(n);m=n-2;print(s*n,*[s+\" \"*len(s)*m+s]*m,s*n*(n>1),sep=\"\\n\")",
        "def p(i):\n k=`i`;j=i-2;h=k*i;print h+'\\n'+(k+' '*j*len(k)+k+'\\n')*j+h",
        "def y(g):g=str(g);i=len(g);[print(g*(int(g))+('\\n'+g+' '*((int(g)*i)-(i*2))+g)*(int(g)-2)+'\\n'+g*int(g))if int(g)>1 else print(g*int(g))]",
        "N=input()\nn=int(N)\nm=n-2\nb=N*n+\"\\n\"\nprint(b+(N+\" \"*len(N)*m+N+\"\\n\")*m+b*(n>1))",
        "a=input()\nb=c=int(a)-2 if a!=\"1\" else 0\nprint(a*int(a))\nwhile b:print(a+\" \"*int(len(a))*c+a);b-=1\nif a!=\"1\":print(a*int(a))",
        "def l(i):s=`i`;n='\\n';l=i-2;b=s*i+n;print b+(s+' '*l*len(s)+s+n)*l+b*(i>1)"
    ],
    "lets-do-some-deciph4r4ng": [
        "s=''\nfor c in input():s+=c['/'<c<':':]or s[~int(c)]\nprint s",
        "r=input()\nfor i in r:\n if'/'<i<':':r=r.replace(i,r[r.find(i)+~int(i)],1)\nprint r",
        "lambda s:reduce(lambda t,c:t+(c+t)['/'<c<':'and~int(c)],s)",
        "s='';j=-1\nfor i in input():s+=s[j-int(i)]if'/'<i<':'else i;j+=1\nprint s"
    ],
    "fit-a-word-into-an-alphabet-grid": [
        "f=lambda x,y=65:x and(y<=ord(x[0])and\" \"*(ord(x[0])-y)+x[0]+f(x[1:],-~ord(x[0]))or\"\\n\"+f(x))",
        "def f(s,l=65):c,*t=s;o=ord(c)-l;return o<0and'\\n'+f(s)or' '*o+c+(t and f(t,o-~l)or'')"
    ],
    "output-pi-without-math": [
        "a=str(range(298,500,2)[8]);print a[0]+'.'+a[5<6:]",
        "print('%i\\b.%i'%(ord(' '),ord('\u00ee'))[:-1]",
        "print\"%s.%s%c\"%(len('aaa'),len('a'),52)"
    ],
    "create-an-alphabet-song": [
        "for x in range(26):y=chr(x+65);print y+' is for '+y+'naaoaaeaneieaiaaaaairaeeei'[x:x+1]+('t','n')[x in(8,20,23)]",
        "/usr/share/dict/words"
    ],
    "could-you-make-me-a-hexagon-please": [
        "i=n=input()\nwhile~-n+i:i-=1;j=abs(i);print' '*j+'* '*(2*n+~j)",
        "i=input()\na=[\" \"*(i-x)+\"* \"*(i+x)for x in range(i)]\nprint'\\n'.join(a+a[-2::-1])",
        "n=input()\nl=range(n,2*n-1)\nS=l+[2*n-1]+l[::-1]\nW=range(1,n)\nfor w in W[::-1]+[0]+W:print\" \"*w+\"* \"*S[0];S=S[1:]",
        "d=int(input());i=' *';y=''\nfor x in range(d-1):y+=(' '*(d-x-1)+i*(d+x)+' '*(d-x)+'\\n')\nprint(y+i*(2*d-1)+y[::-1])",
        "def h(s):n=\"\\n\".join;t=[\" \"*(s-i-1)+\"* \"*(s+i)for i in range(s-1)];return\"%s\\n%s\\n%s\"%(n(t),\"* \"*(2*s-1),n(t[::-1])"
    ],
    "increment-the-time": [
        "lambda s:'%02d:%02d'%([x:=int(s[:2]),[x+1,0][x>22]][(y:=int(s[3:])+1)>59],[y,0][y>59])",
        "def f(s):v=int(s[:2])*60-~int(s[3:]);print'%02d:%02d'%(v/60%24,v%60)",
        "lambda t:f'{(int(t[:2])+((m:=(int(t[3:])+1)%60)<1))%24:02}:{m:02}'",
        "i=input();t=[-1]*59+[59];h=[0]*24+[-23];a=int(i[:2]);b=int(i[3:]);print(f'{a+h[a+int(t[b]/30)]:02}:{b-t[b]:02}')"
    ],
    "print-every-printable-ascii-character-without-using-it": [
        "print'\\<octal char code>'",
        "print()"
    ],
    "the-luhn-algorithm-for-verifying-credit-card-numbers-etc": [
        "def P(x):D=map(int,x);return sum(D+[d-d/5*9for d in D[-2::-2]])%10==0",
        "c=lambda a:sum(sum(divmod(int(a[-e-1])<<e%2,10))for e in range(len(a)))%10==0"
    ],
    "superstitious-hotel-elevator": [
        "N=input()\nn=['-1']+[`i`for i in range(N*2)if i!=13and'4'not in`i`][1:N]\nwhile n:x=n.pop();print n.pop()+'\\t'+x",
        "n=input();c=-1;s=''\nwhile n:\n if('4'in`c`)==0!=c!=13:n-=1;s=(n%2*'%d\t%%d\\n'+s)%c\n c+=1\nprint s",
        "n=int(input())\nl=[-1]+[i for i in range(n*2)if(i!=13)*(not'4'in str(i))][1:n]\nwhile l:x=l.pop();print(l.pop(),'\\t',x)"
    ],
    "the-sorting-hat": [
        "lambda n:hash(n)/64779%4",
        "PYTHONHASHSEED=895984",
        "lambda n:hash(n)%814329%4"
    ],
    "play-the-bzzt-game": [
        "for x in range(501):print([x,'bzzt']['3'[:x%3]in'%s'%x])",
        "for i in range(501):print[i,'Bzzt'][i%3<1or'3'in`i`]",
        "print[n if n%3or '3'in str(n)else\"bzzt\"for n in range(501)]",
        "print[n if n%3and'3'not in str(n)else\"bzzt\"for n in range(501)]",
        "for i in range(501):print('bzzt'if'3'in str(i) or i%3<1 else i)"
    ],
    "dad-jokes-are-fun": [
        "strr= input(\"I'm  \")\nprint(\"Hiii\",strr,\"I'm Python\")",
        "lambda s:\"Hi%s, I'm Python!\"%s[3:]"
    ],
    "how-to-randomize-letters-in-a-word": [
        "random.sample",
        "def f(x):t=list(x)[1:-1];k='';exec'k+=t.pop(id(7)%len(t));'*len(t);return[x[0],x[0]+k+x[-1]][len(x)>1]"
    ],
    "significant-whitespace": [
        "f=lambda s:[sum(map(str.isspace,s))]and s.split()",
        "def x(s):\n def y(s):\n  return sum(map(str.isspace,s))\n  return s.split()\n return y(s)",
        "m=lambda x:sum(y.isspace()for y in x)\n+1\n0<9or x.split()",
        "ior1=0\nw=lambda i:i.split()if ior1 else sum(ord(c)in(9,10,32)for c in i)"
    ],
    "which-go-rank-is-higher": [
        "lambda c:max(c,key=lambda i:'_dp'.find(i[-1])**3*int(i[:-1]))",
        "lambda s:max(s,key=lambda x:(-2)**(ord(x[-1])|8)*int(x,26))",
        "lambda s:max(s,key=lambda x:(int(x,27)%9-3)*int(x,26))"
    ],
    "draw-an-ascii-double-helix": [
        "n=input()\na=[' O '[n==0:]]+['/ \\\\','\\\\ /','  /\\\\ '[n<0::2]]*abs(n)\na[-1]=a[0]\nfor x in[a,zip(*a)][n>0]:print''.join(x)",
        "x=int(input())\nprint(\"O\"if x==0else\" /\\\\\"*x+\"\\nO \"+\" / \"*(x-1)+\" O\\n\"+\" \\\\/\"*x if x>0else(\" O\"+\"\\n/ \\\\\\n\\\\ /\\n \\\\\"*-x)[:-1]+\"O\")",
        "n=int(input());m=abs(n)-1;print({n:\" O\\n/ \\\\\\n\"+m*\"\\ /\\n \\\\\\n/ \\\\\\n\"+\"\\\\ /\\n O\",m+1:n*\" /\\\\\"+\"\\nO\"+\"  /\"*m+\"  O\\n\"+\" \\/\"*n,0:\"O\"}[n])",
        "x,a,b,c,d=int(input())-1,'\\ /',' / ','/ \\\\','\\ /\\n \\\\\\n/ \\\\\\n'\nprint([[' O\\n/ \\\\\\n'+d*abs(x+2)+'\\ /\\n O',' /'+a*x+'\\\\\\nO '+b*x+' O\\n \\\\'+c*x+'/'],'OO'][x==-1][x>-1])"
    ],
    "fill-in-the-minesweeper-clues": [
        "def s(m):\n j=m.find('\\n')+1;q='q'*j*2;m=list(q+m+q)\n for i in range(len(m)):\n  if m[i]==' ':m[i]=`sum([m[k+i]=='*'for k in [-j-1,-j,-j+1,-1,1,j-1,j,j+1]])`\n return''.join(m)[j*2:-j*2]",
        "continue",
        "def f(s):w=s.find('\\n')+1;print''.join([c,`(s[i-(i>0):i+2]+(w*' '+s)[i-1:i+2]+s[i-1+w:i+2+w]).count('*')`][c==' ']for i,c in enumerate(s))"
    ],
    "how-even-is-a-number": [
        "print len(str(bin(int(input()))).split(\"1\")[-1])",
        "lambda n:len(bin(n&-n))-3"
    ],
    "find-the-smallest-number-that-doesnt-divide-n": [
        "f=lambda x,i=1:i if x%i!=0else f(x,i+1)",
        "f=lambda n,d=2:d*(n%d>0)or f(n,d+1)",
        "f=lambda n,d=1:n%d>0or-~f(n,d+1)"
    ],
    "test-a-number-for-narcissism": [
        "a=input();(0,1)[sum(int(i)**len(str(a))for i in str(a))==a]",
        "i=`input()`\nprint`sum(map(lambda x:int(x)**len(i),i))`==i",
        "lambda",
        "s = input()\nprint(int(s)==sum(int(c)**len(s)for c in s))",
        "s=input();print s==sum(int(c)**len(`s`)for c in`s`)"
    ],
    "make-some-alphabet-rain": [
        "f=lambda s,k=65:[*{*s}-{' '}]and[s]+f([[' ',c][91>ord(c.upper())>k]for c in s],k+1)",
        "lambda s:'\\n'.join(''.join((' '+l)[i<1or 91>ord(l.upper())>i+64]for l in s)for i in range(26)).rstrip()",
        "s=input()\ni=65\nwhile s.strip():print s;s=''.join([' ',c][91>ord(c.upper())>i]for c in s);i+=1"
    ],
    "confirm-the-illuminati": [
        "l=bytearray\na,b=' _';g=[l(a*9+\"^\"+a*9)]+[l(a*(8-k)+\"/%s\\\\\"%\"|\".join(b*k+b))for k in range(9)]\ng[4][8:11]=l(\"/o\\\\\")\ng[5][8:11]=l(\"\\\\_/\")\nfor r in g:print r",
        "for i in range(10):print(9-i)*' '+['^','/_%s\\\\'%['|_'*~-i,'|/o\\|_','|_\\_/_|_'][i%6/4*i%3]][i>0]"
    ],
    "dennis-numbers-2-0": [
        "lambda I:len(set(eval(reduce(lambda x,y:x+',+'[y>x[-1]]+y,I+' '))))<2",
        "r='0'\nfor d in input():r=d+'=+'[r<d]*2+r\n1/eval(r)"
    ],
    "arbitrary-length-currying": [
        "def f(a=0,s=[]):\n    if a:\n        return lambda b=0:f(b,s+[a])\n    return sum(s)",
        "f=lambda n:lambda m:m and f(m+n)or n",
        "f=lambda n=\"\":0if n==\"\"else lambda m=\"\":n if m==\"\"else f(n+m)",
        "f=lambda n,l=[]:n and(l.append(n)or f)or sum(l)*(l.clear()or 1)"
    ],
    "the-forbidden-built-in": [
        "f=lambda a,b,c,*l:(b<a)*(c,)+(l and f(*l))",
        "lambda i:[i[c+2]for c in range(0,len(i),3)if i[c+1]<i[c]]"
    ],
    "generate-wordenticons": [
        "def H(o):O=ord;G=len(o);p=[[' \u2015'[O(i)<O(g)],'|'][O(i)>O(g)]for i in o for g in o];u='\\n'.join([''.join(p[i:G+i]+p[i:G+i][::-1])for i in range(0,len(p),G)]);print(u+'\\n'+u[::-1])",
        "def f(s):x=[''.join(\" -|\"[cmp(ord(a),ord(b))]for a in s)for b in s];y=[a+b[::-1]for a,b in zip(x,x)];print'\\n'.join(y+y[::-1])"
    ],
    "1p5-nested-boxes": [
        "def P(n):x=raw_input();return eval('[(n+\".\",\"\",\"-\")]'+'+P(n+\"| \")'*int(x))+[(n+\"'\",'','-')]if'0'<x<':'else[(n,x,' ')]\nr=P('')\nfor q,t,f in r:print q+t+f*(max(len(2*x+y)for x,y,a in r)-len(2*q+t))+q[::-1]",
        "w=0\ndef p(n,l):\n global w;f=[(l-1,0)]\n for k in' '*n:\n  i=raw_input()\n  try:f+=p(int(i),l+1)\n  except:f+=[(l,i)];w=max(w,4*l+len(i))\n return f+[(l-1,1)]\nfor l,s in p(input(),1):p=w-4*l-2;print'| '*l+(\".'\"[s]+'-'*p+\".'\"[s]if s<2 else s+' '*(p+2-len(s)))+' |'*l"
    ],
    "surrounded-countries": [
        "rindex()",
        "lambda l,S=sorted:S(l,key=l.index)!=S(l,key=l[::-1].index)[::-1]"
    ],
    "tasteless-and-other-bugs": [
        "r=1;i=input()\nwhile r:\n r=0\n for s in'sin,cos,tan,log,ln,co,lo,si,ta,s,c,t,l,e'.split(','):\n  if i.startswith(s):r=i=i.replace(s,'',1);break\nprint(i=='')",
        "i=input()\nfor a in 'tan,sin,cos,log,si,co,ta,lo,lo,ln,s,c,t,l,e'.split(','):\n    if a in i:\n        i=i.replace(a,\"\")\nprint(not i)",
        "f=lambda w:any(f(w[len(s):])if w[:len(s)]==s else 0for s in'sin,cos,tan,log,ln,co,lo,si,ta,s,c,t,l,e'.split(','))if w else 1"
    ],
    "gravitational-force-between-numbers": [
        "l=input()\na=[(L<R>C)-(R<L>C)for L,C,R in zip([0]+l,l,l[1:]+[0])]\nwhile any(a):\n i=0\n while a[i]==0:i+=1\n m=a.pop(i);x,y=[i,i+m][::m];l[x:y+1]=l[i]+l[i+m],\nprint l",
        "lambda a:eval('['+'+'.join(str(c)+',0'*((e<c>d)==(c<d>b))for b,c,d,e in zip([0]+a,a,a[1:]+[0],a[2:]+[0,0]))+']')"
    ],
    "output-buffalo-buffalo-buffalo-buffalo-buffalo-buffalo-buffalo-buffalo": [
        "print('Buffalo buffalo Buffalo buffalo buffalo buffalo Buffalo buffalo')",
        "for c in'BbBbbbBb':print c+'uffalo',",
        "print('uffalo '.join('BbBbbbBb ')[:-2])",
        "o=['buffalo']\nfor x in ['B' if int(i) else 'b' for i in bin(69)[:1:-1]]:\n  o.insert(0,x+o[-1][1:])\nprint(' '.join(o))"
    ],
    "in-how-many-bits-do-i-fit": [
        "def f(a):print len(bin(a))-2",
        "lambda n:len(bin(n))-2",
        "int.bit_length"
    ],
    "print-n-ne-e-se-s-sw-w-nw": [
        "print'N NE E SE S SW W NW'",
        "''.join(' SEWN'[0xe0619042210504>>i*3&7]for i in range(19))",
        "i=8\nwhile i:print'NESESWNW'[~i+(i==4):][:1+i%2],;i-=1"
    ],
    "be-the-first-1-leave-only-the-first-truthy": [
        "r=0\nwhile 1:n=input();print n>r;r+=n",
        "def t(l,b=1>0):\n r=[]\n for x in l:r+=[x and b];b=(1-x)*b>0\n return r",
        "lambda x:[x[i]and x.index(x[i])==i for i in range(len(x))]",
        "while 1:b=input();print b;True^=b",
        "lambda i:[k==i.index(j)and j for k,j in enumerate(i)]",
        "while 1:b=input();print b;True&=b<1"
    ],
    "alphabet-triangle": [
        "f=lambda a:a and f(a-1)+chr(64+a)or\"\"\nfor i in range(-26,27):print f(26-abs(i))+f(27-abs(i))[::-1]",
        "def f(x=66,s='A'):\n t=s+s[-2::-1];print t\n if x<91:f(x+1,s+chr(x));print t",
        "for i in range(1,52):r=[chr(j+65)for j in range(abs(26*(i//26)-i%26))];print(''.join(r+r[-2::-1]))",
        "z=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\ndef a(x):v=z[:x]+z[x-26::-1]+\"\\n\";return v+a(x+1)+v if x<25 else v\nprint a(0)",
        "x=[chr(y) for y in range(65,91)]\nfor y in range(25):print ''.join(x[:y]+x[y::-1])\nfor y in range(25,-1,-1):print ''.join(x[:y]+x[y::-1])",
        "x=25\nexec'b=bytearray(range(65,91-abs(x)));print b+b[-2::-1];x-=1;'*51",
        "def p(k):\n    x=k-1\n    while x>-k:\n        print(chr(64+(k-abs(x))),end=\"\")\n        x-=1\nq=25\nwhile q>-27:\n    p(26-abs(q))\n    print()\n    q-=1",
        "s=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\na=[s[:x]+s[x::-1]for x in range(26)]\nprint('\\n'.join(a+a[24::-1]))",
        "s=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"*2\nfor i in range(51):print(s[:-i-1]+s[-i-3::-1],s[:i]+s[i::-1])[26>i]",
        "n=0;exec'x=25-abs(n-25);print bytearray(65+x-abs(y-x)for y in range(2*x+1));n+=1;'*51",
        "f=lambda x=66,s='A',t='':x/92*t or t+f(x+1,s+chr(x),s+s[-2::-1]+\"\\n\")+t"
    ],
    "abbreviate-that-us-state": [
        "lambda s:chr(s[0])+'IA%%L!NOI!M%!E.N!Y.XR.Z$D.I!.D$DA.D%!.HA!LJ%.N%\u200c\u200b$T.I%!C!T!.HAAT$.A!.\u200c\u200bVL.V%$CE%%AEK%.T$!.Y\u200c\u200b.A!.R.Y$O.S%!.K$!.S'\u200c\u200b.replace('%','$$').r\u200c\u200beplace('$','!!').rep\u200c\u200blace('!','..')[sum(c\u200c\u200b*5**i for i,c in enumerate(s[::-1]))%236-5]",
        "lambda s:s[0]+s[(19**9*0x4710b8f6019c1b61deca10eef13b1>>hash(s)%8199472%52*3&7)+1].upper()",
        "lambda s:s[0]+(\"KZD\"*5+\"HNTD\"*5+\"AYY\"*4+\"__L_O_VTA_I__A_T_RS_KA__S_\"+\"MOO\"*5+\"I_C_\"+\"AE\"*6+\"_I_D__A_\"+\"EDL\"*5+\"HV_A\"+\"IR\"*7+\"XC\"*6+\"E____N__YJ_YT___L\")[reduce(lambda a,x:a+ord(x)^24,s,0)%174]",
        "lambda s:s[0]+'.NY.SDS...O.DT..RT.AAYJZE.K.I.X.TI.EL.CMI..E.NA..L....TH.......O....DAAC..VNH.YAI.RVDA..L....A'[int(s.replace(' ','')[1:],36)%358%235%95]",
        "lambda s:s[0]+'CLLKARADEZVAK.T..DETTH.NSAHY...ID.D..O..Y.IRE.X..NALINC.VJM.SY.T..AAOI'[int(s[0]+s[-2:],36)%386%334%181%98%70]"
    ],
    "lets-golf-a-bibabobu-decoder": [
        "lambda s:''.join(chr(16*a+b)for a,b in zip(*[iter(4*F(l[:-2])+F(l[-1])-1for l in s.split('B')[1:])]*2));F=' IAOU'.find",
        "lambda w:''.join(' 1023546798abdcef'[int(c,35)/7%77%18]for c in w.split('B')[1:]).decode(\"hex\")",
        "lambda w:''.join('c60238e4d1_b7f95a'[hash(x)%3046%17]for x in w.split('B')[1:]).decode('hex')"
    ],
    "unscramble-those-case-very-sensitive-strings": [
        "def F(s):\n for l in[i for i,c in enumerate(s)if c.isupper()],[i for i,c in enumerate(s)if c.islower()]:\n  for a,b in zip(l[0::2],l[1::2]):s=s[:a]+s[b]+s[a+1:b]+s[a]+s[b+1:]\n print s",
        "s=input();u=str.isupper\nexec\"r='';i=0\\nfor c in s:r+=c[u(c):]or filter(u,s+s[::-1])[i^1];i+=u(c)\\ns=r.swapcase();\"*2\nprint s"
    ],
    "rotate-the-dots": [
        "def f(a,s=\" .':\",j=\"\".join):q=j(bin(4+s.find(i))for i in a);return j(s[int(j(x),2)]for x in zip(q[4]+q[3::5],q[9::5]+q[-2]))",
        "def f(s):a=[i in\"':\"for i in s]+[i in\".:\"for i in s][::-1];return''.join(\" '.:\"[i+2*j]for i,j in zip([a[-1]]+a,a[-2:len(s)-2:-1]))",
        "s=\" .':\"\na=[*map(s.find,input())]\nb=a[0]*2,*a,a[-1]//2\nprint(*map(lambda x,y:s[x&2|y&1],b,b[2:]),sep='')",
        "z=input()\nx=len(z)\nM=[0,1,2,3]\nfor Q in M:z=z.replace(\":'. \"[Q],\"11100100\"[Q*2:Q*2+2])\na=[]\nb=[]\nfor X in range(x):a+=[z[X*2]];b+=[z[X*2+1]]\nb=b[1:]+[a.pop()]\nc=[b[0]]+a\nz=\"\"\nfor X in range(len(c)):\n y=c[X]+b[X]\n for Q in M:y=y.replace(\"11100100\"[Q*2:Q*2+2],\":'. \"[Q])\n z+=y\nprint(z)"
    ],
    "print-numbers-from-1-to-10": [
        "print range(1,11)",
        "list(range(1,11))",
        "print(*range(1,11))"
    ],
    "shortest-program-that-continuously-allocates-memory": [
        "9\nwhile 1:_*9",
        "2**9**99",
        "i=9\nwhile 1:i*=i",
        "def f(a=[]):a.append(a)\nwhile 1:f()"
    ],
    "coprimes-up-to-n": [
        "f=lambda a,b:f(b,a%b)if b else a<2\nlambda c:[i for i in range(c)if f(i,c)]",
        "lambda n:[k/n for k in range(n*n)if k/n*k%n==1]"
    ],
    "is-it-a-lipogram": [
        "lambda c,s:c not in s+s.swapcase()",
        "lambda a,b:a.lower()not in b.lower()"
    ],
    "do-n-and-n3-have-the-same-set-of-digits": [
        "lambda n:reduce(lambda x,y:x*y,map(lambda x:x[0]in str(x[1]),[(i,n)for i in str(n**3)]))",
        "n=input()\nprint([i for i in str(int(n)**3)if i not in n]==[])",
        "lambda x:set(`x`)==set(str(x**3))",
        "lambda x:{*str(x)}=={*str(x**3)}"
    ],
    "multiplicative-persistence": [
        "def f(n):print n;n>9>f(eval('*'.join(`n`)))",
        "def f(n):print n;n>9and f(reduce(int.__mul__,map(int,`n`)))",
        "b=input()\nwhile 1:\n a=str(b);print a;b=1\n if len(a)<2:break\n for d in list(a):b*=int(d)"
    ],
    "output-the-alphabet-the-alphabet-or-just-a-character": [
        "f=lambda c,i=26:c[c.isalpha():]or c*i and f(c,i-1)+chr(i^ord(c)&96)",
        "lambda s,a='ABCDEFGHIJKLMNOPQRSTUVWXYZ':(s,(a,a.lower())[s.islower()])[s.isalpha()]",
        "a='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nprint(a if(x:=input())in a else a.lower()if x.islower()else x)",
        "f=lambda z,a=\"abcdefghijklmnopqrstuvwxyz\":[k for k in[a,a.upper(),z]if z in k][0]",
        "c=ord(input())\nprint[chr(c),bytearray(range(c&96|1,c&96|27))][64<c&95<91]",
        "lambda x,a='abcdefghijklmnopqrstuvwxyz':[x,a,a.upper()][(x in a)+2*(x in a.upper())]",
        "i=input();a=\"abcdefghijklmnopqrstuvwxyz\";A=a.upper();print(i in a and a or i in A and A or i)",
        "lambda c:(c,''.join(chr(x+(67,97)[c>'Z'])for x in range(25)))[c.isalpha()]"
    ],
    "is-a-number-divisible-by-each-of-its-digits": [
        "f=lambda n:any(n%(int(d)or.3)for d in`n`)<1",
        "def t(n):\n r=n\n while r:\n  r,i=divmod(r,10)\n  if not i or n%i:return 0>1\n return 1>0\n\nassert(t(128)==True)\nassert(t(12)==True)\nassert(t(120)==False)\nassert(t(122)==True)\nassert(t(13)==False)\nassert(t(32)==False)\nassert(t(22)==True)\nassert(t(42)==False)\nassert(t(212)==True)\nassert(t(213)==False)\nassert(t(162)==True)\nassert(t(204)==False)",
        "f=lambda n:",
        "lambda s:all(s%int(i)==0 if i!='0'else 0 for i in`s`)",
        "f=lambda j:",
        "f=lambda n:all(c>'0'and 0==n%int(c)for c in`n`)"
    ],
    "stretch-the-word": [
        "f=lambda x,*y:x and-~y.count(x[0])*x[0]+f(x[1:],x[0],*y)\nf=lambda x,y=0:x[y:]and-~x[:y].count(x[y])*x[y]+f(x,y+1)",
        "def s(w,o=[],n=\"\"):\n for x in w:o+=x;n+=x*o.count(x)\n return n",
        "def f(s):*s,x=s;return s and f(s)+x+x*s.count(x)or x"
    ],
    "outputting-ordinal-numbers-1st-2nd-3rd": [
        "i=input()\nk=i%10\nprint\"%d%s\"%(i,\"tsnrhtdd\"[(i/10%10!=1)*(k<4)*k::4])",
        "lambda n:`n`+'tsnrhtdd'[n%5*(n%100^15>4>n%10)::4]",
        "lambda x:x+((('th','st','nd','rd')+('th',)*6)[int(x[-1])]if('0'+x)[-2]!='1'else'th')"
    ],
    "99-bugs-in-the-code": [
        "j=i+max(-i,randint(-16,4))",
        "bugs-=min(bugs,randomNumber)"
    ],
    "the-snail-in-the-well": [
        "f=lambda a,b,c:int(b>=a)or 1+f(a-b+c,b,c)",
        "f=lambda h,a,b:h and-~f(h>>a<<b,a,b)",
        "f=lambda x,y,z:x-y<1or 1+f(x-y+z,y,z)",
        "f=lambda x,y,z:1+f(x-(y-z),y,z)if x>y else 1"
    ],
    "the-third-string": [
        "lambda x,y:max({*\"abc\"}-{x[:1],y[:1]})+max(x,y)[1:]",
        "lambda a,b:[k for k in\"abc\"if k not in b[:1]+a[:1]][0]+(a or b)[1:]",
        "def f(x,y,i=1):\n while i*10<10**len(x or y)or str(i)in x+y:i*=2\n print(i)",
        "a=input()\nb=ord(a[0][0])+1\nif b==ord(a[1][0]):b+=1\nprint unichr(b)+a[0][1:-1]"
    ],
    "can-my-4-note-music-box-play-that-song": [
        "def f(s):g=lambda s,c:s==''or g(s[1:],(c[:4]*2)[(s[0]==c[0])*2+1:])if s==''or s[0]in c[:2]else 0;return any([g(s,\"1234123\"[i:])for i in range(4)])",
        "n=15\nfor c in input():k=2**int(c);n=n*17/k%4*5/2%4*k%15\nprint n>0"
    ],
    "yarr-a-map-to-the-hidden-treasure": [
        "D={}\nm=X=Y=0\nfor s in input().split(\",\"):d=ord(s[0])%10%7;exec\"a,b=X,Y;E=D[Y]=D.get(Y,{});E[X]='<^>v'[d];m=min(m,X);%c+=d-2|1;\"%(88+d%2)*int(s[1:])\nD[b][a]=\"X\"\nfor Y in sorted(D):print\"\".join(D[Y].get(n,\" \")for n in range(m,max(D[Y])+1))",
        "\"E2,N4,E5,S2,W1,S3\""
    ],
    "code-mini-golf": [
        "def f(c,p):c=c.splitlines();l=len(c);f=lambda x,h,v:v if'U'==c[h][x]or v<1 else f(x+(h==l-1),(h+1)%l,v+{\"_\":-1,\"\\\\\":4,\"/\":-5,\" \":0}[c[h][x]]);return f(0,0,p)>0",
        "def g(c,p):\n o=[''.join(x).split()[0] for x in zip(*c.split('\\n'))]\n t={\"_\":1,\"/\":5,\"\\\\\":-4}\n for v in o:\n    if v==\"U\" or p<1:return p>0\n    p-=t[v]"
    ],
    "the-prime-ant": [
        "p=0\nA=range(2,input()+2)\nfor _ in A:\n for q in range(2,A[p]):\n\tif A[p]%q<1:A[p]/=q;p-=1;A[p]+=q;break\n else:p+=1\nprint p",
        "T=range(2,input()+2);p=0\nfor _ in T:\n m=T[p];d=min(k for k in range(2,m+1)if m%k<1);p+=1\n if d<m:T[p-1]/=d;p-=2;T[p]+=d\nprint p",
        "[*range(2,n+9)]"
    ],
    "generate-an-rgb-colour-grid": [
        "print('\\033[9%sm#'*3+'\\n')*3%tuple('135326564')",
        "l=[41,43,45,43,42,46,45,46,44]\nprint(''.join(['\\033[0;37;'+`l[i+j*3]`+'m \\033[0m'+'\\n'*(j==2)for i in range(3)for j in range(3)]))",
        "turtle"
    ],
    "divide-a-number-by-3-without-using-operators": [
        "print(eval(input()+\"%c3\"%47))",
        "print\"-\"[x:]+`len(xrange(2,abs(x),3))`",
        "int(' -'[x<0]+str(len(range(2,abs(x),3))))",
        "print' -'[x<0],len(range(*(2,-2,x,x,3,-3)[x<0::2]))",
        "print input()//3",
        "eval(str(x)+chr(47)*2+str(3))",
        "z=len(range(2,abs(x),3))\nprint (z,-z)[x<0]",
        "f=lambda x:x and s(x>>1,f(x>>1))\ns=lambda x,y:y and s(x^y,(~x&y)<<1)or x"
    ],
    "backhandedhhhhhhspaces": [
        "o=\"\"\nfor x in input().split(\"^H\"):o=o[:-1]+x\nprint(o)",
        "lambda",
        "n=input();o='';c=0\nfor l in n:d=l=='^';o=[o+l*(1-c),o[:-1]][d];c=d\nprint o"
    ],
    "am-i-a-fibonacci-number": [
        "m=0;k=1;exec(\"k,m=m,m+k\\nif k==n:print(1)\\n\"*n)",
        "def f(m):\n a=b=1\n while a<m:b,a=a,a+b\n print(a==m)",
        "f=lambda n,a=0,b=1:n>a and f(n,b,a+b)or n==a",
        "f=5*int(input())**2\nprint(not((f+4)**0.5%1and(f-4)**0.5%1))",
        "lambda n:0in((5*n*n+4)**.5%1,abs(5*n*n-4)**.5%1)"
    ],
    "count-sums-of-two-squares": [
        "def x(n):r=range(-n,n+1);print sum(a*a+b*b==n for a in r for b in r)",
        "lambda n:sum([1for a in range(-n,n+1)for b in range(-n,n+1)if a*a+b*b==n])",
        "f=lambda n,x=1:+(x>n)or(n%x<1)-f(n,x+2)/4<<2",
        "lambda n:0**n+sum((-(n%(x-~x)<1))**x*4for x in range(n))",
        "f=lambda n,x=1:+(x>n)or(2-x%4)*(n%x<1)+f(n,x+2)/4<<2",
        "lambda n:sum(i*i+j*j==n for i in range(-n,n+1)for j in range(-n,n+1))",
        "lambda n:0**n+sum(2-d%4for d in range(1,n+1)if d%2>n%d)*4",
        "lambda n:0**n+4*sum(i**.5%1+(n-i)**.5%1==0for i in range(n))"
    ],
    "third-time-the-charm": [
        "print open(__file__,\"a\").tell()/79*3|1#",
        "1\nid=id<3and-~id\nexec\"print id|1\"*0**0"
    ],
    "polar-bear-polar-bear-what-do-you-hear": [
        "h=t=''\nfor n,s in zip('polar bear,lion,hippopotamus,flamingo,zebra,boa constrictor,elephant,leopard,peacock,walrus,zookeeper'.split(','),'...growl roar snort flut bray hiss trumpet snarl yelp bellow whistl'.split()):u='n'[:'el'in n],n,s,n.title();h+=\"I hear a{0} {1} {2}ing in my ear.\\n\\n{3}, {3} what do you hear?\\n\".format(*u);t+=\"{2}ing like a{0} {1},\\n\".format(*u)\nprint((h+'I hear children...\\n\\n'+t)[44:-30]+\"...\\nthat's what I hear.\")",
        "a=\"polar bear,lion,hippopotamus,flamingo,zebra,boa constrictor,elephant,leopard,peacock,walrus,zookeeper,whistl,bellow,yelp,snarl,trumpet,hiss,bray,flut,snort,roar,growl\".split(',')\ne='...\\n\\n'\nr=range\nprint'\\n'.join([(a[i].title()+', ')*2+\"what do you hear?\\nI hear \"+((i<10)*(\"a%s %sing in my ear.\\n\"%(\"n \"[i!=5:]+a[i+1],a[~-~i]))or\"children%s...\"%e+\",\\n\".join(a[~j]+\"ing like a\"+\"n \"[j!=6:]+a[j]for j in r(10))+e+\"that's what I hear.\")for i in r(11)])",
        "P=print\nN=lambda m:\"an\"[:(\"E\"==m[0])+1]+\" \"+m.lower()\nh=\"I hear \"\nA=[a.split(\"|\")for a in\"Polar Bear|growl:Lion|roar:Hippopotamus|snort:Flamingo|flut:Zebra|bray:Boa Constrictor|hiss:Elephant|trumpet:Leopard|snarl:Peacock|yelp:Walrus|bellow:Zookeeper|whistl\".split(\":\")]\nfor i in range(11):\n a,b=A[i]\n if i:P(h+N(a)+\" \"+b+\"ing in my ear.\\n\")\n a+=\", \";P(a+a+\"what do you hear?\")\nP(h+\"children...\\n\\n...\"+\",\\n\".join([z+\"ing like \"+N(y)for y,z in A[:-1]])+\"...\\nthat's what I hear.\")"
    ],
    "appending-string-lengths": [
        "f=lambda s,n=0:f(s,n+1)if(s+`n`)[n:]else s+`n`",
        "lambda a:eval('a+str(len('*3+'a))))))')"
    ],
    "minecraft-mirrored": [
        "def y(b):\n x=int(['4vwhclv10tuk4z18gf73aimn6zvwkrhxekphfn1lxocj9ezchd1cd1cv97p3f6k12s8hcjznnm5iq3om4vgxvugp3makgu4n3f6qxvdrtl4c0lva12hwt','8uzwdylhtrf6oqnwnck8pfxu25m5844tuo2700v3zoeuvossx1b47rnwyrmqodau3feu3spi9jydhyxvntv48vojx9iq9af78wufzn1'][b%2],36);x<<=69;s=\"\";t=\" /\\\\-|_\\n\"\n while x:s+=t[x&7];x>>=3\n print s",
        "r=str.replace;m,p=r(r(r('''YYYYY   __YA AYY   A___\n  /\\  /\\YX\\  X Y/YX Y/\\Y| Y|\n /  \\/  \\   X \\ X--  | Y|--\\Y/__\\   |--   |\n/YY\\  X  \\XA \\A|   \\  /Y\\  | Y| ''','X','|  |'),'Y','    '),'A','__  '),print;\nif int(input())%2==0:p(m)\nelse:\n q,i,u=m.split('\\n')[::-1],0,[[23,24,29,30],[42,43],[],[23,24,29,30,34,35,53,49,50,55]];q.insert(0,q.pop())\n while i<len(q):\n  x=list(r(q[i],'_',' '))+[' ']\n  for a in u[i]:x[a]='_'\n  p(r(r(r(r(''.join(x),'___',''),\"\\\\\",'t'),'/',\"\\\\\"),'t','/'))\n  i+=1"
    ],
    "is-it-double-speak": [
        "lambda s:s[::2]==s[1::2]",
        "lambda s:all[([s[2*i]==s[2*i+1]for i in range(int(len(s)/2))]),0][len(s)%2]"
    ],
    "helloellolloloo-worldorldrldldd": [
        "print(*map(lambda x:''.join(x[n:]for n in range(len(x))),input().split()))",
        "lambda s:' '.join(map(g,s.split()))\ng=lambda s:s and s+g(s[1:])",
        "for x in input():\n y=\"\"\n while x:y+=x;x=x[1:]\n print y,",
        "def f(a):return a+f(a[1:])if''<a else'' \nfor x in input().split():print(f(x),end=' ')",
        "d=lambda s:' '.join(n+d(n[1:])for n in s.split())"
    ],
    "patience-young-padovan": [
        "f=lambda n,a=1,b=1,c=1:n>2and f(n-1,b,c,a+b)or c",
        "f=lambda n:n<3or f(n-2)+f(n-3)"
    ],
    "golf-a-transcendental-number": [
        "lambda n:n[0]",
        "lambda n:1>>(n&~-n)",
        "lambda n:\"\".join(`i`for i in range(n+1))[n]",
        "n=>(\"\"+n)[0]"
    ],
    "removing-the-nineteenth-byte": [
        "def f(gh):\n\tgh()\n\t\"#\";print(\" - The Nineteenth Byte\")\nf(lambda:print(end=\"Stack Exchange Chat\"))",
        "b='Stack Excha'\nn=88\nprint b+'nge Chat - The Nineteenth Byte'[:n]",
        "print('Stack Exch{1}'.format(x:='ange Chat',x+' - The Nineteenth Byte'))",
        "s=\"Exchange Chat \"\\\n\"- The Nineteenth Byte\"\nprint\"Stack\",s",
        "x,t=\"hange Chat\",\" \";print(\"Stack Exc\"+x,bool(t)*\"- The Nineteenth Byte\")",
        "s,y='Stack Exch',01\nprint s+'ange Chat'+' - The Nineteenth Byte'*y",
        "a=\"Exchange Chat\"\n\"#\";a+=\" - The Nineteenth Byte\"\nprint\"Stack\",a",
        "exit(('%s %s %s '+10//10*'- The Nineteenth Byte')%('Stack','Exchange','Chat'))"
    ],
    "there-are-known-knowns": [
        "k='unknowns'\nfor i in 8,6,2,0:print k[i/3:7],k[i%3:]",
        "k=['known','unknown']\nfor i in range(4):print(k[i//2]+' '+k[i%2]+'s')"
    ],
    "theres-a-hole-in-the-bottom-of-the-sea": [
        "k='n the ';o=e='bottom of the sea\\n';b=\"There's a \";h='hole'\nfor j in[h]+'log bump frog wart hair fly smile'.split():o=j+' '+'io'['g'in o]+k+o;print(b+o+b+o+b+h+', t'+b[1:]+h+'\\n'+b+h+' i'+k+e)",
        "s=\"bottom of the sea\\n\"\na=\"There's a \"\nfor w in'hole log bump frog wart hair fly flea smile'.split():s=w+\" %sn the \"%'io'['g'in s]+s;print(a+s)*2+a+\"hole, t%shole\\n\"%a[1:]+a+s[-30:]"
    ],
    "extreme-fibonacci": [
        "a,b=0,1\ni=1e9\nwhile i:\n a,b=b,a+b;i-=1\n if a>>3360:a/=10;b/=10\nprint a",
        "a,b=0,1\nfor c in bin(10**9):\n a,b=2*a*b-a*a,a*a+b*b\n if'1'==c:a,b=b,a+b\n while a>>3340:a/=10;b/=10\nprint a"
    ],
    "fissile-numbers": [
        "def f(n,c=0):a=n-c;b=n-a*~-a/2;return 1/a or-~sum(map(f,range(b/a,b/a+a)))if b>b%a<1else f(n,c+1)",
        "def f(n,c=0):\n d=n-c;s=(n-d*~-d/2)/d\n return(s%1or s<1)and f(n,c+1)or+(d<2)or-~sum(f(int(s)+i)for i in range(d))",
        "f=lambda n,R={1}:n-sum(R)and f(n,R^{[min(R),max(R)+1][n>sum(R)]})or-~sum(map(f,R-{n}))",
        "f=lambda n,a=1,d=1:a/n or[f(a)+f(n-a,1+1%d*a)+1/d,f(n,a+d/n,d%n+1)][2*n!=-~d*(2*a+d)]"
    ],
    "depalindromize-this-string": [
        "lambda c:c[:(len(c)+1)//2]",
        "lambda s:s[:-~len(s)/2]",
        "lambda _:_[len(_)/2:]",
        "x=list(input())\nfor q in range(0,int(round((len(x)/2)-0.1,0))):x.pop()\nprint(''.join(x))",
        "lambda S:S[:len(S)//2+1]",
        "lambda x:x[:len(x)/2+1]"
    ],
    "professor-at-mit-can-read-minds": [
        "lambda(S,V),*l:S+N[F(V)+int(`map(sorted(l,key=lambda(s,v):(F(v),s)).index,l)`[1::3],3)*3/10]\nN='23456789TJQKA'*2;F=N.find",
        "lambda a:a[0][0]+R[h(map(a[1:].index,sorted(a[1:],key=lambda c:(I(c[1]),c))))+I(a[0][1])]\nR='A23456789TJQK'*2;I=R.index\nh=lambda(x,y,z):x*2+(y>z)+1"
    ],
    "downgrade-to-a-palindrome": [
        "def f(i):R=range(len(i)+1);print min([i[y:k+1]for y in R for k in R if(i[:y]+i[k+1:])[::-1]==i[:y]+i[k+1:]],key=len)",
        "f=lambda s,p='\t':min([s][:p[::-1]in p+p]+(s and[f(s[1:],p+s[0]),f(s[:-1],s[-1]+p)]or[p]),key=len)"
    ],
    "output-programming-language-name": [
        "exec\"\\150elp()\"",
        "exec eval('\"IMpORT THIS\".LOWER()'.swapcase())",
        "exec\"pri\\156\\164'pYTHON'\"",
        "exec('pRINt'.upper().swapcase()+' \"pYTHON\"')"
    ],
    "convert-1-2-3-4-5-6-7-8-and-9-to-one-two-three-etc": [
        "'one two three four five six seven eight nine'.split()[input()-1]",
        "print' ottffssennwhoiieiieoruvxvgn  ere ehe  e   nt'[input()::9]",
        "n={\n1:'one',2:'two',3:'three',4:'four',5:'five',6:'six',7:'seven',8:'eight',9:'nine',0:'zero'}\nprint n.get(int(raw_input()))",
        "num2words"
    ],
    "shortest-code-in-your-language-to-persist-a-string-across-a-reboot": [
        "open(*'aw').write(open(0).read())",
        "open(*'fw').write('print(%r)'%open(0).read())"
    ],
    "is-my-triangle-right": [
        "a,b,c=sorted(input())\n1/(a*a+b*b-c*c)",
        "lambda*l:sum(x*x/2for x in l)**.5in l",
        "lambda a,b,c:(a*a+b*b+c*c)/2in(a*a,b*b,c*c)"
    ],
    "obfuscated-fizzbuzz-golf": [
        "i=0\nwhile 1:i+=1;print'FizzBuzz'[i%~2&4:12&8+i%~4]or i",
        "i=0\nwhile 1:i+=1;print\"\".join(\"BzuzzizF\"[::2*j]for j in(-1,1)if 1>i%(4+j))or i",
        "print(*((lambda x=x: ''.join(chr(c) for c in (102, 105)) + (2 * chr(122)) + ''.join(chr(c) for c in (98, 117)) + (2 * chr(122)) + '\\n' if x % (30 >> 1) == 0 else ''.join(chr(c) for c in (102, 105)) + (2 * chr(122)) + '\\n' if x % (6 >> 1) == 0 else ''.join(chr(c) for c in (98, 117)) + (2 * chr(122)) + '\\n' if x % (10 >> 1) == 0 else str(x) + '\\n')() for x in range(1, 101)))"
    ],
    "shortest-code-for-infinite-disk-i-o": [
        "while 1:open(\"a\")",
        "while 1:open(\"a\",\"w\").write(\"b\")"
    ],
    "print-a-lego-piece": [
        "lambda x,y:('o',x*'__'+'___\\n'+'| %s|\\n'%('o '*x)*y+'-'*(x*2+3))[x+y>2]",
        "lambda x,y:(x*'__'+'___\\n'+('| '+'o '*x+'|\\n')*y+'-'*(x*2+3),'o')[x<2>y]"
    ],
    "its-hip-to-be-square": [
        "lambda n:n in(i*i for i in range(n+1))",
        "lambda n:n**.5//1==n**.5",
        "lambda n:n**.5%1==0",
        "lambda n:int(n**.5)**2==n",
        "lambda x:int(x**.5)**2==x",
        "g = lambda x: (x**.5).is_integer()",
        "^((?=(xx+?)\\2+$)((?=\\2+$)(?=(x+)(\\4+$))\\5){2})*x?$"
    ],
    "yes-of-course-im-an-adult": [
        "lambda x:max(x,[18,1.4]['.'in`x`])",
        "lambda a:(a,1.4)[a<1.4]if\".\"in`a`else(a,18)[a<18]"
    ],
    "stringgnirtsstringgnirtsstringgnirts": [
        "f=lambda s,i=0:s[i:]and s+f(s[::-1],i+1)",
        "def s(d,i=1):\n t=d[::(i%2)*2-1]\n if i<len(d):t+=s(d,i+1)\n return t",
        "def f(s,o=''):\n r=s[::-1]\n for i in range(len(s)):\n  if i%2==0:o+=s\n  else:o+=r\n return o"
    ],
    "detect-heat-waves": [
        "f=lambda l:l>l[:4]and(min(l)>24<sorted(l)[~2]-5)|f(l[1:])|f(l[:-1])",
        "lambda a:reduce(lambda b,c:(b*(6,2)[c<30]%864,1)[b*25>b*c],a,1)",
        "lambda T:any(len(s)>4<sum(s+s)for s in bytes(t>29or(t<25)*9for t in T).split())",
        "lambda l:any(2<s.count('2')*(len(s)>14)for s in`[(t>24)+(t>29)for t in l]`.split('0'))"
    ],
    "draw-the-devils-staircase": [
        "def f(n,s=0):\n if~n:B=3**n;A=s+B-2**n;f(n-1,A+B);print' '*A+'x'*B;f(n-1,s)",
        "L=[1]\ni=3\nexec\"L+=[i]+L;i*=3;\"*input()\nwhile L:x=L.pop();print' '*sum(L)+'x'*x",
        "def f(n,i=1,s=0):\n if i<2<<n:q=3**len(bin(i&-i))/27;f(n,i+1,s+q);print' '*s+'x'*q"
    ],
    "facey-mcfaceface": [
        "def f(s):\n s=s[0].upper()+s[1:].lower()\n y=lambda s:s[:-1]if s[-1]=='y'else s\n t=y(s)\n u=s[:-2]if s[-2:]=='ey'else y(s)\n return t+'y Mc%sface'%u",
        "def f(s):s=s.title();return s+'y'*(s[-1]!='y')+' Mc'+([s,s[:-1],0,s[:-2]][(s[-1]=='y')+((s[-2:]=='ey')*2)])+'face'"
    ],
    "print-out-all-ipv6-addresses": [
        "n=4**64\nwhile n:n-=1;s='%032x'%n;exec\"s=s[4:]+':'+s[:4];\"*7;print s",
        "def i(p=0):\n while p<4**64:print':'.join(hex(p)[2:].zfill(32)[4*s:4*s+4]for s in range(8));p+=1"
    ],
    "element-names-above-118": [
        "h=x='';r=str.replace\nfor i in input():s=r('nubtqphsoeinirueeecnl  ianxptn    dt t'[int(i)::10],' ','');h+=s;x+=s[0]\nprint(r(r(h+'ium\\n','ii','i'),'nnn','nn')+x.title())",
        "n=e=\"\"\nfor c in input():s=\"nil un bi tri quad pent hex sept oct enn\".split()[int(c)];n+=s[c<\"1\"<\"nn\"==n[-2:]:];e+=s[0]\nprint(n.strip(\"i\")+\"ium\",e.title())"
    ],
    "divisor-skyline": [
        "lambda n:'\\n'.join([*map(''.join,zip(*['#'*sum(x%-~i==0for i in range(x))+n*' 'for x in range(1,n+1)]))][::-1])",
        "N=input();r=range\nfor i in r(N,0,-1):print''.join('# '[i>sum(x%-~p<1for p in r(x))]for x in r(1,1+N))"
    ],
    "undress-a-string": [
        "f=lambda s,i=1:[s]+(s>i*'!'and'!'>s[-1]and f(s[:-1])or'!'>s and f(s[1:],0)or[])",
        "s=input()+' '\na=0\nwhile-a*s!=id:\n if a:id=s\n a=~a\n if'!'>s[a]:s=s[1+a:len(s)+a];print s"
    ],
    "is-this-tic-tac-toe-board-valid": [
        "def z(b):return int('agqozfx67wwye6rxr508ch2i8qicekpreqkap0725pk',36)<<24&1<<b+(b>255)*(511-b-b)",
        "def v(b):f=sum(b,());w={x[0]for x in b+zip(*b)+[f[::4],f[-3:1:-2]]if len(set(x))==1};return sum(map(`b`.count,w))==len(w)*5"
    ],
    "what-an-odd-function": [
        "lambda n:[n/3*4+1,n/3*4+3,n/3*2+2][n%3]",
        "lambda n:2*((n-int(n**.5))+.5,n**.5-1)[n!=1>0==n**.5%1]"
    ],
    "duck-duck-josephus": [
        "def f(a):b=a[0]%len(a);return f(a[-~b:]+a[:b])if a[1:]else a",
        "def f(a,p=0):\n while a[1:]:p=(p+(a+a)[p])%len(a);del a[p]",
        "def f(x):\n while x[1:]:y=x[0]%len(x);x=x[y+1:]+x[:y]\n print x",
        "f=lambda x:x and f((x+x*x[0])[x[0]:][1:len(x)])or x",
        "def f(a):\n while a[1:]:l=a[0]%len(a);a[:]=a[-~l:]+a[:l]",
        "f=lambda a,*b:f(*([a,*b]*-~a)[a+1:a-~len(b)])if b else a"
    ],
    "shifty-eyes-shifting-is": [
        "def f(l,I=0,i=1):\n    for a,_,b in l.split():I-=[I>0,-(i!=I+1)][a>'='];i-=[i!=I+1,-1][b>'=']\n    return'.'*I+'I'+'.'*(i+~I)+'i'",
        "f=lambda s,I=1,i=2:s and f(s[2:],i,I+cmp(s,'=')*(0<I+cmp(s,'=')!=i))or'%*c'*2%(I,73,i-I,105)"
    ],
    "the-holy-numbers": [
        "lambda n,h,l='4698080':[y for y in range(2**64-1)if(sum(l.count(x)-(x not in l)for x in str(y))>=h)][n]",
        "f=lambda n,h,k=0,s=\"0046889\":-0**n or-~f(n-(sum(map(s.count,`k`))>=h<set(str(k))<=set(s)),h,k+1)"
    ],
    "braille-graphics": [
        "def f(m):\n while m:\n  r,m,s=[*zip(*m)],m[4:],''\n  while r:s+=chr(10240+sum(q<<int(w)for(q,w)in zip((r[0]+(0,)*3)[:4]+(r+[()])[1],'01263457')));r=r[2:]\n  print(s)",
        "a=[]\ny=0\nfor l in eval(input()):\n y-=1;a+=y%4//3*[-~len(l)//2*[10240]];x=0\n for v in l:a[-1][x//2]|=v<<(6429374>>y%4*6+x%2*3&7);x+=1\nfor l in a:print(*map(chr,l),sep='')"
    ],
    "print-0-to-100-without-1-9-characters": [
        "x=True;a=x+x;b=a*a+x;print(*range(a*a*b*b+x))",
        "print(*range(*b'e'))",
        "for x in range(ord(\"e\")):print(x)"
    ],
    "stay-away-from-zero": [
        "lambda x:x+(x<1)",
        "_+=_==(_>_)",
        "int(max('1',input()))",
        "lambda n:n or 1"
    ],
    "draw-the-swiss-flag": [
        "r,w=' \\0\\0',' '*3\nA,B=192*r,(13*r+6*w+13*r)*7\nprint\"P6 \"+\"32 \"*3+A+B+(6*r+20*w+6*r)*6+B+A",
        "image.xpm",
        "Pillow 2.8.0"
    ],
    "rock-around-the-clock": [
        "t=1+1;eval('\u7020\u6972\u746e\u3328\u282a\u2522\u2c69\u2520\u2269\u322b\u222a\u202c\u6925\u6f20\u6327\u6f6c\u6b63\u2b22\u2022\u6f72\u6b63\u5c2c\u226e\u2529\u7574\u6c70\u2865\u6172\u676e\u2865\u2c31\u3331\u2929\u222b\u6557\u7227\u2065\u6f67\u6e6e\u2061\u6f72\u6b63\u6120\u6f72\u6e75\u2064\u6874\u2065\u6c63\u636f\u206b\u6f74\u696e\u6867\u2e74\u2922'.encode('utf%i'%(t*t<<t))[t:])",
        "print((1+1+1)*\"%i, %i, %i o'clock, %i o'clock rock,\\n\"%tuple(range(1,11+1+1))+\"We're gonna rock around the clock tonight.\")",
        "b=\", \";x=\" o'clock\";y=' rock,\\n';c=1;s=\"\";n=1+1+1\nfor i in range(n):\n for j in range(n):s+=str(c)+b;c+=1\n s=s[:-1-1]+x+b+str(c)+x+y;c+=1\nprint s+\"We're gonna rock around the clock tonight.\""
    ],
    "make-an-emergency-corridor": [
        "lambda n:1%n*'0'+`10**(n-1%n)`",
        "lambda n:f\"{'CE'[n<2:]:C<{n+1}}\"",
        "lambda n:-1*((n+1)//n-2)*'C'+'E'+(n+((n+1)//n-2))*'C'",
        "lambda n:\"CEC\"[~n:]+\"C\"*(n-2)",
        "lambda n:'ECE'[n>1:n+1]+'C'*~-n",
        "lambda n:'C'*(n>1)+'E'+'C'*(n-1+(n==1))",
        "lambda N:'C'*(N>1)+'EC'+'C'*(N-2)",
        "lambda n:`10/3.`[1/n:n-~1/n]",
        "lambda n:10**n*97/30-1/n*9"
    ],
    "is-this-number-an-integer-power-of-2": [
        "def g(x):\n while x%-2==0!=x:x/=-2\n return x==1",
        "a=input()\nwhile a%-2==0:a/=-2\nprint a==1",
        "lambda n:n==(-2)**~-n.bit_length()",
        "lambda n:n*n&n*n-1<n%3%2",
        "f=lambda n:n==1or n!=n%2<f(n/-2)",
        "lambda n:len(x:=bin(n))&1==x.count('1')",
        "lambda x:x*(x&-x==abs(x))*((x<0)^x.bit_length()&1)"
    ],
    "bernardino-identifies-unaltered-dollar-words": [
        "lambda s:sum(ord(i)-96for i in s)==100",
        "lambda s:sum(map(ord,s))==4-96*~len(s)"
    ],
    "make-a-code-square-with-your-favorite-word": [
        "def canoe(s='S\\\necret weap',sno\n='ce',a='ons o\\\nf the Can',oces\n=1,oesn=1,c='a\\\ndian navy',cose\n=\"\"\"aoenscanaen\ncanceessanoeeca\nanoasanooscanoe\nnoescccccaeescc\noescneocaeoesca\nescaoescan\"\"\"):\n canoes=s + a+c\n print (canoes)\ns=1;    canoe()",
        "eprnt=\" a \"\nat=\"person\"\nrnep=\"that\"\nnrpt=\"made\"\nea= \" prnt\"\ne=\"parent:\"\npa =(eprnt+\nat+\" \"+rnep\n+ea[0]+nrpt\n+ eprnt+at)\nprint(e+pa)"
    ],
    "turing-complete-language-interpreter": [
        "l=input()\nwhile l:l=l[2+l[0]:]+l[2:2+l[0]]*l[1]",
        "a,b,x,m=input()\nwhile-~x%m:x=x/m*a[x%m]+b[x%m]"
    ],
    "3-2-1-crash-off": [
        "x=10\nx/x\nprint x\nf=open(__file__,\"r+\")\ns=f.read()\nf.seek(0)\nf.write(s.replace(`x`,`x-1`))",
        "f=open(__file__,\"r+\")\nx=75-len(f.read())\nx/x\nprint x\nf.write('#')"
    ],
    "fake-marquee-text": [
        "s=lambda t,s:'\\n'.join((' '*s+t)[i:s+i]for i in range(len(t)+s))",
        "def f(s,n):\n s=\" \"*n+s\n while s:print s[:n];s=s[1:]",
        "def f(s,n):\n s=n*\" \"+s\n for i in range(len(s)):print(s[i:i+n])"
    ],
    "fixing-a-froot-loop-necklace": [
        "i=raw_input();r='roygbp';l='r';d=''\nfor n in i:\n if n==l:d+='n';l=r[(r.index(l)+1)%6]\n else:d+='e'\nd=list(d)[::-1];p=(r.index(l)+1)%6;\nfor s in range(len(d)):\n if d[s]=='n'and p-1:d[s]='e';p-=1\nif d.count('n')<6:print'e'*len(d)\nelse:print''.join(d[::-1])",
        "r=n=''\nfor c in input():r+='en'[c=='roygbp'[r.count('n')%6]]\nfor c in r:n+=['e',c][n.count('n')<r.count('n')/6*6]\nprint n"
    ],
    "knight-on-the-rim-is-grim": [
        "lambda x,y,a=[2,1,-1,-2,-2,-1,1,2]:list((9>x+a[i]>0)&(9>y+a[5-i]>0)for i in range(8)).count(1)",
        "lambda x,y:50/(8+x*x/7-x+y*y/7-y)-4"
    ],
    "into-how-many-pieces-can-you-cut-this-string": [
        "l=input()\nd={}\nfor i in zip(l,l[1:]):d[sum(i)/2.]=0\nfor i,k in zip(l,l[1:]):\n for j in[m for m in d.keys()if min(i,k)<m<max(i,k)]:d[j]+=1\nprint max(d.values())+1",
        "heSmsm&<hSkdgeSkdC,tQQQ",
        "lambda x:max(sum(a-m^a-n<0for m,n in zip(x,x[1:]))for a in x)+1",
        "lambda x:max(sum((a+.5-m)*(a+.5-n)<0for m,n in zip(x,x[1:]))for a in x)+1"
    ],
    "at-least-h-with-at-least-h": [
        "lambda x:sum(a>b for a,b in zip(sorted(x)[::-1],range(len(x))))",
        "i=0\nfor z in sorted(input())[::-1]:i+=z>i\nprint i",
        "f=lambda s,n=0:n<sum(n<x for x in s)and f(s,n+1)or n"
    ],
    "programming-puzzles-code": [
        "s=input()\ni=k=0\nfor c in s:\n if c.isalpha():k+=k+(c<'a');i+=1;s=s.replace('_',chr(k%32+97),i%5<1)\nprint s.lower()",
        "u=input();f=u.find('_');m=''.join([c for c in u if c.isalpha()]);z=[chr(int(''.join(['0'if o.islower() else'1' for o in l]),2)+65)for l in[m[h:h+5]for h in range(0,len(m),5)]if len(l)==5];[z.insert(v,d)for v,d in enumerate(u[f:])if d!=\"_\"];u=list(u);u[f:]=z[:len(u[f:])];print(''.join(u).lower())"
    ],
    "goto-the-nth-page": [
        "lambda p,n:[i for i,j in zip(['prev',1,'...',p-2,p-1,[p],p+1,p+2,'...',n,'next'],[1,3,4,2,1,.1,-n,1-n,3-n,2-n,-n])if p*cmp(j,0)>j]",
        "x,y=input()\ne=\"... \",\"\"\no=(\"Prev 1 \",\"[1] \")[y<2]+e[y<5]\nfor z in range(2,x):o+=(\"\",(`z`,`[z]`)[z==y]+\" \")[y-3<z<y+3]\nprint o+(\"\",e[x-y<4]+(`x`+\" Next\",`[x]`)[y==x])[x>1]",
        "lambda c,l:[\"prev\"]*(c>1)+[range(1,c),[1,\"...\",c-2,c-1]][c>4]+[[c]]+[range(c+1,l+1),[c+1,c+2,\"...\",l]][l-c>4]+[\"next\"]*(c<l)"
    ],
    "eating-skittles-like-a-normal-person": [
        "s=input();[exec(\"print(s);s=s.replace(c,' ',1);\"*s.count(c))for c in'orgy']",
        "def f(s):print s;q=max(s);q>'g'and f(s.replace(q,' ',1))"
    ],
    "monday-mini-golf-6-meeesesessess-upp-teeexexextext": [
        "i=raw_input();s=r='';g=1\nfor c in i:\n s+=c\n if g:r+=c;g=0;s=''\n elif c.isalpha():r+=s*2\n elif '/'<c<':':r+=s\n else:g=1;r+=c\nprint r",
        "f=0\nm=''\nfor i in input():g=i.isalnum();m=m*g*f+i*f;print(end=m*-~i.isalpha()or i);f=g"
    ],
    "implementing-a-stack": [
        "s=[]\nfor x in input():s=([x]+s)[2*0**x:]\nprint s",
        "l = list() \nwhile True:\n    one = int(input())\n    if one<0:\n        break\n    elif one==0:\n        if len(l)>0:\n            l.pop()\n    else:\n        l.append(one)\n\nl.reverse()\nprint(l)",
        "s=[]\nfor x in input():s=(s+[x],s[:-1])[x<1]\nprint s",
        "def f(L,r=[]):\n for n in L:r=[n]+r if n else r[1:]\n return r",
        "def f(p,s=[]):\n for i in p:\n  if i:s+=i,\n  else:s.pop()\n return s",
        "l=input()\nwhile 0in l:i=l.index(0);l[i-1:i+1]=[]\nprint l"
    ],
    "type-uniqchars": [
        "u=[]\ndef t(l):\n if l in u:return''\n else:\n  u.append(l);return l\nprint(''.join([t(l)for l in input()]))",
        "def S(s):\n s=s[::-1]\n for c in s:s=s.replace(c,'',s.count(c)-1)\n return s[::-1]",
        "lambda s:[*dict(zip(s,s))]",
        "lambda s:''.join(i for c,i in enumerate(s)if s.index(i)==c)",
        "s=set();print filter(lambda i:not(i in s or s.add(i)),input())",
        "r=''\nfor c in input():r+=c[c in r:]\nprint(r)",
        "reduce",
        "lambda s:''.join([c for i,c in enumerate(s)if c not in s[:i]])"
    ],
    "is-it-a-pangram": [
        "lambda s:{*map(chr,range(65,91))}<={*s.upper()}",
        "f=lambda s,c=65:c>90or(chr(c)in s.upper())*f(s,c+1)"
    ],
    "yeah-but-no-but-yeah": [
        "def f(n):\n for i in range(n):yield from['Yeah'][i%3:]+['But'][i%2:]+['No'][i%3^1:]",
        "lambda n:[w for i in range(n)for w in'Yeah','But','No'if('N'in w)==i%(3-(w<'N'))]",
        "[print(\"Yeah\\n\"*(i%3<1)+\"But\\n\"*(i%2<1)+\"No\\n\"*(i%3==1),end=\"\")for i in range(int(input()))]",
        "lambda i:''.join('Yeah\\n'*(x%3<1)+'But\\n'*(x%2<1)+'No\\n'*(x%3==1)for x in range(i))",
        "f=lambda n:f(n-1)+'Yeah\\n'*((n-1)%3<1)+'But\\n'*((n-1)%2<1)+'No\\n'*((n-1)%3==1)if n else\"\"",
        "n=10\nprint(''.join(('Yeah\\n'*(i%3==0)+'But\\n'*(i%2==0)+'No\\n'*(i%3==1))for i in range(n)))",
        "lambda n:'\\n'.join(([\"Yeah\\nBut\",\"No\",\"But\",\"Yeah\",\"But\\nNo\"]*n)[:n-n/6])"
    ],
    "is-this-a-function": [
        "lambda x:{*x}>dict(x).items()",
        "i=[j[0] for j in set(input())];print len(set(i))==len(i)",
        "lambda x:len(dict(x))==len(set(x))"
    ],
    "animate-the-text-in-your-terminal": [
        "for x in range(11):s='hello world';print'\\r'+s[:x]+s[x:].capitalize(),;[1for y in' '*8**8]",
        "capitalize()"
    ],
    "lets-draw-some-atari-st-bombs": [
        "f=lambda n:'\\n'.join(''.join(2*' #'[int(d)]for d in bin(int('0c0052000100908023e003e00ff81ffc1ffc3ffe3fde1fdc1fbc0ff807f001c0'[i:i+4],16))[2:].zfill(16))*n for i in range(0,64,4))",
        "x=input()\nfor i in range(16):print\"\".join(\" #\"[b<\"1\"]*2for b in bin(int(\"5ZCAZKAVTP6J04W4VZJ2BQDH5DASIKRS524V8SWRSIVWZEWC8V\",36))[2+i::16]*x)",
        "z=input()\nfor y in 3072,20992,256,36992,9184,992,4088,8188,8188,16382,16350,8156,8124,4088,2032,448:print\"\".join(\" #\"[e>0]*2for e in map(int,bin(y+8**6)[5:]))*z",
        "n=input()\nj=2\nwhile j<258:print''.join(2*'# '[b>'0']for b in bin(int('62XI2JG3U2Q0COCDFCZAMC8A9LAP6W1ZMM4A59GC43M49ENF3Z',36))[j:j+16])*n;j+=16"
    ],
    "alternate-the-case": [
        "x=list(input())\ns=[]\nfor i in x[1::2]:\n s.append(i)\n x.remove(i)\ns.reverse()\nwhile len(x)<len(s):\n x.append(\"\")\nwhile len(x)>len(s):\n s.append(\"\")\nfor i in range(len(x)):\n print(end=x[i]+s[i])",
        "x=0\nfor i in input():print(end=(2*i).title()[x]);x^=i.isalpha()",
        "lambda s:\"\".join([s[i],[s[i].lower(),s[i].upper()][i%2]][s[i].isalpha()]for i in range(len(s)))"
    ],
    "hack-the-elections": [
        "lambda u,t:max(0,(t-u)/14*7+7)",
        "lambda a,b:max((b-a)/14*7+7,0)"
    ],
    "ginormous-number": [
        "print
        "x=r=n=2\nfor c in\"\u001c!NwXv\\erA$x\u001eV\u0013\u001e}G_sT\u0016JBD\u0016R\u0011P\u0019R;V\\!=[u,4\u0002\u001d\u0005bzr\u0005oe_:\\0Ik\u0006 X4;d.d\":n=n<<7|ord(c)\nwhile n:\n x+=1\n if~-2**x%x<2:r*=x**(n%10);n/=10\nprint r",
        "eval(eval('\"19805596543926073442*\"+\"78873566720902235*18013318998359734663*\"*2+\"593140350139852859*8104731785668783073*\"*3+\"6644372255178073982360301*\"*4+\"1353238597766773*12805823735079030233*\"*5+\"6662348615646027385791148837*\"*6+\"13372864637471*7423896006336743*\"*7+\"14127919992957378413027*\"*8+\"74874566303993533*2096862721178836784989*\"*9+\"1\"'))",
        "p=str(int('3ged5xs20knlms4j3eaoxfzn5wdy54rml7sjp9f2pdhuoqdmky310zhxpta29r51libwivktdzfdpr2lcn1',36))\nd=0\nn=W=o=1\nexec('W*=n;n+=1\\nif~-n==W%n:o*=n**int(p[d]);d+=1\\n'*726)\nprint(o)"
    ],
    "sever-sort-an-array": [
        "f=lambda x,*p:x[:1]>p>()and p+f(x)or x and f(x[1:],x[0],*p)or p",
        "def s(l):\n r=[];i=j=0\n while j<len(l)-1:\n  if l[j+1]>l[j]:r+=l[i:j+1][::-1],;i=j+1\n  j+=1\n r+=l[i:j+1][::-1],;return[i for s in r for i in s]",
        "d=input();L=[];x=0;d+=-~d[-1],\nfor i in range(1,len(d)):\n if d[i]>d[i-1]:L+=d[x:i][::-1];x=i\nprint L",
        "b=[];c=[];a+=9e9,\nfor i in a[:-1]:\n b=[a.pop(0)]+b\n if b[0]<a[0]:c+=b;b=[]",
        "a=[int(i)for i in input().split()]\nwhile a!=sorted(a):\n b=[[]]\n for i,j in enumerate(a):\n  if a[i-1]<j:b+=[[j]]\n  else:b[-1]+=[j]\n a=[]\n for l in[k[::-1]for k in b]:a+=[k for k in l]\nprint(a)"
    ],
    "can-pac-man-eat-this-string": [
        "s=raw_input()\np=i=0\nfor c in s:\n p+=(c in'plePLE')-(c in'ghosGHOS')\n if p<0:break\n i+=1\nprint'_'*i+'<'+s[i:]",
        "def f(s):\n    p=c=0\n    for i in s:\n        if i in \"gGhHoOsS\":\n            if p<1:break\n            else:p-=1\n        if i in \"pPeElL\":p+=1\n        c+=1\n    return\"_\"*c + \"<\" + s[c:]",
        "l,x=1,0\nf,y,s=\"ghosGHOS\",\"pelPEL\",input()\nwhile s[x:]*l:l+=(s[x]in y)-(s[x]in f);x+=l>0\nprint(\"_\"*x+\"<\"+s[x:])",
        "def f(s,l=1):l+=(s[:1]in'plePLE')-(s[:1]in'ghosGHOS');return s*l and'_'+f(s[1:],l)or'<'+s"
    ],
    "print-the-f-%c3%97-f-times-table": [
        "r=range(16)\nfor i in r:print(*[('0'+hex(j*i)[2:])[-2:]for j in r])",
        "R=range(16)\nfor i in R:print' '.join('0'*(i*j<16)+hex(i*j)[2:]for j in R)",
        "i=1\nexec\"print' '.join('%02x'%(j-x)*(i>0)for x,j in enumerate(range(0,16*i,i)));i+=1;\"*16",
        "for n in range(256):r=n%16;print'%02x%s'%(n/16*r,r/15*'\\n'),",
        "r=range(16)\nfor x in r:print(*['%02x'%(x*y)for y in r])"
    ],
    "shotgun-numbers": [
        "i=n=input()\nwhile~-i:n+=(n%i<1)*i*(n/i%2*2-1);i-=1\nprint n",
        "g=lambda n,k:n>1and g(n-1,k-(k%n<1)*n*(-1)**(k/n%2))or k\nn=input()\nprint g(n,n)"
    ],
    "ascii-art-of-the-day-1-double-knot": [
        "n=input()\na='/\\/ '*~-n\nb='\\ '+'\\/\\ '*~-n+'\\\\'\nc='\\n| '+a+'/\\ |\\n| \\/ '+a+'|'\nprint'\\n '.join(('  __'*n,'/  \\\\'*n+c,b+'/','/'+b+c,'\\__/'*n))",
        "n=input()\nfor i in range(9):w=' ?|'[i&2];s=' / /\\/ /\\_ /\\ \\/\\__ \\/\\ \\/_ \\/ /\\/ /'[i::9]*n;s=(s,' %s '%s[1:-1])[i%4>1];print w+s+w"
    ],
    "count-down-from-infinity": [
        "x=int.from_bytes(bytes(input(),'utf-8'),'big')\nwhile x:print(x);x^=2**x.bit_length()-1\nprint(0)",
        "n=0\nfor c in input():n=n<<8|ord(c)\nwhile 1:print n;n^=2**n.bit_length()-n/n"
    ],
    "name-your-novel-disease": [
        "lambda a,b,c,d:g(*a)+g(*b)+c[0]+\"-\"+d[2:]\ng=lambda c,*s:c[:c in\"aeiou\"]or c+g(*s)",
        "a,b,c,d=input().split()\ndef g(a):\n for i in a:\n  if i in'aeiou':return a[:a.find(i)+1]\nprint(g(a)+g(b)+c[0]+'-'+d[2:])"
    ],
    "stack-overflowing": [
        "def f(h,n):print('\\|/'[:max(0,n-h)]+'\\n'+'\\n'.join('(-)-'if h<n-x-3else('(-)','( )')[x+n<h] for x in range(h)))",
        "def f(h,n):\n print\" \\|/\"[:max(0,n-h+1)]\n for i in range(h):print(\"(-)\",\"( )\")[h-i>n]+\"-\"*(n>i+h+3)"
    ],
    "connect-the-pixels": [
        "#encoding:utf-8\nf=lambda t:(lambda l,s:'\\n'.join(''.join((u'\u253c\u251c\u2524\u2502\u252c\u250c\u2510\u2502\u2534\u2514\u2518\u2502\u2500\u2500\u2500#'[(s==l[i][j-1])+2*(s==l[i][j+1])+4*(i<1 or s==l[i-1][j])+8*(i>len(l)-2 or s==l[i+1][j])],s)[s==l[i][j]]for j in range(len(l[i])-1))for i in range(len(l))))([l+' 'for l in t.split('\\n')],' ')",
        "def f(s):S=' ';w=s.find('\\n')+1;t=lambda i:(s+w*S)[i]>S;return[[c,'#\u2502\u2500\u2518\u2500\u2514\u2500\u2534\u2502\u2502\u2510\u2524\u250c\u251c\u252c\u253c'[t(p-w)+2*t(p-1)+4*t(p+1)+8*t(p+w)]][c>S]for p,c in enumerate(s)]"
    ],
    "lever-simulator-2015": [
        "lambda s:cmp(sum(ord(c)%16*(i-s.find('^'))for i,c in enumerate(s)),0)",
        "r=0\nI=list(input())\np=I.index(\"^\")\ni=0\nfor E in I:\n if E.isdigit():r+=int(E)*(p-i)\n i+=1\nprint('BLR'[(r>0)-(r<0)])"
    ],
    "better-hex-color-codes-for-your-internet": [
        "z=zip\nlambda s:'#'+''.join([reduce(lambda x,y:x+y,c)for c in['0'*6,s[1:2]*6,z(s[1:2],s[2:3])*3,z(*z(s[1:2],s[2:3],s[3:4]))*2,z(s[1:4],s[-1]*3),s+s[-1],s][len(s)-1]])",
        "n=raw_input()                                #prompts for string\nt=len(n)                                     #the length of the string is stored to 't'\nif t==1:n+=\"0\"*6                             #if t is only one char long, it needs to be black, so n is assigned 6 zeroes\nif t==2:n+=n[1]*5                            #if t is two chars long, it adds the last character times 5 at the end\nif t==3:n+=n[1:3]*2                          #if t is 3 chars, it multiplies the last two digits times 3\nif t==4:n=\"#\"+n[1]*2+n[2]*2+n[3]*2           #if t is 4 chars, it multiplies each char by two\nif t==5:n=n[:2]+n[4]+n[2]+n[4]+n[3]+n[4]     #if t is 5 chars, it makes it work\nif t==6:n+=n[t-1]                            #if t is 6 chars, it adds the last character to the end\nprint n                                      #it prints out n",
        "def a(s):s=s[1:]or'0';l=len(s);print('#'+(l/4*s[-1]).join(i+i*(l==3)for i in(l<5)*6*s)+s+s[-1])[:7]"
    ],
    "draw-diagonal-lines-of-text": [
        "s=input()\nk=max(map(len,s))\na=[k*[' ']for x in range(k+len(s)*3+3)]\nfor x in range(len(s)):\n for y in range(len(s[x])):a[x*3+y][y]=s[x][y]\nprint a",
        "def f(s):\n M=max(map(len,s));p=' '*M;L=[p]+s+M*[p];r='';k=0\n while k/M<len(s)*3+M:\n  i=k%M;w=k/M-i+1;r+=(L[(w/3+1)*(w%3==1)]+p)[i];k+=1\n  if i==M-1:r=r.rstrip()+'\\n'\n return r.strip()"
    ],
    "product-over-a-range": [
        "def p(a,b):\n t=1\n for i in range(a,b):t*=i\n return t",
        "f=lambda a,b:b<a or a*f(a+1,b)",
        "lambda l:reduce(int.__mul__,range(*l))",
        "f=lambda a,b:a>b or a*f(a+1,b)"
    ],
    "hack-into-a-lottery": [
        "int('3'*(35-3),7-3)",
        "~-(~-3<<9*7)",
        "(5-3)**ord('@')-3**0",
        "print~-(5-3)**(97-33)",
        "~0^~0>>~077"
    ],
    "is-this-number-a-factorial": [
        "f=lambda n,i=1:n>1and f(n/i,i+1)or n<1",
        "f=lambda n,i='1':n<2or(eval(i)==n if eval(i)>=n else f(n,i+'*%d'%(int(i.split('*')[-1])+1)))",
        "n,x=input(),1.\nwhile n>1:x+=1;n/=x\nprint n<1",
        "lambda n,t=1:n in[t:=t*i for i in range(1,n+1)]"
    ],
    "draw-a-sierpinski-triangle": [
        "x=[0]*63\nx[31]=1\nexec\"print'%d'*63%tuple(x);x=[a^b for a,b in zip(x[1:]+[0],[0]+x[:-1])];\"*32",
        "x=' '*31\nx+='.'+x\nexec\"print x;x=''.join(' .'[x[i-1]!=x[i-62]]for i in range(63));\"*32"
    ],
    "cover-up-zeroes-in-a-list": [
        "while 1:x=input()or x;print x",
        "g=lambda l,s=0:l and[a:=l[0]or s]+g(l[1:],a)"
    ],
    "output-integers-in-negative-order-increase-the-maximum-integer-everytime": [
        "r=s=''\nn=0\nexec'n+=1;s=`n`+s;r+=s;'*input()\nprint r",
        "f=lambda n:n and f(n-1)+\"\".join(map(str,range(n,0,-1)))or\"\"",
        "print[[a for a in range(b+1,0,-1)]for b in range(input())]",
        "n=input()\ni=0\no=\"\"\nwhile i<n:\n    i+=1;j=i\n    while j:o+=`j`;j-=1\nprint o",
        "lambda n:\"\".join([\"\".join([str(i)for i in range(1,k)][::-1])for k in range(1,n+2)])",
        "r=''.join;lambda b:r([r([`i`for i in range(1,a+1)][::-1])for a in range(1,b+1)])"
    ],
    "bit-run-rundown": [
        "f=lambda n,r=1:max(r,n and f(n/2,1+~-n/2%2*r))",
        "f=lambda n,k=1:`k`in bin(n^n/2)and-~f(n,k*10)",
        "a=lambda n:n and max((n&-n|~n&-~n).bit_length()-1,a(n/2))"
    ],
    "is-this-word-lexically-ordered": [
        "lambda a:sorted(a)in([*a],[*a][::-1])",
        "lambda a:`sorted(a)`[2::5]in(a,a[::-1])"
    ],
    "concatenating-n-with-n-1": [
        "f=lambda n:n-1and f(n-1)+[`n-1`+`n`]or[1]",
        "a=0\nexec\"print`a`[:a]+`a+1`;a+=1;\"*input()",
        "f=lambda n:1//n or f'{f(n-1)} {n-1}{n}'",
        "f=lambda n:n-1and f(n-1)+[f\"{n-1}{n}\"]or[1]",
        "lambda l:[`n`[:n]+`n+1`for n in range(l)]",
        "lambda i:[1]+[`x`+`x+1`for x in range(1,i)]",
        "for i in range(input()):print`i`*(i>0)+`i+1`",
        "def a(n):\n    for e in range(n):\n        print int(`e`+`e+1`)",
        "lambda n:[f\"{j or''}{j+1}\"for j in range(n)]"
    ],
    "nth-term-of-van-eck-sequence": [
        "f=lambda n,i=1,l=[0]:f(n,i+1,l+[l[i-2::-1].index(l[-1])+1if l[-1]in l[:-1]else 0])if n>i else l[-1]",
        "f=lambda n,i=1:n>i and[f(n,i+1),i][f(n-1)==f(n+~i)]",
        "a=[0]\nfor _ in a*int(input()):k=a[-1];a+=k in a[:-1]and[a[::-1].index(k)+~a[-2::-1].index(k)]or[0]\nprint(-a[-2])",
        "f=lambda n,l=0,*s:f(n-1,l in s and~s.index(l),l,*s)if n else-l"
    ],
    "count-without-3": [
        "f=lambda x:'3'[:~x%3]in`~x`and f(x+1)or-~x",
        "x=~input()\nwhile'3'[:x%3]in`x`:x-=1\nprint-x"
    ],
    "if-a-b-be-in-a-b-a-else-b-eh": [
        "lambda*s:s[min(s)<=s[1]-s[0]<=max(s)]",
        "lambda A,B:[B,A][A-B in range(min(A,B),max(A,B)+1)]",
        "lambda a,b:[a,b][2*b*b>a*b]"
    ],
    "output-the-first-position-in-your-program-for-each-input-character": [
        "a=\" )dfi(+m,nprut.';\";print map(('a=\"'+a).find,input())",
        "c='print map((\"c=%r;ex\"%c).find,input())';exec c",
        "a,b,d=\" ()+.7:[]efilmnor\",\"a,b,d=\\\"\",lambda e:[[b.find(d),a.find(d)+7][d in a]for d in e]"
    ],
    "split-string-on-first-occurrence-of-each-character": [
        "lambda s:reduce(lambda r,c:r+'\\n'[c in r:]+c,s)",
        "def f(s):d=sorted(map(s.find,set(s)));print map(lambda a,b:s[a:b],d,d[1:])"
    ],
    "the-prime-frog": [
        "f=lambda n:n*(n&-17==3)or f(n-max(k*all(n%k<k%j for j in range(2,k))for k in range(n+1))or 2*n-1)",
        "f=lambda n,i=2,k=0:i/n and(n*(n&~16==3)or f((2*i-1,k-i)[k>0]))or n%i and f(n,i+1,k)or f(n/i,2,k or n)",
        "n=input()\nwhile~16&n-3:\n f=n;i=2\n while i<f:\n\tif f%i:i+=1\n\telse:f/=i\n n-=[1-n,f][f<n]\nprint n"
    ],
    "a-bit-a-nibble-or-byte": [
        "f=lambda n:4**(n>1)*(n<16)or 2*f(n**.5)",
        "lambda n:[w for w in[1,4,8,16,32,64]if n<2**w][0]"
    ],
    "draw-a-bowling-formation": [
        "def f(x):\n for i in 4,3,2,1:print\" \"*(4-i)+\" \".join(\".O\"[i*~-i/2-~z in map(int,x.split())]for z in range(i))",
        "lambda a:u\"7890\\n 456\\n  23\\n   1\".translate({ord(n):u'.O'[n+' 'in a+' ']+' 'for n in`9**99`})"
    ],
    "make-a-word-icicle": [
        "f=lambda a:[*a.strip()]and[a]+f(a.replace(min(a.replace(*\" ~\")),\" \",1))",
        "x=input()\nwhile x.strip():print x;r=x.replace;x=r(min(r(*' ~')),' ',1)",
        "def f(s):print s;S=set(s)-{' '};S and f(s.replace(min(S),' ',1))",
        "a=input()\nwhile len(a)-a.count(' '):print(a);a=a.replace(sorted(a.replace(' ',\"\"))[0],' ',1)"
    ],
    "implement-the-ios-11-calculator": [
        "lambda*a:sum(a)+18*(sorted(a)==[1,2,3])",
        "lambda*a:sum(a)*4**(sorted(a)==[1,2,3])"
    ],
    "zigzagify-a-matrix": [
        "lambda N,w,h:[N[i*w+s-i]for s in range(w+h+1)for i in range(h)[::s%2*2-1]if-1<s-i<w]",
        "e=enumerate\nlambda s:[k for j,i in e(zip(*[([0]*n+i+[0]*len(s))for n,i in e(s)]))for k in i[::j%2*2-1]if k]"
    ],
    "summon-the-sevens": [
        "def f(a,R=range):\n for b,n in sorted((bin(i).count('1'),i)for i in R(512)):\n  c=[[a[i],7][n>>i&1]for i in R(9)]\n  if len({(sum(c[3*i:3*i+3]),sum(c[i:9:3]))for i in R(3)})<2:return b",
        "lambda l:min(i.count(7)for j in range(512)if 2>len({sum((i:=[(7,L)[M<'1']for L,M in zip(l,f'{j:9b}')])[k%7::k//6])for k in[-5,6,21,22,23]}))"
    ],
    "hexadecimal-and-the-alphabet": [
        "def f(n):h=hex(n)[2:];return h if h.isdigit()else f(int(''.join(map(lambda x:chr((ord(x)-47)%48+47),h))))",
        "def d(n):n=hex(int(n))[2:];return n.isdigit()and n or d(str([ord(c)%12for c in n])[1::3])"
    ],
    "translate-numbers-to-french": [
        "f=lambda x:[`x`*(x%100<70),'10+'+`x-10`][16<x<20]or['60+'+f(x-60),'4*20'+x/81*('+'+f(x-80))][x/80]",
        "f=lambda x:79<x<100and('4*20'+('+'+f(x-80))*(x>80))or 69<x<100and'60+'+f(x-60)or 16<x<20and'10+'+`x-10`or`x`",
        "m,r=map,range;l=[*r(1,17),*m(\"10+{}\".format,(7,8,9))];f=[0,*l,*r(20,61),*m(\"60+{}\".format,l),\"4*20\",*m(\"4*20+{}\".format,l),100]"
    ],
    "fgx-decreases-while-gfx-increases": [
        "f=lambda x:(1-x%2*2)*(2*x*x+(x<0))\ng=lambda x:(1-x%2*2)*(2*x*x+(x>0))",
        "f=lambda x:x*(-1)**x\ng=lambda x:3*f(x)+1"
    ],
    "does-this-foo-machine-halt": [
        "def f(a):\n\ts={0,};i=0\n\twhile{(*a,)}-s:s|={(*a,)};a[i]*=-1;i-=a[i];i%=len(a)\n\treturn a[i]==0",
        "def f(x):\n for i in range(2**len(x)):a=x[0];x[0]=-a;b=a%len(x);x=x[b:]+x[:b]\n return a==0"
    ],
    "run-stackylogic": [
        "def f(p):\n i=p[:p.find(\"<\")].count(\"\\n\");p=p.split()\n try:\n  while 1:*p[i],c=p[i];c=c>\"<\"and input()or c;i+=c<\"<\"and int(c)*2-1\n except:return c",
        "def s(f,z):\n p=b=\"\";g=0;a=[];n=a.append;n(p)\n for i in f:\n  if i==\"\\n\":n(p);p=''\n  else:p+=i\n n(p);p=b;n(p)\n while g<len(a):\n  if'<'in a[g]:q=g;a[q]=a[q][:-1]\n  g+=1\n while 1:\n  v=a[q]\n  if v=='':print(b);break\n  if v[-1]=='1':a[q]=v[:-1];q+=1;b=1\n  elif v[-1]==\"0\":a[q]=v[:-1];q-=1;b=0\n  else:a[q]=v[:-1]+z[0];z=z[1:]"
    ],
    "electrons-bouncing-in-a-wire": [
        "n=input()\np=l=1\nt=1\nh=2\nwhile t!=h:\n if p==l:t,l,p=h,0,p*2\n h=h/2^h*2%2**n;l+=1\nprint l",
        "Q=input()\nh=[]\nn=[0,1]+Q*[0]\nwhile n not in h:h+=[n];n=[0]+[n[d]^n[d+2] for d in range(Q)]+[0]\nprint len(h)-h.index(n)",
        "f=lambda n,k=1,l=[]:k in l and-~l.index(k)or f(n,k/2^k*2%2**n,[k]+l)"
    ],
    "enumerate-valid-brainfk-programs": [
        "def f(s,o=0,d=0,D={}):T=s,o,d;x=D[T]=D[T]if T in D else~o and 0**o+sum(f(s[1:],cmp(c,\"[\")%-3-~o,d or cmp(c,s[0]))for c in\"+,-.<>[]\")if s else~d<0==o;return+x",
        "c=d=C=D=0\nfor e in input():v='[<>,.-+]'.find(e);d=d*8+v;c+=c<0<6<v;c-=d>1>v;C,D=(c,C+1,d,D)[v>6::2]\nprint(-~D*8**C)"
    ],
    "create-a-program-that-prints-the-number-of-characters-it-has-in-words": [
        "print(\"twenty\")#lol.",
        "print'ten'",
        "exit(\"fifteen\")",
        "print(\"sixteen\")"
    ],
    "halloween-golf-the-2spooky4me-challenge": [
        "lambda n:f'{n}spooky{n+2}me'",
        "lambda n:\"%dspooky%dme\"%(n,n+2)",
        "lambda x:f'{x}spooky{x+2}me'"
    ],
    "construct-the-identity-matrix": [
        "'\\n'.join()",
        "def M(n):\n x=[]\n for i in range(n):\n  r=[]\n  for j in range(n):\n   r+=[1 if i==j else 0]\n  x+=[r]\n return x",
        "y=x=2**input()\nwhile~-x:x/=2;print str(bin(y+x))[3:]",
        "lambda n:zip(*[iter(([1]+[0]*n)*n)]*n)[:n]"
    ],
    "is-this-number-evil": [
        "f=lambda n:n<1or n&1^f(n/2)",
        "lambda n:sum(int(d)for d in str(bin(n))[2:])%2",
        "^(((?=(((x*)(?=\\5$))*))\\3x){2})*$",
        "lambda n:~bin(n).count('1')&1",
        "def h(s): \n    f=len(bin(s)[2:].replace(\"0\",\"\"))\n    if f%2==0:print(f%2==0)",
        "print(bin(int(input())).count('1')%2<1)",
        "lambda n:bin(n).count('1')%2<1",
        "lambda n:int(bin(n),13)%2"
    ],
    "full-width-text": [
        "print(*input(),'')",
        "i=input();j=''.join;print(j([j(z)for z in zip(i,' '*len(i))]))",
        "lambda x:' '.join(x)+' '",
        "print(' '.join(input())+' ')",
        "print(\"\".join([x+\" \"for x in input()]))"
    ],
    "draw-an-ascii-chess-board": [
        "print('rnbqkbnr\\n'+'p'*8+('\\n'+'.'*8)*4+'\\n'+'P'*8+'\\nRNBQKBNR')",
        "for r in['rnbqkbn',*'p....P','RNBQKBN']:print((r*8)[:8])",
        "print'rnbqkbnr\\npppppppp\\n'+('.'*8+'\\n')*4+'P'*8+'\\nRNBQKBNR'",
        "x,y,z=\"rnbqkbnr\\n\",\"p\"*8+\"\\n\",\".\"*8+\"\\n\";print x,y,4*z,(y+x).upper()",
        "print(*[\"rnbqkbnr\",\"p\"*8]+[\".\"*8]*4+[\"P\"*8,\"RNBQKBNR\"],sep=\"\\n\")",
        "print('rnbqkbnr','p'*8,('.'*8+'\\n')*4,'P'*8,'RNBQKBNR',sep='\\n')",
        "print('\\n'.join((i*8)[:8]for i in'rnbqkbn p . . . . P RNBQKBN'.split()))",
        "n='\\n'\np,a='p'*8+n,'rnbqkbnr'+n\nprint a+p+('.'*8+n)*4+(p+a).upper()",
        "print(\"rnbqkbnr\",\"p\"*8,*[\".\"*8]*4,\"P\"*8,\"RNBQKBNR\",sep='\\n')",
        "print('rnbqkbnr','p'*8,*['.'*8]*4,'P'*8,'RNBQKBNR',sep='\\n')",
        "print\"\\n\".join([\"rnbqkbnr\",\"p\"*8]+[\".\"*8]*4+[\"P\"*8,\"RNBQKBNR\"])",
        "t=\"rnbqkbnr\"\nn=\"\\n\"\nprint((t)+n+(\"p\"*8)+n+((\".\"*8+\"\\n\")*4)+n+(\"P\"*8)+n+(t.upper()))"
    ],
    "translate-ooo-code": [
        "b=1\nfor c in input():\n b=-~c.isalpha()*b+c.isupper()\n if b>7:print(end=\"><[]-+.,\"[b-8]);b=1",
        "''.join('><[]-+.,'[int('%d'*3%tuple(map(str.isupper,y)),2)]for y in zip(*[iter(filter(str.isalpha,input()))]*3))"
    ],
    "create-a-square-of-increasing-size-by-replicating-the-initial-code": [
        "False+=1      ;print'*'*False;",
        "i=0;i+=1; i\nprint'*'*i",
        "id='%s@'%id  ;print id[22:];"
    ],
    "implement-malbolges-crazy-operator": [
        "f=lambda a,b,A='':f(a/3,b/3,'100102221'[a%3+b%3*3]+A)if a+b else int(A.rjust(10,'1'),3)",
        "f=lambda a,b,i=9:i+1and(a%3+b%3*5+2)**4%25%3+f(a/3,b/3,i-1)*3"
    ],
    "merge-two-values": [
        "a=>b=>a*b&2?0:a|b",
        "lambda i,j:(i|j,0)[0<i!=j>0]",
        "lambda a,b:(0in(a,b)or a==b)*(a|b)",
        "lambda x,y:(x|y)>>(x*y&2)",
        "lambda a,b:0==a*b*(a-b)and a|b",
        "lambda a,b:(0 if a*b else a+b)if a-b else a"
    ],
    "is-this-number-loeschian": [
        "lambda n:any(n==i*i%n+i/n*(i/n+i%n)for i in range(2*n*n))",
        "lambda n:0in[(n-3*i*i+0j)**.5%1for i in range(n)]",
        "lambda k,r=range:any(i*i+j*j+i*j==k for i in r(k+1)for j in r(k+1))"
    ],
    "french-license-plates": [
        "lambda n:h(n//676)+f\"-{n%1000:03}-\"+h(n)\nh=lambda x:'%c%c'%(x//26000%26+65,x//1000%26+65)",
        "i,t,u,v,a,c,f=int(input()),1000,676,26,ord('A'),chr,lambda x:c(a+x//v)+c(a+x%v)\nm,n=i%t,i//t\ne,o=n%u,n//u\nprint('-'.join([f(o),(3-len(str(m)))*'0'+str(m),f(e)]))",
        "lambda n:g(n/676000)+'-%03d-'%(n%1000)+g(n/1000)\ng=lambda n:chr(65+n/26%26)+chr(65+n%26)",
        "lambda n:f\"%c%c-{n%1000:03}-%c%c\"%(*(65+n//1000//26**i%26for i in[3,2,1,0]),)"
    ],
    "reverse-polish-notation": [
        "s=[1,1]\nfor i in raw_input().split():b,a=map(float,s[:2]);s[:2]=[[a+b],[a-b],[a*b],[a/b],[i,b,a]][\"+-*/\".find(i)]\nprint s[0]",
        "def f(s):\n try:x=s.pop();r=float(x)\n except:b,s=f(s);a,s=f(s);r=[a+b,a-b,a*b,b and a/b]['+-*'.find(x)]\n return r,s\nprint f(raw_input().split())[0]",
        "s=[]\nfor x in input().split():\n try:s+=float(x),\n except:o='-*+'.find(x);*s,a,b=s;s+=(a+b*~-o,a*b**o)[o%2],\nprint(s[0])",
        "s=[2,2]\nfor c in input().split():\n    a,b=s[:2]\n    try:s[:2]=[[a+b,b-a,a*b,a and b/a][\"+-*/\".index(c)]]\n    except:s=[float(c)]+s\nprint(s[0])"
    ],
    "polyglot-anagrams-cops-thread": [
        "def e(X):return X*X\nprint e(input())##",
        "i=input();s=1/(801**.5-28);a=[0,1]\nfor p in range(i):a+=[a[-2]+a[-1]*int(s)];s=1/(s-int(s))\nprint a[i]#,,,.//000fhlmo|",
        "o=input()\nv=0\ni=1\nwhile o:\n v+=i\n i+=1\nprint v\n\n\n#|  d00->1@@@++-^,,[",
        "Y=input(\"\");print`Y**4`,X",
        "if 1:\n    if 1:\n        print( '1' )",
        "<({({})({}[()])}{}))()()()turpentine/\"*\"*4splint>",
        "print(input()**(1+1))\n\"'10\u00b03\u00a2','m'\"",
        "print(lambda u:u&u<<1)(input())>>1",
        "i=int(input());s=pow(801.0,0.5);a=[0|0,1]\nfor Moshprtflmah in range(i):s=1./(s%1);a+=[a[-2]+a[-1]*int(s)];\nprint(a[i])",
        "n=input();print((3+2)*n*n+~0*6*n+1)*n/3;            +6;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+7+7+7+7+7+7+7+7+7;+++++++++++++++9+9*9*9"
    ],
    "lets-play-tennis": [
        "s='-','|'+' '*7,'-','|   ','x'\nfor i in s+s[3::-1]:print(i*9)[:9]",
        "a,b,c='-'*9,'|       |','|   |   |'\nfor e in[a,b,a,c,'x'*9,c,a,b,a]:print e",
        "d=b,a,c='|       |','-'*9,'|   |   |'\nprint(a,*d,'x'*9,c,a,b,a,sep='\\n')",
        "for i in 0,7,0,3,-2,3,0,7,0:print(('-?x|'[i%4]+' '*i)*9)[:9]"
    ],
    "define-a-function-f-such-that-ffn-n-for-all-non-zero-integers-n": [
        "| 0.5-x   if x is in Q \\ Z\nf(x) = |\n       | x+0.5   if x is in Z",
        "f=lambda n:(n>0)-(n<0)-n*(-1)**n",
        "f(n) == n"
    ],
    "am-i-an-engineer": [
        "def f(x):s=x in('ALAKAZARCACOCTDEFLGAHIIDILINIAKSKYLAMEMDMAMIMNMSMOMTNENVNHNJNMNYNCNDOHOKORPARISCSDTNTXUTVTVAWAWVWIWY'[i:i+2]for i in range(0,100,2));o=x=='OR';q=(1-o)*(1-s);return q*'What is'+(1-q)*('I am'+o*' not')+' an engineer'+q*'?'",
        "c=\"uTXnMSCORIDEwVAKYmTNHILfLAZpALmNEmOKSDwINCARmEwAnJnDmAmIAgAwYcTnVToHnYmD\"\nr=(lambda x:x in c or x[0].lower()+x[1]in c)(i)^1\nu=\"What is \"*r+(\"I am \"+\"not \"*(i==\"OR\"))*(r^1)+\"an engineer\"+\"?\"*r",
        "lambda i:['What is an engineer?','I am '+'not '*(i>'OR')+'an engineer'][i in'AL&AK&AZ&AR&CA&CO&CT&DE&FL&GA&HI&ID&IL&IN&IA&KS&KY&LA&M&MD&MA&MI&MN&MS&MO&MT&NE&NV&NH&NJ&NM&NY&NC&ND&OH&OK&OR&PA&RI&SC&SD&TN&TX&UT&VT&VA&WA&WV&WI&WY']",
        "lambda s,e=' an engineer':'I am'+' not'*(s=='OR')+e if re.match('.*%s[A-Z]*%s[A-Z]*[a-z]'%(s[0].lower(),s[1]),'aLKZRcAOTdEfLgAhIiDLNAkSYlAmEDAINSOTnEVHJMYCDoHKRpArIsCDtNXuTvTAwAVIYz')else'What is%s?'%e",
        "o=('What is%s?','I am'+' not'*(i=='OR')+\"%s\")[i in'MINCALA MSCTNMNVAKY WAZ PAR FL GA NHID COKSD ME MDE MA MTX NE NJ NY ND MOH ORIA UT WVT WIL WY']%' an engineer'",
        "def f(s):e=\" not\"*(s==\"OR\")+\" an engineer\";return\"I am\"+e if s in\"PALAKSCAZ CTNMINCOR FL GA MDE ME MND MA MSD MOKY NE NH NJ NY WA OHID UTX MTNVARIA WIL WVT WY\"else\"What is\"+e+\"?\"",
        "lambda s,e=' an engineer':'I am'+' not'*(s=='OR')+e if s in'MINCALAZ SCT FL GA WIAKSD ME MD MA MNMS MOKY MTNE NVTX NH NJ NY ND COHIDE OR PARIL UT VA WA WV WY'else'What is%s?'%e",
        "lambda s:'I am not'+e if s=='OR'else'I am'+e if s in'MINCALA MSCTNMNVAKY WAZ PAR FL GA NHID COKSD ME MDE MA MTX NE NJ NY ND MOH RIA UT WVT WIL WY'else'What is%s?'%e\ne=' an engineer'",
        "lambda s:('What is%s?','I am'+' not'*(s=='OR')+'%s')[s in'MINCALA MSCTNMNVAKY WAZ PAR FL GA NHID COKSD ME MDE MA MTX NE NJ NY ND MOH ORIA UT WVT WIL WY']%' an engineer'"
    ],
    "levenshtein-distance": [
        "l=lambda a,b:min(l(A:=a[1:],B:=b[1:])-(a[0]==b[0]),l(A,b),l(a,B))+1if b>\"\"<a else len(a+b)",
        "def l(s,t):\n def f(m,n):\n  if m*n<1:return m or n\n  return 1+min([f(m-1,n),f(m,n-1),f(m-1,n-1)-(s[m-1]==t[n-1])])\n return f(len(s),len(t))",
        "2 x len(word_2)+1",
        "l=lambda a,b:b>\"\"<a and min(l(a[1:],b[1:])+(a[0]!=b[0]),l(a[1:],b)+1,l(a,b[1:])+1)or(a!=b)*len(a+b)",
        "def l(s,t):f=lambda m,n:m or n if m*n<1else-~min(f(m-1,n),f(m,n-1),f(m-1,n-1)-(s[m-1]==t[n-1]));print f(len(s),len(t))"
    ],
    "print-invisible-text": [
        "exec'print;'*len(input())",
        "print(' '*len(input()))",
        "lambda s:' '*len(s)"
    ],
    "scream-very-loudly": [
        "while 1:print'\\bA',",
        "while 1:print(end='A')"
    ],
    "fibonacci-reversed": [
        "f=lambda n,a=0,b=1:n^a and-~f(n,b,a+b)",
        "g=lambda n:n>.7and-~g(n/1.61)",
        "lambda n:len(str(66*n**6))//1.24"
    ],
    "an-abundance-of-integers": [
        "lambda n:sum(i*(n%i<1)for i in range(1,n))>n",
        "n=k=j=input()\nwhile~k<0:j-=1;k-=j>>n%j*n"
    ],
    "shift-right-by-half-a-bit": [
        "lambda x:x//2**.5",
        "lambda x:int(x/2**.5)"
    ],
    "can-you-outgolf-me-robbers-section": [
        "g=lambda n:n<2or-~sum(map(g,range(n)))/3",
        "g=lambda n,c=1:+(n==0 or n>0<g(n-c,c+1))",
        "f=lambda n:0**n or(4*n-2)*f(n-1)",
        "f=lambda n,k=1:n and-~f(n-(k+(k&-k)&k>0),k+1)",
        "G=lambda n:+(n<1)or(2*n-1)**2*G(n-1)",
        "lambda n:n*-~n>>1",
        "s=(n)->0|r<0||Array(0|(n/9)+2).join ((n-1)%9+1)+''"
    ],
    "am-i-an-insignificant-array": [
        "lambda a:all(-2<a[i]-a[i+1]<2for i in range(len(a)-1))",
        "lambda k:all(-2<x-y<2for x,y in zip(k,k[1:]))",
        "x=input()\nwhile-2<x.pop(0)-x[0]<2:1",
        "lambda l:all(abs(j-i)<=1 for i,j in zip(l,l[1:]))",
        "f=lambda n,*t:t==()or-2<n-t[0]<=1==f(*t)"
    ],
    "extendify-the-ascii-sun": [
        "def f(n):\n s,b,e,d,g=' \\\\/|-';p,r,i='',int(n),0\n while r:print(s*i+b+s*(r-1)+d+s*(r-1)+e);r-=1;i+=1\n print(g*n+'O'+g*n);r+=1;i=n-1\n while r<n+1:print(s*i+e+s*(r-1)+d+s*(r-1)+b);r+=1;i-=1",
        "n=input()\nR=range(-n,n+1)\nfor i in R:print''.join(\"O\\|/ -\"[[R,i,0,-i,j].index(j)^(i==0)]for j in R)",
        "s,q,x=' ','',int(input())\nfor i in range(x):d=(x-i-1);q+=(s*i+'\\\\'+s*d+'|'+s*d+'/'+s*i+'\\n')\nprint(q+'-'*x+'O'+'-'*x+q[::-1])"
    ],
    "weapons-of-math-instruction": [
        "i=10\nfor n in input():exec'r%s=n'%'*+-*/*'[i::5];i=-~i%5\nprint r",
        "f=lambda x:eval('('*(len(x)-1)+'){}'.join(map(str,x)).format(*['+','-','*','/','**']*len(x)))"
    ],
    "the-ackermann-function": [
        "a=lambda m,n:m and a(m-1,n and a(m,n-1)or 1)or-~n",
        "A=lambda m,n:m and A(m-1,n<1or A(m,n-1))or-~n"
    ],
    "check-if-a-uuid-is-valid-without-using-regexes": [
        "def a(i):\n try:l=[1+int(k,16)and(len(k)==c)for k,c in zip(i.split(\"-\"),[8,4,4,4,12])];return(len(l)==5)&(0 not in l)\n except:return 0",
        "lambda u:(set(u)<=set(\"-0123456789abcdefABCDEF\"))*map(len,u.split(\"-\"))==[8,4,4,4,12]",
        "def f(u):\n try:u=u.split()[0];int(u.replace('-',''),16);print[8,4,4,4,12]==map(len,u.split('-'))\n except:print 0"
    ],
    "how-does-math-work-in-anastasiyas-world": [
        "def r(s):\n n=str(eval(s));c=0\n while n[1:]:exec(\"n=str(reduce(lambda a,b:a%sb,map(int,list(n))))\"%\"*+\"[\"+\"in s]);c+=1\n return n,c",
        "g=lambda x,o,i=1:x<10and[x,i]or g(eval(o.join(`x`)),o,i+1)\nlambda a,o,b:g(eval('%s'*3%(a,o,b)),o)",
        "f=lambda s,c=0:s[1:]and f(min(s).join(`eval(s)`),c+1)or(s,c)"
    ],
    "find-the-first-duplicated-element": [
        "def f(a):\n r=-1\n for i in range(len(a)):t=abs(a[i])-1;r=[r,i+1][a[t]<0>r];a[t]*=-1\n return r",
        "a,i,k=input(),0,[]\nwhile 1:\n\tif i==len(a):print-1;break\n\telif a[i]not in k:k+=[a[i]]\n\telse:print a[i];break\n\ti+=1",
        "lambda l:l[map(l.remove,set(l))<0]",
        "f=lambda l,i=0:l[i]if l[i]in l[:i]else f(l,i+1)",
        "a=input()\ni=0\nfor x in a:\n if i&1<<x:print x;break\n i^=1<<x"
    ],
    "the-first-published-picture-of-the-mandelbrot-set": [
        "lambda:a+['*'*64]+a[::-1]\nD=2**31\na=[f'{y:68b}'.translate(' *'*25)for y in[4**7,30<<12,63<<12,31<<12,3143680,125828992,33554412,D//8-8,D//4-2,D-1,D-2,6082*D-1,16378*D-1,32766*D-2,458750*D-4]]",
        "print\"x\\xda\\xbd\\x94\\xa1\\x15\\x001\\x0c\\x85|\\xa7@\\xb3\\xff\\x80'\\xbf\\x0e\\xe2\\xf0\\xf0\\xfa\\xda4\\x14|E\\xd2\\xe2i\\x14)\\xa2\\xa8\\x1eM\\x9dv\\xb7\\x99\\xeb@_\\xf4\\xc7\\x0b\\x81\\xd6p\\xf4Hl\\x88\\xaaK\\x84\\x88#G\\x1c\\xca\\xbd\\xa1xi<;\\xfd\\x0c\\xfd*\\xfe\\x7f\\x93>\\x1d}LC\\xe3\\xff\\x8f\\x1b\\xd6G\\x88\\xf0\\xe7\\x12\\xad\\xcb{T\\xd1*R=\\xf0\\x03-<\\x12|\".decode(\"zip\")"
    ],
    "is-it-a-circumfix": [
        "f=lambda c,s,i=1:i<len(c)<len(s)and(c==s[:i]+s[i-len(c):])|f(c,s,i+1)",
        "lambda a,b:len(a)<len(b)*any(a==b[:i]+b[i-len(a):]for i in range(1,len(a)))"
    ],
    "simplify-ijk-string": [
        "f=lambda s,n=0:s<'.'and f(s[1:],1-n)or len(s)>1and f(s<'2'and s[1:]or(s[0]==s[1]and'-1'or{'ij':'k','jk':'i','ki':'j','ji':'-k','kj':'-i','ik':'-j'}[s[:2]])+s[2:],n)or'-'*n+s",
        "def f(e,s=0):\n while e[1:]:p,e=e[:2],e[2:];a=set('ijk')-set(p);e=a.pop()[len(a):]+e;s^=p not in'ijki'\n return'-'[:s]+['1',e][len(e)]",
        "R={\"ii\":\"-\",\"jj\":\"-\",\"kk\":\"-\",\"ij\":\"k\",\"jk\":\"i\",\"ki\":\"j\",\"ji\":\"-k\",\"kj\":\"-i\",\"ik\":\"-j\"}\ndef f(x):\n    if x==\"-\":return\"-1\"\n    if len(x)==1:return x\n    if len(x)==2and x[0]==\"-\":return x\n    for s,e in R.items():x=x.replace(s,e)\n    return f((\"-\"if x.count(\"-\")%2else\"\")+\"\".join(c for c in x if c!=\"-\"))",
        "a=0\nfor c in input():a=b'147223453614'[ord(c)%3*4+a%4]^(a&4)\nprint('-'[:a&4]+'1ijk'[a%4])"
    ],
    "the-best-base-is-10-lets-reach-it": [
        "i=input()\nwhile'9'>max(i)and~-len(i):i=str(int(i,int(max(i))+1))\nprint(i)",
        "f=lambda x,y=0:x*(x==y)or f(`int(x,int(max(x))+1)`,x)"
    ],
    "not-your-routine-bean-machine": [
        "P=[1]\nfor C in input().split():\n l,*Q=0,\n for p,c in zip(P,C):r=p*\"\\^/\".find(c)/2;Q+=l+r,;l=p-r\n P=Q+[l]\nprint(P)",
        "def f(s):\n r=[1];p=t=0\n for e in s:\n  if'!'<e:b=p==t*-~t/2;r+=[0]*b;t+=b;v=ord(e)%7+1;a=r[p]/2;r[-1]+=v//3*a;r+=v%3*a,;p+=1\n return r[~t:]"
    ],
    "has-my-pie-been-bisected": [
        "f=lambda l,s=0:l>[]and(sum(l)==s)|f(l[1:],s+l[0])|f(l,s+l.pop())",
        "def f(x):n=sum(x);print n in[2*sum(x[k/n:k%n])for k in range(n*n)]",
        "k=t=1\nfor x in input():t<<=x;k|=t*t\nprint k&k/t"
    ],
    "esolang-comment-template-generator": [
        "s,c=input().split(\"|\"),input()\ni,S=0,len(\"\".join(s))\nfor l in s:L=len(l);print(\" \"*i+l+\" \"*(S-L-i+1)+c);i+=L",
        "def f(c,d,i=0):\n for y in(x:=c.split('|')):z=[' '*len(e)for e in x];z[i]=y;print(''.join(z),d);i+=1",
        "def c(a,b):\n d,i=a.split(\"|\"),0\n for e in d:j=i+len(e);print\" \"*i+e+\" \"*(len(\"\".join(d))-j+1)+b;i=j"
    ],
    "the-hourglass-challenge": [
        "e,c,x,a,b,n=' .#ab\\n';R,r,s,l,T,m=range,str.replace,'',19,[1,2,3,5,7,9],-1\nfor t in[T,T[:m][::m]]:s+=''.join([n+x*y+c*(l-y*2)+x*y for y in t]);c=b\ns=list(s)\nfor i in R(130,220,20):s[i]=a\nfor _ in R(input()):s[s.index('.')]=e;i=s.index(a)if a in s else 219-s[::m].index(b);s[i]='.'\nfor l in(x*l+r(r(''.join(s),a,e),b,e)+n+x*l).split(n):print l[::m]",
        "t=input()+1\ns=' '*t+'.'*60+' '*70\nn=0\nd=sum((1<t<56,2<t<48,3<t<36,4<t<22))\nfor c in'ctrplhdhlprtc':i=ord(c)-99;print[s[n+i:n:-1],[s[180-n-i+d:][:i],'.'][5+d*3>i>0]][n>59].center(i).center(19,'#');n+=i"
    ],
    "enklactify-these-strings": [
        "lambda a:`{0:j for j in zip(*a)if len(set(j))==len(j)}`[6::5]",
        "def f(t):c=[s.pop(0)for s in t];return all(t)and(f(t),c)[len(t)==len({*c})]",
        "lambda l:{len({*d}):''.join(d)for d in zip(*l)}.get(len(l))"
    ],
    "a-newly-discovered-number-bleen": [
        "r=round\nbleen=6.1\nm=1.08\na,b=eval(input())\nd=1-2*(a>b)\nprint(*[[r(i/m),\"-bleen\"[i>0:]][i*i==49]for i in range(r(m*a),d+r(m*b),d)])",
        "-5, 'bleen'",
        "a,b=eval(input())\ns='-'\nc='bleen'\nd=a<b\nl=list(map(str,range(-10,11)))[::[-1,1][d]]\nx=l.insert\ny=l.index\nx(4,d*s+c)\nx(18,(1^d)*s+c)\nprint(l[y(a):y(b)+1])",
        "[-10, -9, -8, -7, 'bleen', -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 'bleen', 7, 8, 9, 10]"
    ],
    "build-a-triangle-without-any-triangles": [
        "def f(n,m):return f(n-1,m+3)+[' '*(m+x)+(y*n)[x*2:]for x,y in((2,' \\\\__/\\\\'),(1,'/ /_/\\\\'),(0,'/__\\\\_\\\\'))]if n else[]\nprint '\\n'.join(f(n,0))",
        "def f(n,s=[\"/\\\\ \\\\__\",\"/_/\\\\/ \",\"/__\\\\_\\\\\"]):\n print'\\n'.join(map(lambda x:' '*(n*3-x)+(n*s[x%3])[:x*2+2],range(n*3)))"
    ],
    "is-it-a-leap-year": [
        "g=lambda x:(x%4or x%400and x%100<1)<1",
        "lambda n:n%4**-~(n%25<1)<1",
        "def c(s):return s%16*(s%25<1)<(s%4<1)"
    ],
    "greatest-common-divisor": [
        "lambda*a:max([i for i in range(1,max(*a)+1)if not sum(g%i for g in[*a])])",
        "g=lambda a,b:b and g(b,a%b)or a"
    ],
    "a-very-long-terza-rima": [
        "' '.join('%c'*3%(x,x+1,x)for x in range(65,90))",
        "' '.join(map(lambda x:\"%c\"*3%(x-1,x,x-1),range(66,91)))",
        "i=65;exec\"print'%c'*3%(i,i+1,i);i+=1;\"*25"
    ],
    "the-real-slim-shady": [
        "a,b,c,d=\"I'm\",\"Slim Shady\",\"the real\",\"lease stand up\"\nprint(a,b+\". Yes,\",a,c,b[5:]+\".\\nAll you other\",b+\"s are just imitating.\\nSo, won't\",c,b,f\"p{d}?\\nP{d}. P{d}.\")",
        "print\"{0}{1}{2}. Yes, {0}{3}{2}.\\nAll you other {1}{2}s are just imitating.\\nSo, won't {3}{1}{2} p{4}?\\nP{4}. P{4}.\".format(\"I'm \",\"Slim \",\"Shady\",\"the real \",\"lease stand up\")",
        "d,s=\"i'm|slim|shady|real|stand|yes|the|all you other|are just imitating|so,won't|please|up\",'A B C.F,A G D C.H B Cs I.J G D B C K E L?K E L.K E L.'\nfor w in'ABCDEFGHIJKL':s=s.replace(w,d.split('|')[ord(w)-65])\nprint(s)",
        "a=\"Slim Shady\"\nprint\"{0}{1}. Yes, {0}{3}{2}.\\nAll you other {1}s are just imitating.\\nSo, won't {3}{1} p{4}?\\nP{4}. P{4}.\".format(\"I'm \",a,a[5:],\"the real \",\"lease stand up\")"
    ],
    "output-the-legendary-yggdrasil": [
        "j=0\nwhile j<40:j-=j/4;exec(j/3+4)*r\"print' '*(39-j)+'/'+'**'*j+'\\\\';j+=1;\"\nfor c in'-'*11+'_':print' '*35+'|'+c*8+'|'",
        "'eJztmEsOwjAMBfecoutIFUfiIjk8FAJNE3+eE0sI6qxnRq3jVZYFOlcQSwnlMPIJeqOFRNgPCsAVq9MH+Lvxhtb4DlcEgpcNUvjBr2IMyWEVQRIc3hKlk/2VYnGeqjEi4NEmJMZwrCpoUi6sErLB7W2THKPGXe9RG+3WN+tNYMA/FoYCcX9/dH+DhboxnKgiE429MhWJ3egSsRttZrLy7kxnSsih8yq5hGL9+Eqsn1TyWz+n0tZySz1ijq2UXGPQi1pey8mXoM9F38rJd5RXZaM='.decode('base64').decode('zip')",
        "R=range\nfor i in R(10):\n for j in R(i*3,4+i*4):print' '*(39-j)+'/'+'**'*j+'\\\\'\nfor c in'-'*11+'_':print' '*35+'|'+c*8+'|'"
    ],
    "can-this-number-be-written-in-3x-1-format": [
        "lambda n:(~n>>3**n%-~n*n)**4/80%80",
        "f=lambda n,i=0:i*0**n or n%3/2*f(n/3,i+1)",
        "lambda x:max(n*(3**n-1==x)for n in range(x))"
    ],
    "write-a-haiku-w-detector": [
        "lambda h:[len(l.split())for l in h]==[5,7,5]",
        "lambda l:[s.count(' ')for s in l]==[4,6,4]",
        "i,j=input,''\nfor x in i():j+=`len(x.split())`+' '\ni(j=='5 7 5 ')"
    ],
    "an-array-of-challenges-1-alternating-arrays": [
        "lambda x:x[2:]==x[:-2]",
        "lambda x:(x[:2]*len(x))[:len(x)]==x"
    ],
    "reverse-the-consonants": [
        "def f(a):c='bcdfghjklmnpqrstvwxz';b=[x for x in list(a[::-1])if x in c];[b.insert(x,a[x])for x in range(len(a))if a[x]not in c];return''.join(b)",
        "s='';c=()\nfor x in input():b='{'>x not in'aeiouy'<x;s+=b*'%s'or x;c=(x,)*b+c\nprint s%c",
        "s=input()\nb=[x for x in s if x in'bcdfghjklmnpqrstvwxz']*2\nprint''.join(x in b and b.pop()or x for x in s)"
    ],
    "let-us-play-the-ocarina": [
        "i='^<>VA'\nu=dict(zel=\"<^>\"*2,sas=\"V><\"*2,eps=\"^<>\"*2,sos=\">V^\"*2,sot=\">AV\"*2,sst=\"AV^\"*2,mof=\"A^<><>\",bof=\"VAVA>V>V\",sow=\"AV>><\",nos=\"<>>A<>V\",ros=\"AVA>VA\",pol=\"^>^><^\",scs=\"<\"*8)[raw_input()]\nr=[17*['-']for _ in[1]*5]\nx=0\nfor g in u:r[i.find(g)][x*2+1]=g;x+=1\nfor h in r:print''.join(h)",
        "s='D  2)AE0*  A2)D  AD )2 A  )D2A 0,\"!A D2) A  (2EA\"4H !A )2D A 1F`(A)2D  A  p\\xc5*'.split(\"A\")['sst pol zel sos sot sow sas ros mof scs nos eps bof'.split().index(raw_input())]\nfor c,n in zip(s,\"^<>VA\"):print\"-\".join([(\"-\"+n)[i>\"0\"]for i in bin((ord(c)-32)%255)[2:].zfill(8)][::-1])",
        "s=dict(zel=\"<^><^>\",sas=\"V><V><\",eps=\"^<>^<>\",sos=\">V^>V^\",sot=\">AV>AV\",sst=\"AV^AV^\",mof=\"A^<><>\",bof=\"VAVA>V>V\",sow=\"AV>><\",nos=\"<>>A<>V\",ros=\"AVA>VA\",pol=\"^>^><^\",scs=\"AV><^AV>\")[input()]\ns+=\" \"*8\nfor c in \"^<>VA\":\n o=\"-\"\n for x in range(8):o+=[\"--\",c+\"-\"][s[x]==c]\n print(o)"
    ],
    "three-other-numbers": [
        "def f(b):c=[*{*range(7)}-b];del c[-sum(b)%4];return c",
        "lambda s:([*{*range(7)}-s]*4)[-sum(s):][:3]"
    ],
    "lets-study-neil-numbers": [
        "a=[len(z)-1for z in sorted(bin(input())[2:].split('1'))if z]\nn=len(a)\nprint(range(n)==a)*n",
        "s=sorted([0]+map(len,bin(input()).split(\"1\")[1:]))\nn=s[-1]\nprint(s[~n:]==range(n+1))*n"
    ],
    "pointlessly-make-your-way-down-the-alphabet": [
        "lambda s:print([''.join(map(chr,range(ord(c),96,-1)))for c in s])",
        "for a in input():print(*map(chr,range(ord(a),96,-1)))",
        "for x in input():\n o=\"\";c=ord(x)\n while c>96:o+=chr(c);c-=1\n print o"
    ],
    "add-without-addition-or-any-of-the-4-basic-arithmetic-operators": [
        "c=range(a);c.extend(range(b));len(c)",
        "i,j=input(),input()\nwhile j>0:i=-~i;j=~-j",
        "f=lambda a,b:b and f(a^b,(a&b)<<1)or a",
        "len(\"\".join([\".\"*x,\".\"*y]))",
        "lambda x,y:eval(\"-~\"*x+str(y))",
        "len(range(x)+range(y))",
        "print sum((a,b))",
        "def s(a,b):\n for i in range(b):a=-~a\n return a",
        "r,c=\"\",0\nif b>a:a,b=b,a\nwhile a:\n a,b,e,d=a>>1,b>>1,a%2,b%2\n r=str(e^d^c)+r;c=(c&d)|(c&e)|(d&e)\nr=int(str(c)+r,2)"
    ],
    "i-reverse-the-source-code-you-negate-the-input": [
        "int#__bus__. 0",
        "lambda x:x#x-:x adbmal"
    ],
    "print-an-alphabet-wave": [
        "for k in range(26):print(chr(k+65)+chr((k+1)%26+65))*13",
        "L=map(chr,range(65,91))\nfor i in range(-26,0):print(L[i]+L[i+1])*13",
        "i=0;exec'print(chr(i+65)+chr(-~i%26+65))*13;i+=1;'*26",
        "def l(a=0):\n print(chr(a+65)+chr(-~a%26+65))*13\n if a<25:l(-~a)"
    ],
    "a-different-kind-of-meta-regex-golf": [
        "^...[3w!G)]|^[^\\\\C|]*$|G.?.?\\)",
        "\\.\\)|P[.$?]|w\\^|^[^|C\\\\]*$|^P",
        "^[^\\\\|]*(\\\\\\\\)*[^\\\\|]*[^\\]]$",
        "\\?[^w$]*\\$$|^P|\\w.\\)|w.?\\+|w\\^|[^?P]P$",
        "\\$..\\\\|\\?[^w$]*\\$$|w\\^|[]^C]\\w$",
        "^[\\w^]*$|!|]P|G]\\$$",
        "^[^[]P|]P|(G]|[.])\\$$",
        "^(..[^^].{4,22}\\$|[^?]+\\w)$|2",
        "[[?C(].[-!)|w]|^P|^[^C|\\\\]*$",
        "\\?[^w$]*\\$$|[]^C]\\w+$|w\\^|\\|..\\)",
        "(?<!\\\\..)(?!]).$",
        "^..(.[!G)(3w^]|.{7}$|$)|\\$\\?",
        "^(.{,4}|.{9}|.{16,19}|.{5}P)$",
        "\\..$|!|\\|G|^[\\^P]P|P\\^|G.\\$$"
    ],
    "hot-moo-shuffle-milk-an-array": [
        "M=lambda a:a and M(a[1:-1])+a[::len(a)-1or 1]",
        "M=lambda a:a and M(a[-2::-1])+a[-1:]"
    ],
    "moving-modest-minimum": [
        "lambda L:[min(L[:i]+L[i+1:])for i in range(len(L))]",
        "lambda l:[sorted(l)[x==min(l)]for x in l]"
    ],
    "numbers-that-are-actually-letters": [
        "lambda x:min(hex(x)[1:])>'@'",
        "lambda n:hex(n)[2:].isalpha()",
        "lambda n:min('%x'%n)>'9'"
    ],
    "string-prototype-isrepeated": [
        "lambda s:any([s*n==s[:n]*len(s)for n in range(2,len(s))])",
        "lambda s:s in(s+s)[1:-1]"
    ],
    "goodness-giza-golf": [
        "def f(a):b=len(a)/2+1;print(1,0)[a[:b-1]!=a[b:][::-1]or a[:b]not in'123456789']",
        "f=lambda s:2>len(s)or(s[0]==s[-1]==`int(s[1])-1`and f(s[1:-1]))",
        "lambda x:len(x)<18and x[:len(x)//2+1]in'0123456789'and x[::-1]==x",
        "lambda n:n==`int('1'+len(n)/2%9*'1')**2+int(len(n)*`int(n[0])-1`)`",
        "lambda s:s[~len(s)/2:]in'987654321'>s==s[::-1]"
    ],
    "remove-surrounding-zeroes-of-a-2d-array": [
        "lambda a,l=1:a if l>4else([a.pop()for b in a if sum(a[-1])<1],f(zip(*a[::-1]),l+1))[1]",
        "f=lambda a,n=4,s=sum:n and f(zip(*a[max(i for i in range(len(a))if s(s(a[:i],()))<1):][::-1]),n-1)or(s(s(a,()))>0)*a",
        "def f(a):exec'while a and 1>sum(a[-1]):a.pop()\\na[:]=zip(*a)[::-1]\\n'*4"
    ],
    "i-done-did-made-a-spaceship-maw": [
        "w=input();c=s=-1\nwhile c:print(' '*~c).join(w);s*=w[:c]>'';c+=s|1",
        "s=input()\nr=range(len(s))\nfor i in r+r[-2::-1]:print(' '*i).join(s)"
    ],
    "skip-like-a-rabbit": [
        "x=input()\ni=0\nwhile 1:print x[i];i-=~x[i]",
        "f=lambda h=0,*t:t and[h,*f(*t[h:])]",
        "locals()['_[1]']",
        "l=input()\nwhile l:print l[0];l=l[l[0]+1:]",
        "f=lambda x:x and x[:1]+f(x[x[0]+1:])",
        "l=input()\ni=0\nwhile l[i:]:i+=1;l[i:i+l[i-1]]=[]\nprint l"
    ],
    "count-like-a-babylonian": [
        "lambda s:sum(60**i*sum(8740%ord(c)/4for c in v)for i,v in enumerate(s.split()[::-1]))",
        "lambda s:reduce(lambda x,y:x+[10,0,59*x,1][\"<\\ \".find(y)],s,0)"
    ],
    "decode-the-string": [
        "a,b,*r=input();x=i=0\nfor c in r:i*=2;i|=a!=c;x+=1;x%8or print(end=chr(i&255))",
        "lambda s:[chr(int(str(list(map(s.find,s[i:i+8])))[1::3],2))for i in range(2,len(s),8)]",
        "lambda s:[chr(int(`map(s.find,s)`[i:i+24:3],2))for i in range(7,3*len(s),24)]",
        "i=input()\nf=''.join('10'[x==i[0]]for x in i[2:])\nwhile f:print chr(int(f[:8],2));f=f[8:]"
    ],
    "dropsort-it-like-its-hot": [
        "b,r=input(),[]\nfor i in b:\n for l in r:\n\tif l[-1]<=i:l+=[i];break\n else:r+=[[i]]\nprint r",
        "def f(x):\n a,*x=x or[0];m=[a];d=[]\n for i in x:[m,d][i<m[-1]]+=i,\n return[m]+(x and(d>[])*f(d))"
    ],
    "nato-phonetic-spelling-can-take-long": [
        "w=[input()]+'LFA RAVO HARLIE ELTA CHO OXTROT OLF OTEL NDIA ULIETT ILO IMA IKE OVEMBER SCAR APA UEBEC OMEO IERRA ANGO NIFORM ICTOR HISKEY RAY ANKEE ULU'.split()\ns=[1]+[0]*26\nexec\"s=[i and v+sum(j*c.count(chr(i+64))for j,c in zip(s,w))for i,v in enumerate(s)];\"*101\nprint sum(s)",
        "f=lambda s,n=100:n and sum(f(c+\"LFA RAVO HARLIE ELTA CHO OXTROT OLF OTEL NDIA ULIETT ILO IMA IKE OVEMBER SCAR APA UEBEC OMEO IERRA ANGO NIFORM ICTOR HISKEY RAY ANKEE ULU\".split()[ord(c)-65],n-1)for c in s)or len(s)"
    ],
    "there-i-fixed-it-with-tape": [
        "lambda s:''.join(c+(C>c)*('TAPE'*6)[:ord(C)+~ord(c)]for c,C in zip(s,s[1:]+' '))",
        "lambda a:\"\".join(sum(zip(a,[(\"TAPE\"*9)[:y>x and~ord(x)+ord(y)]for x,y in zip(a,a[1:])]),()))+a[-1]",
        "p,o=' ',''\nfor t in input():y=(ord(t)-ord(p)-1)*(p!=' ');o+=('TAPE'*y)[0:y]+t;p=t\nprint(o)",
        "f=lambda s,*t:t and s+('TAPE'*6)[:max(ord(t[0])+~ord(s),0)]+f(*t)or s"
    ],
    "the-vanilla-factorial-challenge": [
        "a=1\nfor i in range(int(input())):a*=i+1\nprint(a)",
        "i=n=1;exec\"n*=i;i+=1;\"*input();print n",
        "f=lambda n:n<1or n*f(n-1)",
        "def f(n):\n k=1\n for i in range(2,n+1):\n  k=k*i\n return k",
        "f=lambda n:1>>n or n*f(n-1)",
        "lambda n:reduce(lambda a,b:a*b,range(1,n+1),1)",
        "f=lambda n:n>1 and n*f(n-1)or 1"
    ],
    "print-a-bunch-of-uninteresting-numbers": [
        "f=lambda n,m=1:m<=n and f(n,m*10)or-~m*n*n",
        "lambda f:int(`f`*2)*f",
        "i=input(\"N:\")           # Standard input\ny=i+(i[-2:])            # Using strip method to take last two chars from input\nprint(int(y)*int(i))    # Temp convert strings into integers for maths and print the result.",
        "x=int(input());print(10**len(str(x))*x+x)*x"
    ],
    "generate-pascals-triangle": [
        "A=[1]\nfor i in range(input()):\n    B=[sum(A[j:j+2])for j in range(i)]\n    B[:0]=[1]\n    B[i+1:]=[1]\n    print A\n    A=B",
        "x=[1]\nfor i in input()*x:\n print x\n x=map(sum,zip([0]+x,x+[0]))",
        "b=lambda n,a=[1]:n and[print(a),b(n-1,[*map(sum,zip([0]+a,a+[0]))])]",
        "a=[1];exec\"print a;a=map(sum,zip([0]+a,a+[0]));\"*input()"
    ],
    "generate-code": [
        "for i in input():print';'*ord(i)+'#'",
        "[print(\";\"*ord(s)+\"#\")for s in input()]",
        "[print(''.join((';'*ord(i)+'#')for i in input()))]"
    ],
    "fibonacci-orial": [
        "f=lambda n,a=1,b=1:n<1or a*f(n-1,b,a+b)",
        "a=b=o=1\nexec\"o*=a;a,b=b,a+b;\"*input()\nprint o"
    ],
    "division-and-remainder": [
        "(x(x*)),(x*?)(?=\\1*$)(x?(x*))(?=\\4*$)((?=\\2+$)\\2\\5*$|$\\4)",
        "lambda a,b:(a/b,a%b)"
    ],
    "the-shortest-way-to-find-one-unique-value-when-all-other-values-are-the-same": [
        "i=sorted(input())\nprint(i[0],i[-1])[i[0]==i[1]]",
        "lambda x:[i for i in x if x.count(i)<2]",
        "lambda x:min(x,key=x.count)",
        "def f(n):n.sort();return (n[0],n[-1])[n[0]==n[1]]",
        "lambda x:x[[*map(x.count, x)].index(1)]"
    ],
    "the-rice-and-chess-problem": [
        "lambda n,m:sum(m**i for i in range(n**2))",
        "lambda l,m:sum(m**i for i in range(l*l))",
        "lambda n,m:eval('1+m*('*n*n+'0'+')'*n*n)"
    ],
    "cheating-a-multiple-choice-test": [
        "lambda*x:['A'*a+b*'B'or'C'for a,b in zip(*x)]",
        "lambda*x:['CBA'[b-a]for a,b in zip(*x)]"
    ],
    "every-word-from-babab-to-zyzyz": [
        "a,b=\"bcdfghjklmnpqrstvwxz\",\"aeiouy\";print(*(c+d+e+f+g for c in a for d in b for e in a for f in b for g in a))",
        "x,y='aeiouy','bcdfghjklmnpqrstvwxz'\nfor a in x:\n for e in x:\n\tfor b in y:\n\t\tfor c in y:\n\t\t\tfor d in y:print b+a+c+e+d",
        "f=lambda i=-4,s='':i*[s]or sum([f(i+1,s+c)for c in i%2*'AEIOUY'or'BCDFGHJKLMNPQRSTVWXZ'],[])"
    ],
    "display-a-clock-face": [
        "print\"%13d\\n%7d%12d\\n\\n%3d%20d\\n\\n\\n9%24d\\n\\n\\n%3d%20d\\n\\n%7d%12d\\n%13d\"%(12,11,1,10,2,3,8,4,7,5,6)",
        "for i in range(7):w=abs(3-i);print'%*d'%(1-~w*w,12-i),'%*d'%(24-3**w-2*w,i)*(w<3),'\\n'*min(i,5-i)",
        "print(f'''{12:13}\n{11:7}{1:12}\n\n 10{2:20}\n\n\n9{3:24}\n\n\n  8{4:20}\n\n{7:7}{5:12}\n{6:13}''')"
    ],
    "print-all-2-letter-scrabble-words": [
        "for s in'AABALIFEN KITOELOPE LAYAINUNEREMI AMANAHI MOHMYEX UPI UTAGOFAWOWETI BY OR BI ZAXI PAS BE AD AEDEHAT QI UMMUS JOIDONOSHOYOD BOMESISOXUHEF KAR'.split():\n for i in range(len(s)-1):print s[i:i+2]",
        "e=enumerate\n[print(*(chr(x+65)+chr(j+65)+\" \"for j,i in e(bin(k)[2:])if int(i)))for x,k in e([30292443,16793873,0,16400,9320616,17,16384,20753,794664,16384,257,16641,17846545,1064977,29798840,273,256,16,16768,16641, 831616,0,16400,1048832,16401,1])]",
        "s='';i=int(\"AQHU9HU1X0313T1J9OMYMZZSRFWLCYT3POSE06UGHXDZN6H5SQSZIFCE6VEB\",36)\nfor c in range(26):\n b=i%6;i//=6;k=(1<<b)-1;j=i%(1<<k);i>>=k\n for d in 'AOIEHMUSTMNDFPYBCGJKLQRVWXZ':\n  if j&1:s+=chr(c+65)+d+' '\n  j>>=1\nprint s",
        "s=\"BI ODEXIF BAAX ASOHER LOXUMOPAGOR KI US AMY BOITONOSI MMEMINANEHI UPI AYAHOYOWOMUNUHAID PEFARED QIS BEN JOFETAE KAT ABYESHMALI UTI ZADOELAWE \"\nwhile s:\" \"in s[:2]or print(s[:2]);s=s[1:]"
    ],
    "the-rien-number": [
        "_=\"\".join;print\"1\"+_(sorted(_(map(str,range(2,input()+1)))))",
        "P=input();print\"1\"+\"\".join(sorted(`range(2,P+1)`)[P*2-4:-2])"
    ],
    "count-sum-of-all-digits": [
        "f = lambda x: sum( sum( int(k) for k in str(i) ) for i in xrange(1, x+1) )\n\n>>> f(12)\n51\n>>> f(5)\n15",
        "1234567891234567891234564789087414984894900000000",
        "N,i,d=input(),0,0\nwhile i<N:\n i+=1\n n=i\n while n:\n  d+=n%10\n  n/=10\nprint d",
        "input()"
    ],
    "unflatten-an-array": [
        "f=lambda a,b:[b.pop(0)if x<[]else f(x,b)for x in a]",
        "f=lambda s,v:v.pop(0)if s<[]else[f(x,v)for x in s]",
        "def g(N,L):f=lambda N:L.pop(0)if`N`<\":\"else map(f,N);return f(N)"
    ],
    "me-want-honeycomb": [
        "i=0\nexec\"k=max(7-i,i-24,0);print' '*k+('\\__/  '*9)[i:][k:16-k];i+=3;\"*11",
        "n=0x85208e08e08dd445\nwhile n:l=n>>2&15;print(' '*(8-l)+('\\__/  '*4)[n&3:n&3|l*2]);n>>=6"
    ],
    "xor-multiplication": [
        "f=lambda m,n:n and n%2*m^f(2*m,n/2)",
        "def y(a,b,c=0):\n for _ in bin(b)[:1:-1]:c^=int(_)*a;a<<=1\n print c"
    ],
    "programming-with-bits-and-bytes": [
        "a=0\nfor c in raw_input():a=eval({'!':'~a','<':'a<<1','>':'a>>1','@':'a<<4|a>>4'}.get(c,'a'))&255\nprint a",
        "a=\"0\"*8\nfor i in input():a={\"!\":''.join(str(1-int(b))for b in a),\"<\":a[1:]+\"0\",\">\":\"0\"+a[:-1],\"@\":a[4:]+a[:4]}.get(i,a)\nprint(int(a,2))",
        "a=0\nfor i in input():a=(a^255if i==\"!\"else a>>1if i==\">\"else a<<1if i==\"<\"else(a&15)<<4|(a&240)>>4if i==\"@\"else a)&255\nprint(a)",
        "a=0\nfor i in input():\n if i in\"!><@\":a=(i=='!')*(255-a)+(i==\">\")*a//2+(i==\"<\")*(a+a)%256+(i==\"@\")*(16*(a%16)+a//16)\nprint(a)",
        "a=0\nfor i in raw_input():a=[~a,a/2,a*2,a*16+a/16,a][\"!><@\".find(i)]&255\nprint a"
    ],
    "is-it-a-balanced-number": [
        "n=input()\nl=len(n)\nprint(sum(map(int,n[:l//2]))==sum(map(int,n[l//2+l%2:])))",
        "g=[int(h)for h in raw_input()];b=int(len(g)/2);print sum(g[:b])==sum(g[-b:])or b==0",
        "*a,=map(int,input())\nh=(len(a)+1)//2\nprint(sum(a[:h])==sum(a[-h:]))",
        "def f(n):x=map(int,str(n));d=len(x)/2;print sum(x[:d])==sum(x[-d:])or d<1",
        "s=`input()`\na,b,l=0,0,len(s)\nfor i in range(l/2):a=a+int(s[i]);b=b+int(s[l-i-1])\nprint a==b"
    ],
    "compute-the-digit-difference-sum-of-a-number": [
        "f=lambda n:n and n+f(int('0'+''.join(`abs(int(a)-int(b))`for a,b in zip(`n`,`n`[1:]))))",
        "re.findall('\\d\\d',s,overlapped=True)",
        "t=lambda n:n>9and abs(n%10-n/10%10)+10*t(n/10)\ng=lambda n:n and n+g(t(n))"
    ],
    "find-the-needle-in-the-haystack": [
        "concatenated string, width",
        "lambda m:[map(len,map(set,a)).index(2)for a in zip(*m),m]",
        "lambda s,w:divmod(s.find({s.count(c):c for c in s}[1]),w)[::-1]",
        "def f(i):\n    a = None\n    b = 0\n    c = None\n    d = 0\n    h = len(i)\n    for y in range(h):\n        for x in range(len(i[y])):\n            if a == None:\n                a = i[y][x]\n            elif a != None:\n                if i[y][x] != a:\n                    c = i[y][x]\n            if i[y][x] == a:\n                b += 1\n            elif i[y][x] == c:\n                d += 1\n    if b == 1:\n        n = a\n    elif d == 1:\n        n = c\n    for y in range(h):\n        for x in range(len(i[y])):\n            if i[y][x] == n:\n                return (x, y)",
        "lambda s,w:divmod(s.find(min(s,key=s.count)),w)",
        "def f(s):x=s.find(\"\\n\")+1;return[(i%x,i//x)for i,c in enumerate(s)if s.count(c)<2and\" \"<c][0]"
    ],
    "output-the-qwerty-keyboard": [
        "def kb(c): \n s = \"q w e r t y u i o p \\n a s d f g h j k l \\n z x c v b n m\"\n a = s.split(c)\n print(a[1])",
        "lambda c,s=\"q w e r t y u i o p\\na s d f g h j k l\\nz x c v b n m\":s[s.index(c)+2:]",
        "lambda x:\" \".join(\"qwertyuiop\\nasdfghjkl\\nzxcvbnm\".split(x)[1])"
    ],
    "check-if-point-lies-inside-triangle": [
        "f=lambda X,L:sum(((L[i-1]-X)/(L[i]-X)).imag>0for i in(0,1,2))%3<1",
        "f=lambda x,y,t:sum(a*y+c*b+d*x<d*a+c*y+b*x for i in(0,1,2)for a,b,c,d in[t[i-1]+t[i]])%3<1"
    ],
    "am-i-divisible-by-double-the-sum-of-my-digits": [
        "lambda a:a%(sum(map(int,str(a)))*2)",
        "lambda n:n%sum(map(int,`n`)*2)<1"
    ],
    "output-a-magical-8-trapezium": [
        "a=i=1\nexec\"print'%9d x 8 +'%a,i,'=',a*8+i;i+=1;a=a*10+i;\"*9",
        "s=\"123456789\"\nn=1\nexec'print\"%9s\"%s[:n],\"x 8 + %s =\"%n,s[::-1][:n];n+=1;'*9"
    ],
    "output-the-trinity-hall-prime": [
        "print''.join((ord(j)-34)*'81'[i%2]for i,j in enumerate(\"\u007f:(:((#,#(('$,$'(&%,%&(&%,%&(%&,&%(%'*'%(%(((%(%4%(%4%(%4%)%2%&#%%2%%$&%0%&%&%.%&'&&*&&)&0&+&.&-&,&/&*&1'&'3'$'6*9(<$N\"))+'0621'+'0'*445+'1'",
        "s='0621'+'0'*445+'1'\na=1\nfor c in'L\":&7(4%\"%1%$%/$($-$*$+$,$)$.$\\'$$($$%$#,#$#$#.#$\"##0##!$#0#\\'#2#&#2#&#2#&#&&&#&#%(%#&#$*$#&$#*#$&$#*#$&%\"*\"%&&!*!&&8&8}':s=`a`*(ord(c)-32)+s;a^=9\nprint s"
    ],
    "print-a-physical-multiplication-table": [
        "n,l=range(int(input())),''\nfor i in n:l+='#'*-~i+' '\nfor j in n:print((l+'\\n')*-~j)",
        "s='';n=input()\nwhile n:s='#'*n+' '+s;n-=1\nfor c in s:print(c>' ')*s"
    ],
    "output-the-arecibo-message": [
        "exit(''.join(bin(i)[3:]for i in b'`UP@JB`IDQKJjjd`@@@@@L@@Ah@@CP@@J`@@_@@@@@LNLLP@FPtXpu}}}|@@@@`@@`@@@A@@A~@@~@@@CCCcDA@DMCGM____@@@@HF@H@L@@PX@_`pO`A`@HA@HHF@`LLB@FHX@@s@@Xa`CC@`HD@``L@b@XAD@PDDA@PD@C@F@X@ck@A@P@BCx@DKi[@gI\\x7f\\\\NC\\\\@TGY@hOrAPXDFp@@@@@\\\\D@@zbjipAU@@B`@Gp@@\\x7fx@G@\\\\@X@LAh@lFXCLHhJHQHdPBJH@DHP@H@`@Dh@OOix')[1:])",
        "print bin(int('gVQAKCgJERLKqqkgAAAAAMAABoAADQAAKgAAfAAAAAMOMMQAGQ0Yw19998AAAAgAAgAAABAAB+AA+AAADDDjEBAENDHNffffAAAAIGAIAMAAQYAfgwPgBgAIBAIIGAgMMCAGIYAAzAAYhgDDAgIEAggMAiAYBEAQEEBAQEADAGAYAjrABAQACD4AELpbAnJ/cODcAUHZAoPyBQYEGwAAAAAcEAA6iqpwBVAACgAHwAA/4AHAcAYAMBoAsGYDMIoKIRIkQCKIAEIQAIAgAEoAPPp4'.decode('base64').encode('hex'),16))[3:]",
        "s=''\nfor c in\")pG/K(K*j$h%kk$ppjGE&I6S6S5[5eCv~vw0x&z$wgqcde$e=G4G?G4eG0e:vv~w*G,gn$wy$uuuuG=G)I,G.I2G(I-eG(I)e-I0G+G+G(G)I*G*vI)G-w'I2y0w'I,vI)G*G)G+G(G*I+W+I+W,G*G(G*G*G*G/I,I+I,iq.G*G1G(e/g$c%sG)m%md~$M(},K(cO)K(eO)K(I)G(aE$M(G1c$hpoI,pG3K1e3eU/M*M,I.I*S,Q(y*y'hG(ng&j$j$G+hW/g'G/G,G1k.d$e$mN\":c=ord(c)-35;s+=[bin(c-35)[2:],'0'*c][c<35]\nprint s"
    ],
    "turn-me-22-5-with-a-rose": [
        "d='N NNE NE ENE E ESE SE SSE S SSW SW WSW W WNW NW NNW'.split()\nn=d.index(input())\nprint d[n-1],d[n-15]",
        "lambda i,s=\"N NNE NE ENE E ESE SE SSE S SSW SW WSW W WNW NW NNW\".split():[s[s.index(i)-1],s[s.index(i)-15]]"
    ],
    "a-well-linked-challenge": [
        "bmn0=f=lambda s,P={0},d=[]:s<\" \"if(P in d)else+f(s[f<s:],P^{s[0^0]},[P]+d)",
        "lambda l,b={id}:len({str(b:=b^{c})for(c)in l})<len(l)#,<^fmnost{}#",
        "lambda d,e=enumerate:min(max(d[l:l+b].count(k)%2for(k)in d)for b,c in e(d[2:],2)for l,f in e(d) )#b =:x+.%2#"
    ],
    "happy-bacon-day": [
        "def f(w,h):n=4*h+1;exec\"n-=1;print'-)()-===-===-===-)()'[n%4::4]*w;\"*n",
        "a,b=input();f=\"-\"*5*a;d=\")===)\"*a;print'\\n'.join([f,d,\"(===(\"*a,d,''])*b+f",
        "w,h=input()\nfor a in'-()('*h+'-':print(a+3*'=-'[a>')']+a)*w"
    ],
    "too-many-spies": [
        "e=enumerate\ndef f(s):\n v=[];u=sum([(lambda a:[{i for i,x in e(a)if x==k}for k in set(a)])(a.split())for a in s.split('\\n')],v)\n while u:\n\tx=u.pop()\n\tfor i,y in e(u):\n\t if x&y:u.pop(i);u+=[x|y];break\n\telse:v+=[x]\n return v",
        "def f(a):r=[*zip(*[map(b.index,b)for b in map(str.split,a)])];return sum(i==min(min(u)for u in r if min(w)in u)for i,w in enumerate(r))",
        "e=enumerate\ndef f(a):\n\tr=[list(map(b.index,b))for b in map(str.split,a)]\n\tfor z in r:\n\t\tfor i,v in e(z):\n\t\t\tfor x in(i>v)*r:x[(i,x[i])[x[i]<i]]=z[v]\n\treturn sum(i==v for i,v in e(z))"
    ],
    "zero-sum-covers": [
        "lambda a,r=range:len({k for j in r(len(a)+1)for i in r(j)if sum(a[i:j])==0for k in r(i,j)})==len(a)",
        "def f(l):\n s=len(l);n=[0]*s\n for i in range(s):\n  for j in range(i,s+1):\n   if sum(l[i:j])==0:n[i:j]=l[i:j]\n return n==l",
        "def f(l):\n r=range(len(l))\n if[i for i in r for j in r if sum(l[j:j+i+1])==0]:return 1"
    ],
    "unlocking-the-secrets-to-a-1-dimensional-labyrinth": [
        "def f(l):\n i=l.index;b=i('^');t=i('$')-b\n for d in filter(str.isupper,l):\n  k=i(d.lower())\n  if k<b:b=k;t+=2*(i(d)-k-1)\n print t",
        "a=raw_input()\nx=a.index\nv=x('^')\nb=x('$')-v\nl=filter(str.islower,a[:v])[::-1]\nfor i in filter(str.isupper,a):\n k=i.lower()\n if k in l:b+=(x(i)-x(k)-1)*2;l=l[l.index(k)+1:]\nprint b"
    ],
    "divisibility-test": [
        "print input()%input()==0",
        "lambda D,d:D%d<1"
    ],
    "rot-13-transform-standard-input": [
        "a=input()\nfor i in a:print(end=i.isalpha()*chr(65+(ord(i)-52)%26)or i)",
        "rot13()",
        "lambda s:''.join([chr((ord(c.lower())-84)%26+97)for c in s])",
        "print raw_input().encode('rot13')"
    ],
    "zeroes-at-the-end-of-a-factorial": [
        "f=lambda n:n/5+f(n/5)if n>0else 0",
        "f=lambda n:n and n/5+f(n/5)",
        "g=lambda x,y=1,z=0:z-x if y>x else g(x,y*5,z+x//y)"
    ],
    "ascii-art-hello-world": [
        "print'\\n'.join(map(''.join,zip(*(''.join(\"# \"[int(e)]for e in\"{:07b}\".format(ord(c))[1:])for c in\"\u20ac\u00f7\u00f7\u00f7\u20ac\u00ff\u00f1\u00ea\u00ea\u00f2\u00ff\u20ac\u00ff\u20ac\u00ff\u00f1\u00ee\u00ee\u00f1\u00ff\u00fb\u00fb\u00ff\u0178\u00e1\u00fe\u00c1\u00bf\u00c1\u00fe\u00e1\u0178\u00ff\u00f1\u00ee\u00ee\u00f1\u00ff\u00e0\u00ef\u00ff\u20ac\u00ff\u00ff\u00f1\u00ee\u00ee\u20ac\u00ff\u201a\"))))",
        ">>> print'eJyNkFEKwDAIQ/93isC7/x3LyIJullHrR1BfJSIJPUHTlmiUPHbxC7L56wNCgZAxv3SjDWIxsoOb\\nzMaBwyHYPJ5sVPNYxXism74vcIsFZlYyrg=='.decode('base64').decode('zip')\n#   #        #  #          #   #   #          #     #  #\n#   #        #  #          #  # #  #          #     #  #\n#   #   ##   #  #   ##      # # # #   ##   ## #   ###  #\n#####  #  #  #  #  #  #     # # # #  #  #  #  #  #  #  #\n#   #  ####  #  #  #  # ##  # # # #  #  #  #  #  #  #  #\n#   #  #     #  #  #  #     # # # #  #  #  #  #  #  #   \n#   #   ###  #  #   ##       #   #    ##   #  #   ###  #",
        "print('\\n'.join(bin(x)[2:]for x in[353530052677,366448644429,499649260116,357858349645]).translate({48:32,49:35}))",
        "print(' '.join(['','\\n'][i%40==0]+['#',' '][int('72liw1j4glyc34dum02j2a4ipxa8b7vvp65x511',36)//2**i%2==0]for i in range(200)))"
    ],
    "kolmogorov-shifter": [
        "for x in 2,99,196:s='';exec\"s+=chr(32+x%291/3);x-=94;\"*26;print s",
        "x=98\nexec\"r='';exec'r+=chr(x/3);x+=291*(x<180)-94;'*26;print r;x-=78;\"*3",
        "print(''.join(chr(b%3*65%97+b%26+32)+'\\n'[25-b%26:]for b in range(78)))",
        "p=0\nexec\"o=0;r='';exec'r+=chr(o+[32,65,97][(p-o)%3]);o+=1;'*26;p+=1;print r;\"*3"
    ],
    "check-whether-letters-of-word-are-in-alphabetical-order": [
        "lambda s:eval('\"%s\"'%'\"<\"'.join(s.lower()))",
        "*s,=input().lower()\nprint(sorted(set(s))==s)",
        "def a(w):\n    v=w.lower()\n    print v==''.join(sorted(set(v)))",
        "f=lambda x:sorted(set(x.lower()))==list(x.lower())"
    ],
    "determine-if-all-decimal-digits-are-unique": [
        "lambda x:10**len({*str(x)})>x",
        "f=lambda x:len(str(x))==len(set(str(x)))",
        "lambda n:10**len(set(`n`))>n",
        "def d(a):\n    f=[];\n    for i in str(a):\n        if i in f:return False\n        f.append(i)\n    return True"
    ],
    "ot-wes-thi-bist-uf-tomis": [
        "V='uaeiouAEIOUA'\nprint''.join((V[1:]+c)[V.find(c)]for c in input())",
        "lambda x:x.translate(dict(zip(b'aeiouAEIOU','eiouaEIOUA')))"
    ],
    "take-a-ride-on-the-reading-if-you-pass-go-collect-200": [
        "l='%s '*11+'\\n'\nprint(l+'%s%20s\\n'*9+l)%tuple(\"FKCIIBAVWMGNPTNCCSPPSVCSPELSBJCVCORIBCMG\")",
        "print'\\n'.join(map(' '.join,['FKCIIBAVWMG']+map((' '*9).join,zip('NTCSPVSES','PNCPSCPLB'))+['JCVCORIBCMG']))"
    ],
    "is-it-a-proth-number": [
        "lambda n:(~-n&1-n)**2>n",
        "lambda N:N-1&1-N>N**.5"
    ],
    "ninjas-and-monkeys-and-bears-oh-my": [
        "def f(n):\n for x in\"NBM BM NB M B N\".split():print`n.count(x)`+x,;n=n.replace(x,\"+\")",
        "n=input()\nfor x in\"NBM BM NB M B N\".split():n=`n`.split(x);print`len(n)-1`+x,"
    ],
    "output-numbers-up-to-2n-1-sorted": [
        "lambda n:[(2<<i)-1<<j for i in range(n)for j in range(n-i)]",
        "lambda n:[(2<<k/n)-1<<k%n for k in range(n*n)if k/n+k%n<n]",
        "f=lambda n,i=1:n*[f]and[i]+f(n-1,2*i)+i%2*f(n-1,i-~i)",
        "n=2**input()\nj=i=1\nwhile j<n:\n print i;i*=2\n if i/n:i=j=2*j+1",
        "lambda n:[2**-~i-1<<j for i in range(n)for j in range(n-i)]",
        "a=int(input())\nprint(*[int('1'*-~b,2)<<c for b in range(a)for c in range(a-b)],sep=', ')"
    ],
    "generate-100-java-tuple-classes": [
        "r=range\nfor i in r(1,101):print('class Tuple%d {public Object _0'%i,*r(1,i),sep=',_',end=';}\\n')",
        "r=range\nfor i in r(1,101):print\"class Tuple%d {public Object _%s;}\"%(i,',_'.join(map(str,r(i))))",
        "s=\"class Tuple%d {public Object _0\"\ni=1\nexec\"print s%i+';}';s+=',_%d'%i;i+=1;\"*100",
        "def f(n=99):s=n and f(n-1)+',_'+`n`or\"class Tuple%d {public Object _0\";print s%-~n+';}';return s",
        "i=1;exec'print\"class Tuple%s {public Object _\"%i+\",_\".join(map(str,range(i)))+\";}\";i+=1;'*100",
        "[print('class Tuple%s {public Object %s;}'%(i,','.join('_%i'%j for j in range(i))))for i in range(1,101)]"
    ],
    "difference-of-the-square-of-the-sum": [
        "f=lambda a,b,s=0:b/a and 2*a*s+f(a+1,b,s+a)",
        "lambda a,b:(a+~b)*(a-b)*(3*(a+b)**2+a-b-2)/12",
        "def a(l, u):\n    c=0\n    d=0\n    for e in range(l, u+1):\n        c+=e\n        d+=e**2\n    return c**2-d",
        "lambda a,b:sum(range(a,b+1))**2-sum(x*x for x in range(a,b+1))",
        "lambda a,b:sum(x*y*2for x in range(a,b+1)for y in range(x+1,b+1))"
    ],
    "detriplicate-a-string": [
        "f=lambda s:s and f(s[:-1])+s[-1]*(s.count(s[-1])<3)",
        "lambda s:reduce(lambda r,c:r+c*(r.count(c)<2),s)"
    ],
    "lonely-multiplication": [
        "l=input();r=1\nfor x in l:r*=1%l.count(x)or x\nprint r",
        "lambda l:eval(\"(%sin[%s,%s]or %s)*\"*3%(l*4)+\"1\")"
    ],
    "is-there-a-bump": [
        "lambda l:any(p>c<n or p<c>n for p,c,n in zip(l,l[1:],l[2:]))",
        "def f(a):return[i for i,j in enumerate(a[1:-1])if(j>max(a[i+2],a[i])or j<min(a[i+2],a[i]))]",
        "f=lambda x,y,z,*t:0>(y-x)*(z-y)or f(y,z,*t)"
    ],
    "output-a-pyramid-or-highway": [
        "s,n=input();m=n\nwhile m:m-=1;print' '*(m*len(s)/2)+''.join(i*(n-m)for i in s)",
        "s,n=input()\nfor i in range(n):print''.join(c*-~i for c in s).center(len(s)*n)"
    ],
    "how-many-lights-are-on": [
        "d=set()\np=0\nfor c in input():p+=1j**(ord(c)%11);d^={p}\nprint(len(d))",
        "a = input()\nl=[]\nfor i in range(0,len(a)):\n if a[i]=='v':y-=1\n if a[i]=='^':y+=1\n if a[i]=='<':x-=1\n if a[i]=='>':x+=1\n if [x,y] in l:l.remove([x,y])\n else:l.append([x,y])\nprint(l)"
    ],
    "error-correct-text": [
        "def f(s,t=118,u=-10340):\n for x in s:t-=x-96;u-=t\n *l,=s;l[u//t]+=t;return bytes(l)",
        "def f(s,n=0):k=s[:n>>7]+chr(n%128)+s[n/128+1:];return 0x2e838ca8118c7496+hash(k)and f(s,n+1)or k"
    ],
    "judge-a-book-by-its-cover": [
        "lambda b:len({j.pop(1)for j in b[1:5]*4}-{' '})-sum(map(`b`.count,'{}~'))",
        "lambda b:len({*(b[8:12]+b[15:19]+b[22:26]+b[29:33])})-21+sum(map(b.count,\"-|_\"))",
        "lambda s:len(set((s[8:-6]*4)[::7]+' '))-21+sum(map(s.count,'_|-'))",
        "lambda s:len(set((s[8:-6]*4)[::7])-{' '})-20+sum(map(s.count,'_|-'))"
    ],
    "mark-my-mail-ascii-barcodes": [
        "def f(i,r=[]):\n while i:r=[' | |||||  ||'[i%4::4]]+r;i//=4\n k='|| ',' | ';[*map(print,*k,*r,*k)]",
        "i=input();r=[1,0];c=\"  \",\"| \";a=b=\"\"\nwhile i:r=[i%4]+r;i=i/4\nfor x in[1,0]+r:a+=c[x%2];b+=c[x>1]\nprint a+\"\\n\"+c[1]*len(r)+\"| |\\n\"+b",
        "c=a=0,1\nn=input()\nwhile n:c+=n%4,;n/=4\nfor l in zip(*[' |'[n%2]+'|'+' |'[n/2]for n in c+a][::-1]):print' '.join(l)",
        "B=lambda n:n<4and`n`or B(n/4)+`n%4`\ndef F(i):\n for r in 0,1,2:print' '.join(\" |\"[(int(x)%2,1,x>'1')[r]]for x in'10'+B(i)+'10')"
    ],
    "579085261-is-crazy-725582-is-golf-10757494-is": [
        "lambda x:(lambda a,b,e,k,l,m,q,p:len.__name__[:a].join(dict(zip((lambda n:(lambda n,f,g:f(n,e,[],f,g))(n,lambda n,i,r,f,g:g(n,i+b,r,f,g)if i<n else r,lambda n,i,r,f,g:f(n,i,[r,r+[i]][all(i%x!=a for x in[e]+r)],f,g)))(l*e*(k*l+b)),(lambda n,o,t:(lambda n,f,g:f(n, len.__name__[:a],f,g))(n,lambda n,s,f,g:g(n,s,f,g)if n>o else s,lambda n,s,f,g:f(n//t,s+chr(n%t),f,g)))((((((k<<e)-b)<<m)+m)<<((k<<q)+(k<<b)))+(((((k<<e)-b)<<e)+b)<<((k<<q)-(b<<b)))+((((((b<<k)+b))<<l)+b)<<((((k<<e)-b)<<l)+(b<<b)))+(((((k<<e)-b)<<l)-k)<<((m<<m)+p))-(((p<<m)-b)<<((m<<m)-(b<<b)))+(((m<<k)+b)<<((((m<<e)-b)<<k)-(b<<b)))+(((((k<<e)-b)<<l)-m)<<((((b<<l)+b)<<k)+k))-(((((b<<l)-b)<<l)-p)<<((b<<p)+(b<<b)))-(((p<<k)-b)<<((((b<<l)-b)<<k)+k))-(((k<<q)-b)<<((p<<l)))+(((m<<m)+m)<<((((k<<e)+b)<<k)-b))-(((k<<m)+b)<<((k<<m)-b))-(((m<<m)+k)<<((((k<<e)-b)<<k)-(b<<b)))+(((((k<<e)+b)<<e)+b)<<((m<<l)-(b<<e)))-(((((k<<e)+b)<<e)+b)<<((((b<<l)+b)<<e)-b))+((((((b<<k)+b))<<k)+b)<<((p<<k)))+(((((k<<e)-b)<<k)-k)<<((k<<l)))+(((m<<l)+b)<<((m<<k)))+(((m<<e)-b)<<((b<<m)+(b<<b)))+((((((b<<k)+b))<<e)-b)<<((k<<k)+b))+(((m<<k)-b)<<((b<<l)+b))-((((k<<e)-b))<<((k<<e)))+(((m<<e)+b)<<e)-b,b,b<<l*e)))[i]for i in(lambda x: [x.remove(e), x[::-b]][b] if e in x else x)((lambda x:(lambda x,g,h:g(x,b,[],g,h))(x,lambda x,n,r,g,h:h(x,n+b,r,g,h)if x>b else r,lambda x,n,r,g,h:h(x//n,n,r+[n],g,h)if x%n==a else g(x,n,r,g,h)))(x))))(*[x for x in range(True<<len(len.__name__))])",
        "n=input()\ni=1\nL=[]\nexec'i+=1;c=0\\nwhile n%i<1:c+=1;n/=i\\nif c:L+=[i]*c\\n'*n\nT='SPMFLQUIXNCWORAGZTEJHVDBKY'\nprint''.join(T[[p for p in range(3,104)if all(p%k for k in range(2,p))].index(q)]for q in[L,L[:0:-1]][L[0]<3])"
    ],
    "11-12345-123-6-4": [
        "n=int(input())\nS=sum\nl=[1]\ni=s=1\nwhile S(l)<n:i+=1;l+=[i]\nwhile S(l)!=n:\n while S(l)>n:l.pop(0)\n s+=1\n if S(l)<n:i+=1;l+=[i];s+=1\nprint(s)",
        "N=input();i=s=0;l=()\nwhile N!=sum(l):exec'while sum(l)'+['<N:i+=1;l+=i,','>N:l=l[1:]'][s%2];s+=1\nprint s",
        "n=input()\nl=u=i=s=0\nwhile n:k=n>0;i+=k^s;s=k;l+=k;n-=l*k;u+=k^1;n+=u*-~-k\nprint i"
    ],
    "sort-by-multiplying": [
        "def m(l):\n for x in range(1,len(l)):l[x]*=l[x-1]/l[x]+1\n print l",
        "def f(a):\n r=[0]\n for i in a:r+=i*(r[-1]//i+1),\n return r[1:]",
        "lambda a:reduce(lambda b,v:b+[b[-1]/v*v+v],a,[0])[1:]"
    ],
    "print-a-booklet": [
        "lambda n:sum([[i,i+1,n-i,n+~i]for i in range(1,n/2,2)],[n])[:n]",
        "[*...]",
        "lambda n:map(range(1,n+1).pop,n/4*[-1,0,0,-1])",
        "f=lambda n,k=1:n>k and[n,k,k+1,n-1]+f(n-2,k+2)or[]",
        "f=input()\nfor i in range(1,f/2,2):print-~f-i,i,i+1,f-i,"
    ],
    "which-row-is-the-key-on": [
        "e=\"\\n\";lambda x:(\"`1234567890-=~!@#$%^&*()_+qwertyuiop[]\\\\QWERTYUIOP{}|asdfghjkl;'ASDFGHJKL:\\\"\"+e*4+\"zxcvbnm,./ZXCVBNM<>?\"+e*13+\" \").index(x)/26+1",
        "print(int((\"~`!1@2#3$4%5^6&7*8(9)0_-+=\"\"qwertyuiop{[}\\|\"+\"]\"*11+'asdfghjkl;:\"\\n'\"'\"*13+\"zxcvbnm,<.>/\"\"?\"*14+\" \").index(input().lower())/26)+1)",
        "print(\"qwertyuiop{}[]\\\\|asdfghjkl;:\\\"\\n'''zxcvbnm,.<>/???? \".find(input().lower())//16+2)"
    ],
    "draw-the-cool-s": [
        "I=n=2*input()\nR,L,S,P='/\\ |'\nk=n*[2*(P+S*n)+P]\nexec\"k=[R+S+2*S*I+L]+k+-~I%2*[L+S*n+L+S*I+R];I-=1;\"*-~n\nprint'\\n'.join(t.center(2*n+3)for t in['^']+k+[a[::-1]for a in k[::-1]]+['v'])",
        "n=int(input())\nb,f='\\/'\nc,l=4*n+3,10*n+6\nr=range\nh=c//2\nL=[c*[' ']for _ in r(l)]\nL[0][h],L[-1][h]='^v'\nfor i in r(h):a=L[h-i];a[i],a[c+~i]=f,b\nfor i in r(2*n):L[h-~i][0::h]='|'*3\nfor i in r(n+1):a=L[h+h+i];a[c+~i],a[i:c-1:h]=f,b*2\nfor i in r(1,l//2):L[l+~i]=L[i][::-1]\nprint('\\n'.join(''.join(i)for i in L))",
        "n=int(input())\nm=2*n\na,b,q,c,l='\\ \\n/|'\nf=m*b\ns=q+q.join([f[d:]+c+b*2*d+b+a+f[d:]for d in range(m+1)]+[l+f+l+f+l]*m+[d*b+a+f+a+f[d*2:]+c+d*b for d in range(n)]+[n*b+a+f+a+c+n*b])\nprint(f,'^'+s+q+s[::-1]+f,'v')"
    ],
    "acronyms-can-really-obviously-narrow-your-message-sensors": [
        "x=input().lower()\ny=input().lower().split()\ng=all(x[i]==y[i][0]for i in range(len(y)))\nprint(g,g&(x in y))",
        "a=input().lower()\nd=input().lower().split()\nh=tuple(a)==next(zip(*d))\nprint(h,h&(a in d))"
    ],
    "array-alignment-addition": [
        "def f(a,b):\n x=[];e=f=0              \n while 1:\n  if e==len(a):         \n   print(x);x=[];e=0;\n   if f==len(b):break\n  if f==len(b):print(x);x=[];f=0\n x+=a[e]+b[f],;e+=1;f+=1",
        "a,b=input()\ni=m=n=0;r=[]\nwhile(not i)+m+n:r+=[[]]*(not m*n);r[-1]+=[a[m]+b[n]];i+=1;m=i%len(a);n=i%len(b)\nprint r",
        "a=input()\ni,v,l=0,list(a),len\nwhile 1:q=l(v[0])>l(v[1]);print map(sum,zip(*v)[i:]);i=l(v[q]);v[q]+=a[q];1/(i-l(v[q^1]))"
    ],
    "music-whats-in-this-chord": [
        "n,a='A A# B C C# D D# E F F# G G#'.split(),input();m,i=ord(a[-1])-42,n.index(a[:-1])\nprint(n[i],n[(i+4-m//2)%12],n[(i-4+(-m//2))%12])",
        "I='AaBCcDdEFfGg'*2\nQ='0123456789.,'*2\nK=\"\"\"-1#_2\n-,#_0\n-9#_.\n____8\n-6#_7\n-4#_5\n____3\"\"\"\nr,*R,q=input()\nr=I.find(r)+bool(R)\np=str.replace\nfor x in[0]+[8,4,7,3,6]['+Mm0'.find(q):][:2]:K=p(K,Q[x+r],I[x+r].upper())\nfor x in Q:K=p(K,x,' ')\nprint(p(K,' #','  '))",
        "z=[\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"];y=[1,2,4,5,6]\ndef q(a):print(z[a%12])\na=input();k=(ord(a[0])+3)%7;j=k;m=4;s=0;f=7;\nfor i in y:\n    if(k>=i):j+=1\nif('#'in a):j+=1\nif('b'in a):j-=1\nif('m'in a or'0'in a):m=3\nif('+'in a or\"aug\"in a):f=8\nif('0'in a or\"dim\"in a):f=6;m=3\nif('ma'in a):m=4\nq(j);q(j+m);q(j+f);",
        "pygame.midi"
    ],
    "tool-assisted-code-golf": [
        "print\"start\\n\\n\"*19+(27*\"A right\\n\"+\"\\n\")*99",
        "i=0\nprint'\\n'*33+'start'\nfor c in'~~22 +  2 2? @  F        . \\r0'+'@'*10:print'A B right\\n'[i:]*ord(c);i^=2"
    ],
    "when-do-i-get-my-sandwich": [
        "lambda s:'enklact'.find(s[3])",
        "lambda S:`6793**164`[len(S)]",
        "lambda S:1923136>>len(S)&7"
    ],
    "does-the-start-equal-the-end": [
        "s=input()\ns[0]!=s[-1]<e",
        "lambda s:s[0]==s[-1]if s else False",
        "lambda x:bool(x)and x[0]==x[-1]",
        "lambda a:a[0]==a[-1]!=''",
        "s=input()\nif s:print(s[0]==s[-1])\nelse:print(False)",
        "lambda x:\"\"<x[:1]==x[-1]"
    ],
    "is-this-number-triangular": [
        "n=input();i=s=0\nwhile s<n:s=(i*i+i)/2;i+=1\nprint s>n",
        "lambda x:(8*x+1)**.5%1==0",
        "lambda n:0in[n:=n+~i for i in range(n)]",
        "lambda n:(8*n+1)**.5%1>0"
    ],
    "your-very-own-for-instruction": [
        "e=input;exec(f'i={e()}\\nwhile i{e()}{e()}:print(i);i+={e()}')",
        "exec\"i=%d\\nwhile i%c%d:print i;i+=%d\"%input()",
        "def f(a,b,c,d):\n while[a>c,a<c][b<'>']:print(a);a+=d",
        "a,b,c,d=input()\nwhile eval(`a`+b+`c`):print a;a+=d"
    ],
    "consolidate-an-array": [
        "'SourceArray'",
        "lambda x:sorted(x,key=0..__eq__)",
        "def f(i):i.sort(key=0..__eq__)"
    ],
    "octothorpeasciiart": [
        "lambda x:[[(' #'[i//x%2]+'#')[j//x%2]for j in range(5*x)]for i in range(5*x)]",
        "def f(n):p=[(\" \"*n+\"#\"*n)*2]*n;print(p+[\"#\"*n*5]*n)*2+p",
        "r=[1-1*(i%(2*n)<n)for i in range(5*n)]\nprint[''.join(' #'[r[k]+r[j]>0]for k in range(len(r)))for j in range(n*5)]",
        "def f(a):i='print(\" \"*a+\"#\"*a)*2;'*a;exec(i+'print\"#\"*a*5;'*a)*2+i"
    ],
    "exploded-view-of-a-string": [
        "lambda s:[a*s.count(a)for a in{*s}-{' '}]",
        "x=sorted(input())\ni=0\nwhile i<len(x):x[i:]=['  '*(x[i]!=x[i-1])]+x[i:];i-=~(x[i]!=x[i-1])\nprint(\"\".join(x))"
    ],
    "dont-give-me-five": [
        "f=lambda a,b:a<=b and-(`5`in`a`)-~f(a+1,b)",
        "i,j=input();k=0\nwhile i<=j:k+=not\"5\"in`i`;i+=1\nprint k",
        "lambda a,b:len([n for n in range(a,b+1) if not\"5\"in`n`])"
    ],
    "do-the-26-richest-billionaires-own-as-much-wealth-as-the-poorest-3-8-billion-peo": [
        "l,n=input()\ns=sum(l[:n])\nwhile sum(l[n:])>s:n+=1\nprint l[n:]",
        "f=lambda l,n:l[n:]*(sum(l)/2>=l.pop(n)+sum(l[n:]))or f(l,n)",
        "def f(l,n):\n s=sum(l[:n])\n while(w:=l.pop())<s:yield w;s-=w",
        "lambda L,n:[L[i]for i in range(len(L)-n)if sum(L[:i+1])<=sum(L[-n:])]"
    ],
    "advance-happy-new-year-2016": [
        "lambda a:a+5+(a%4)**3%7",
        "x=input()\nprint[5,6,6,11][x%4]+x",
        "def s(y):\n d=lambda j:(j+j//4)%7\n for i in range(y,y+15):\n  if d(i)==d(y-1):return\"Advance Happy New Year, %d (%s)\"%(-~i,\"SMTWTFSuouehranneduit\"[d(i)::7])"
    ],
    "print-the-alphabet-four-times": [
        "#coding:u8\nprint u\"\u6261\u6463\u6665\u6867\u6a69\u6c6b\u6e6d\u706f\u7271\u7473\u7675\u7877\u7a79\u7771\u7265\u7974\u6975\u706f\u7361\u6664\u6867\u6b6a\u7a6c\u6378\u6276\u6d6e\u7970\u6766\u7263\u616c\u656f\u6975\u6864\u6e74\u7173\u6b6a\u6278\u776d\u7a76\u797a\u7778\u7576\u7374\u7172\u6f70\u6d6e\u6b6c\u696a\u6768\u6566\u6364\u6162\".encode(\"u16\")[2:]",
        "q=\"qwertyuiopasdfghjklzxcvbnm\"\na=\"\".join(sorted(q))\nprint a,q,\"pyfgcrlaoeuidhtnsqjkxbmwvz\",a[::-1]",
        "for i in range(104):print chr((ord(u'\u0820\u1483\u20e6\u2d49\ufffd\ufffd\u5272\u5ed5\ufffd\ufffd\u5313\ufffd\u0e40\u1cc5\u2d49\u0af9\ufffd\u61ec\u08c5\u0171\u508e\u1c68\ufffd\u2930\u3037\ufffd\u5f19\u52b6\ufffd\ufffd\u2d8dK\u14c7\u0864^A'[i/3])>>i%3*5&31)+97),"
    ],
    "boustrophedonise": [
        "lambda k:[r[::i%-2|1]for i,r in enumerate(k)]",
        "def f(k):k[::2]=map(reversed,k[::2])",
        "lambda l:[u[::(-1)**i]for i,u in enumerate(l)]"
    ],
    "golf-a-mutual-quine": [
        "\"00gr00g:a9*2+$' tnirp'>o<",
        "q=chr(124);s='@%sq=chr(124);s=%s;print(s%%repr(s))%s:';print(s%(q,repr(s),q))",
        "s='<@,kM%c%cs=%c%s%c;print s%%(39,34,39,s,39,34)%c';print s%(39,34,39,s,39,34)",
        "class Q{public static void main(String[]a){char q=34,c=39;String s=\"print%sclass Q{public static void main(String[]a){char q=34,c=39;String s=%s%s%s;System.out.printf(s,c,q,s,q,c);}}%s\";System.out.printf(s,c,q,s,q,c);}}",
        "s='puts %%q{s=%r;print s%%s}';print s%s"
    ],
    "cat-quine-hello-world": [
        "a=id=\"\"\nwhile 1:a=input(a)+\"\\n\";",
        "id='id=%r;print id%%id';print id%id"
    ],
    "count-to-20-with-words": [
        "print'i am now tiny @ @s##s#ed#act#acts#@#@s#@ed#@ing#arguments#accusation#accusations#advertisings'.replace('#',' counter').replace('@','check')",
        "z='odahs princesses acclimatizers cyanocobalamines aerothermodynamics underrepresentations'.split()\nprint([y[:i+1]for x,y in zip(['']+z,z)for i in range(len(x),len(y))])",
        "for w in\"agar abreacts acknowledges codeterminations deindustrializations\".split():print w[2:-1],w[2:],w[:-1],w,"
    ],
    "find-the-largest-number-thats-adjacent-to-a-zero": [
        "lambda a:max(sum(x)for x in zip(a,a[1:])if 0in x)",
        "def f(x):x=[9]+x;print max(x[i]for i in range(len(x)) if 0in x[i-1:i+2:2])"
    ],
    "semi-diagonal-alphabet": [
        "lambda l:[' '*i+'%c '%(i+65)*-~i for i in range(ord(l)-64)]",
        "i=1\nexec\"print' '*i+'%c '%(i+64)*i;i+=1;\"*(ord(input())-64)"
    ],
    "aligning-lines": [
        "c,*s=input().split('\\n')\nfor x in s:print(' '*(max(z.find(c)for z in s)-x.find(c))+x)",
        "def a(d,l):\n i=l[0].index(d)\n for e in l:print' '*(i-e.index(d))+e",
        "def f(x,y,z):\n p=y.index(x)-z.index(x)\n if p<0:y=\" \"*abs(p)+y\n else:z=\" \"*p+z\n print y+'\\n'+z"
    ],
    "generate-the-abacaba-sequence": [
        "a=lambda n:'a'[n:]or(b:=a(n-1))+chr(97+n)+b",
        "f=lambda n:\"a\"[n:]or f(n-1)+chr(97+n)+f(n-1)",
        "a=lambda n:n and a(n-1)+chr(97+n)+a(n-1)or'a'"
    ],
    "temperature-converter": [
        "s=raw_input();i=eval(s.split()[0]);d={\"C\":\"%f K\\n%f F\"%(i+273,32+i*1.8),\"K\":\"%f C\\n%f F\"%(i-273,i*1.8-459.4),\"F\":\"%f C\\n%f K\"%(i/1.8-17.78,i/1.8+255.2)};print d[s[-1]]`",
        "s=raw_input().split();v=eval(s[0]);c,t=(v-32)/1.8,v-273.15\nprint[[\"%fC\\n%fF\"%(t,t*1.8+32),\"%fK\\n%fC\"%(c+273.15,c)][s[1]==\"F\"],\"%fK\\n%fF\"%(v+273.15,v*1.8+32)][s[1]==\"C\"]",
        "I=input()\nt=eval(I[:-1])\nu=ord(I[-1])%7\nexec(\"u=-~u%3;t=[t*1.8-459.67,(t-32)/1.8,t+273.15][u];print(t,'FCK'[u]);\"*2)"
    ],
    "leaping-kangaroos": [
        "lambda n:'\\n'.join(map(''.join,zip(*[' '*abs(i)+'o'+~-n*' 'for i in range(-n+1,n-1)*2**~-n])))+'o'",
        "n=input()\ni=0\nexec\"s=' '*n+'o'+' '*i;i+=1;print(s[i:-1]+s[:i:-1])*2**~-n+s[i];\"*n",
        "n=5;f=n-1;w=''\nfor i in range(n):\n s='';a=0;d='\\n'\n if i==f:w='';a=-1;d=''\n for _ in range(2**f):\n  s+=' '*(f-i)+'o'+' '*(2*i-1)+w+' '*(n-i-2+a)\n print(s,end=d);w='o'\nprint('o')",
        "n=input()\nfor i in range(n):print''.join(' o'[abs(j%(2*n)-n)==i]for j in range(1,n<<n))"
    ],
    "draw-me-a-domino": [
        "lambda x,y,d=\"001155777702020202570044557777\":[(\"%03d\"%int(bin(int(o))[2:]),\"---\")[o==\"3\"]for o in d[x::10]+\"3\"+d[y::10]]",
        "lambda*a:[[[n>3,n>5,n>1],[n>7,n%2,n>7],[n>1,n>5,n>3]]for n in a]"
    ],
    "output-the-largest-number-with-the-fewest-digits": [
        "lambda l:max((-len(`x`),x) for x in l)[1]",
        "def F(x):l={len(`i`):i for i in sorted(x)};print l[min(l)]",
        "lambda a:sorted(sorted(a),key=lambda x:-len(str(x)))[-1]",
        "lambda a:a.sort()or[`i`for i in a if len(`i`)==len(`a[0]`)][-1]"
    ],
    "pretty-print-polynomials": [
        "k=str.replace\ndef f(x):\n z=len(x)\n y='--'*(['-1']==[c for c in x if'0'!=c][:1])\n for i,v in enumerate(x):\n  p=str(z+~i)\n  if v in'-1'and~i+z:y+='+x^'+p\n  elif'0'!=v:y+='+'+v+'x^'+p\n return y and k(k(k(k(y[1:],'+-','-'),'^1',''),'x^0',''),'-+','-')or 0",
        "l=len\nlambda p:''.join(['+'*(i>0)*(c>0)+(str(c)[:-1],str(c))[abs(c)!=1or i==l(p)-1]+'x'*(i!=l(p)-1)+('^%d'%(l(p)+~i))*(i<l(p)-2)for i,c in enumerate(p)if c])or'0'",
        "lambda a:\"\".join([(\"+\"if c>0 and i+1<len(a)else\"\")+(str(c)if i==0 or abs(c)!=1 else \"\")+{0:\"\",1:\"x\"}.get(i,\"x^\"+str(i))for i,c in enumerate(a[::-1])if c][::-1])or\"0\""
    ],
    "triangulating-text": [
        "def f(s,p=''):\n i=-int(len(2*s)**.5)\n if s:f(s[:i],p+' ');print p+' '.join(s[i:])",
        "s=t=raw_input()\ni=1\nwhile s:print' '*int(len(t*2)**.5-i)+' '.join(s[:i]);s=s[i:];i+=1"
    ],
    "construct-a-tornado": [
        "x,z=input()\nfor i in range(x):print' '*sum(z[:i])+'#'*(x-i)",
        "l,a=input()\ns=\"#\"*l\nfor i in a+[0]:print s;s=\" \"*i+s[:-1]"
    ],
    "making-squared-words": [
        "i=input();n=k=len(i)-2\nprint i\nexec'print i[~k]+\" \"*n+i[k];k-=1;'*n\nif~k:print i[::-1]",
        "a=input()\nb=len(a)\nfor i in range(b-2):print(a[1+i]+\" \"*(b-2)+a[-2-i])\nprint(a[::-1])",
        "w=input();p=print;l=len(w)-2\n[p(w[n+1]+' '*l+w[l-n])for n in range(l)]\nl+1and p(w[::-1])",
        "lambda s:s[1:]and[s]+[s[i]+' '*(len(s)-2)+s[~i]for i in range(1,len(s)-1)]+[s[::-1]]or s",
        "lambda a:'\\n'.join([a]+(len(a)>1)*([a[i]+(len(a)-2)*' '+a[~i]for i in range(1,len(a)-1)]+[a[::-1]]))",
        "w=input();p=print;l=len(w)-2\ndef f(k):p(w[k]+' '*l+w[-k-1]);l-k>0and f(k+1)\nl<0 or f(1)or l<1or p(w[::-1])"
    ],
    "shortest-terminating-program-whose-output-size-exceeds-grahams-number": [
        "x=999\nb='A('*x+'5,5'+')'*x\ndef A(m,n):n+1 if m==0 else A(m-1,A(m,n-1)if n>0 else 1)\nexec('print A('%s,%s')'%(b,b))",
        "m=lambda x:-x if x<0 else m(x-m(x-1))/2;print(1/m(9))"
    ],
    "ascii-clock-with-dot-comma-time-markers": [
        "t=input();m,h=t%60,t/60\nprint\";\"*min(h,m)+\",\"*(m-h)+\"'\"*(h-m)",
        "d=int(input());m=d%60;h=int((d-m)/60)\nif m>=h:print(\";\"*h+\",\"*(m-h))\nelse:print(\";\"*(m)+\"'\"*(h-m))",
        "def g(t):d=t%60-t/60;print(t/60*\";\")[:t%60]+\",\"*d+\"'\"*-d"
    ],
    "output-the-missing-integer": [
        "lambda s:-int(s,16)%15",
        "`99066**2`.strip"
    ],
    "consecutive-1-bits-are-incremented": [
        "def f(d):\n    c = 0\n    r = []\n    for e in d:\n        if e == 1:\n            r.append(1 + c)\n            c += 1\n        else:\n            c = 0\n            r.append(0)\n    return r",
        "i=1\nfor x in input():i*=x;print i;i+=1",
        "f=lambda x,y=1:x and[y*x[0]]+f(x[1:],y*x[0]+1)",
        "c=0\nfor i in input():c=c*i+i;print c"
    ],
    "print-all-alphanumeric-characters-plus-underscore": [
        "r=range\nprint''.join(map(chr,r(97,123)+r(65,91)+r(48,58)))+'_'",
        "print('_',*filter(str.isalnum,map(chr,range(123))),sep='')",
        "print''.join(chr(a)for a in range(123)if chr(a).isalnum())+'_'"
    ],
    "pwas-eht-tirsf-dna-tasl-setterl-fo-hace-dorw": [
        "\" \".join([x[-1] + x[1:-1] + x[0] if len(x) > 0 else x for x in text.split()])",
        "print(*[x[-1]+x[1:-1]+x[:x>x[0]]for x in input().split()])",
        "lambda s:' '.join(w[1:][-1:]+w[1:-1]+w[0]for w in s.split())"
    ],
    "speed-of-lobsters": [
        "f=lambda s,t:s and('*'+s)[x:=s[0]==t[:1]]+f(s[1:],t[x:])",
        "def f(t,g,i=0):\n l=['*']*len(t)\n for c in g:i=t.find(c,i);l[i]=c*(i>=0)\n return l"
    ],
    "rgs-1-5-binary-multiples": [
        "def f(n):\n s=\"1\"\n while 2>1:\n  if int(s)%n==0:\n   return s\n  if \"0\" in s:\n   for j in range(0,len(s)):\n    if s[j]==\"0\":\n     q=j\n   t=s[:q]\n   for k in range(q,len(s)):\n    t=t+str(1-int(s[k]))\n   s=t\n  else:\n   s=str(10**len(s))",
        "f=lambda k,n=0:max(`n`)!='1'and k+f(k,n+k)",
        "f=lambda k,n=0:n*(max(`n`)<'2')or f(k,n+k)",
        "f=lambda k,n=0:n*({*str(n)}<={*\"01\"})or f(k,n+k)",
        "f=lambda k,n=1:(i:=int(f\"{n:b}\"))%k and f(k,n+1)or i"
    ],
    "cops-square-times-square-root": [
        "axx 2*d:b.*5mal",
        "q=a(lxt)mh*mprf.hr\nax tttaixxmb :m*asod",
        "(sexypint=='pint')**(55.0)**fur==(.3%0%y)",
        "ba(,b5,d' (,a/([m:'-)oa)(bl*aadplma dba](r)d )l*d,:)*m:-mml",
        "_cc*gnta(dkree_rtrto._i9kuc_ l5_r_cctbimWka(Wihlkeu_5_eur_rri_keeluc4clrp ..u_)(HohhH)ap5o(trbnord_ir9/*in)_clrikroap.ie.tg_obkfkseeeel*in2Hkdu*ffmo4lWlrncde_22);doodt a49 hu",
        "np5w***i0(0(0r0n0t+iarn00p0)_(0tu00i50.0)) t",
        "'**:(((paraboloid / rabid,mad,immoral))):**'",
        "f1;7*x0d/2p6*mm1i*99 5 a o o t(a bphpx:m38af4r*1221=s2rm.0itlpa)",
        "3n0)4  5)594p3(p5*5i9t4542)0/*((8(t.84- 90945 u)i*48/95n8r8",
        "f=lambda x:x**125*77*8+8/5/((('aafoort.hipie.xml')))"
    ],
    "print-all-numbers-from-100-to-100-which-contain-a-given-digit": [
        "def f(i):\n n=-100\n while n<101:\n  m=abs(n)\n  if i in [m%10]+[m/10,m>99]*i: print n,\n  n+=1",
        "f = lambda x: filter(lambda y: x in(abs(y) % 10, abs(y)/10, abs(y)/100) if x else y%10 < 1, xrange(-100,101))",
        "def f(x,y,z):\n    if x%10==y or (x>9 and x/10==y) or (x==100 and y==1):\n        print z\ndef g(x,y):\n    f(abs(x),y,x)\n    if x<100:\n        g(x+1,y)\ndef h(y):\n    g(-100,y)",
        "n = int(raw_input())\nfor x in xrange(-100,101):\n    num = abs(x)\n    while num:\n        if n == num%10:\n            print x\n            break\n        num /= 10"
    ],
    "duplicate-switch-case": [
        "lambda s:''.join(c+c.swapcase()*c.isalpha()for c in s)",
        "lambda s:''.join((x,x+x.swapcase())[x.isalpha()]for x in s)",
        "for i in input():print(end=i+i.swapcase()[:i.isalpha()])"
    ],
    "equal-sum-or-difference": [
        "lambda a,b:a+b==5or`a-b`in\"0-5\"",
        "lambda a,b:a+b==5or abs(a-b)==5or a==b",
        "lambda a,b:a in(b,5-b,b-5,b+5)"
    ],
    "a-crowd-of-blank-stares": [
        "print \"(<(<>(<>.(<>.<(<>.<>(<>.<>)<>.<>)>.<>).<>)<>)>)\"",
        "f=lambda i=5:L*0**i or L[:-i]+f(i-1)+L[i:]\nL='(<>.<>)'",
        "print''.join(\"(<>.<>)\"[max(0,n-5):n+2]for n in range(11))",
        "for i in range(11):print(end='(<>.<>)'[i-12:i+2])"
    ],
    "happy-birthday-finland": [
        "90/5 == 90//5",
        "time()"
    ],
    "list-all-possible-titles-for-the-anno-games": [
        "n=999\nexec\"n+=9\\nif'0'in`n`>int(`n`,11)%10>8:print n\\n\"*n",
        "print[y for y in range(9001)if('0'in`y`)*sum(map(ord,`y`))==201]"
    ],
    "oddly-even-positively-negative": [
        "lambda n:(-1)**n*~(n/2^n%2)",
        "lambda n:~n/2+n%2*(n|2)"
    ],
    "divisibility-streak": [
        "i=input();k=1\nwhile~-i%-~k<1:k+=1\nprint k",
        "f=lambda n,x=1:n%x<1and-~f(n+1,x+1)",
        "f=lambda n,x=1:~-n%-~x and x or f(n,x+1)"
    ],
    "n-th-term-of-the-rise-reset-sequence": [
        "f=lambda n,m=1:n*(n<=m)or f(n-m,m+1)",
        "c=1\nu=0\nn=input()\nwhile u<n:u+=c;c+=1\nprint(n-u+c)"
    ],
    "making-a-coin-fair": [
        "f=lambda L:L[1:]and L[:L[0]^L[1]]+f(L[2:])",
        "lambda n:[s for s,t in zip(*[iter(n)]*2)if s!=t]",
        "lambda s:hex(int('110'+s[::-1],4))[:3:-1].translate({48:'',53:'',52:48})"
    ],
    "folding-numbers": [
        "m=n=input()\ni=0\nwhile m:i*=2;i+=m&1;m/=2\nprint(n+i+1)&(n+i)",
        "s=bin(input())[2:]\nwhile''<s!='1':s[-1]==s[0]<_;s=s[1:-1]",
        "s=bin(input())[2:]\nwhile s[0]!=s[-1]:s=s[1:-1]or'1'\nprint'1'==s",
        "F=lambda s:s in'1'or(s[0]!=s[-1])*F(s[1:-1])\nlambda n:F(bin(n)[2:])"
    ],
    "how-long-should-my-microwave-run": [
        "lambda t:t-t/100*40",
        "__=-~-~_-_\n_-=_/(__<<__^__)**__*(__-~__<<-~__)"
    ],
    "never-tell-me-the-odds": [
        "lambda d,n:[i for i in range(1,n+1)if`i`.count(d)%2<1]",
        "f=lambda d,n:filter(lambda x:x.count(`d`)%2^1,map(str,range(1,n+1)))",
        "f=lambda d,n:n*[0]and f(d,n-1)+~`n`.count(d)%2*[n]",
        "lambda n,d:[i for i in range(n+1)if len([j for j in list(str(i))if j==str(d)])%2is 0]"
    ],
    "find-the-sum-of-all-numbers-below-n-that-are-a-multiple-of-some-set-of-numbers": [
        "a,b,c=input()\nx=y=0\nexec(\"if x%c<1or 1>x%b:y+=x\\nx+=1\\n\"*a)\nprint y",
        "lambda n,l:sum(v*any(v%m<1for m in l)for v in range(n))",
        "i=input\nx=i();y=i();z=i();s=c=0\nexec(\"if c%z<1 or c%y<1:s+=c\\nc+=1\\n\"*x)\nprint s"
    ],
    "how-many-times-are-they-multiples": [
        "f=lambda n,m,l:m/n and sum(n%i<1for i in l)+f(n+1,m,l)",
        "lambda K,M,H:sum(n%l<1for n in range(K,M+1)for l in H)",
        "lambda s,e,L:sum(n%l<1for n in range(s,e+1)for l in L)"
    ],
    "draw-the-arc-of-a-ball": [
        "f=lambda n,r='O':(r*n and f(n-1,' '+r))+'\\n'*n+r+'  '*n+'O'",
        "f=lambda n,x=0:(n and f(n-1,x+1)or'')+'\\n'*n+' '*x+'O'+'  '*n+'O'",
        "x=input()\nfor i in range(x):print' '*(x-i),'O'+' '*i*2+'O'+'\\n'*(i-x+1and i)"
    ],
    "string-subtraction": [
        "a,b=input()\nl=len(b)\nprint[[a,a[:-l]][b==a[-l:]],a[l:]][b==a[:l]]",
        "def f(s,c):v=len(c);print[s[v:],s[:-v],s][[s[:v],s[-v:],c].index(c)]"
    ],
    "length-terminated-sequences": [
        "f=lambda l:l and[l[:x]for i,x in enumerate(l)if-~i==x][:1]+f(l[1:])",
        "lambda s,e=enumerate:[s[i-n:i]for i,n in e([9]+s)if all(m+~j for j,m in e(s[i-n:i-1]))>0<n<=i]",
        "f=lambda l:l and[l[:x]for x in l if[x]==l[x-1:x]][:1]+f(l[1:])"
    ],
    "picture-of-an-old-friend-in-ascii-art": [
        "def g(c,s,w,h,l=\"\"):\n x=\"c-20,c-1,s-18,c-1,c-1,s-7,c-4,s-7,c-1,c-1,s-5,c-8,s-5,c-1,c-1,s-4,c-10,s-4,c-1,c-1,s-3,c-12,s-3,c-1,c-1,s-3,c-12,s-3,c-1,c-1,s-3,c-3,s-2,c-2,s-2,c-3,s-3,c-1,c-1,s-2,c-4,s-2,c-2,s-2,c-4,s-2,c-1,c-1,s-2,c-14,s-2,c-1,c-1,s-2,c-14,s-2,c-1,c-1,s-2,c-2,s-2,c-2,s-2,c-2,s-2,c-2,s-2,c-1,c-1,s-2,c-1,s-1,c-2,s-2,c-2,s-2,c-2,s-1,c-1,s-2,c-1,c-1,s-2,c-14,s-2,c-1,c-1,s-2,c-2,s-1,c-3,s-2,c-3,s-1,c-2,s-2,c-1,c-1,s-2,c-1,s-3,c-2,s-2,c-2,s-3,c-1,s-2,c-1,c-1,s-18,c-1,c-20\"\n for r in x.split(\",\"):\n  d=r.split(\"-\");l+=d[0].replace(\"s\",s).replace(\"c\",c)*int(d[1])*w\n  if len(l)==20*w:print(l+\"\\n\")*h,;l=\"\"",
        "def a(s,x,y):\n    z=[]\n    for c in u'\\u01df #/?\\x1f\\x1f\\x19Y__Fy_Nf \\u01df':\n        b=\"\".join((s if d==\"1\"else\" \")*x for d in bin(ord(c)^544)[2:]);z+=[b+b[::-1]]*y\n    print\"\\n\".join(z)",
        "p,w,h=raw_input().split()\nfor i in range(18): mystr=''.join([(p if i=='1'else' ')*int(w)for i in str(10+(i%17==0))+format(ord('\\xff\\x00\\x03\\x0f\\x1f??9y\\x7f\\x7ffY\\x7fnF\\x00\\xff'[i]),'08b')]);print'\\n'.join([mystr+mystr[::-1]for j in[1]*int(h)])"
    ],
    "mix-pi-and-e-to-make-pie": [
        "lambda n:`int(\"SVBPXJDZK00YCG3W7CZRA378H4AM5553D52T52ZKAFJ17F4V1Q7PU7O4WV9ZXEKV\",36)`[n]",
        "lambda n:`7*ord('L\u001f?J$rg\u0018$\"\u001679n*i.\u001371&<B@[>)!Y\u00198l:.p\u001b\u0015\u001fUo\u00104GZ9c0a%\u0011'[n/2])`[n%2+1]",
        "lambda n:('%d'*51%(*b' \u0011)\u00124b\u0015D4&6UcF^#\u0016!U+B\u0014>0%\"W\u001f\u0017K\\\u0005<>\u001c0^GO9\u0007~1\u0007\u001ec]$O;\u0013',))[n]"
    ],
    "fibonacci-spiral": [
        "a,b=0,1;L=[]\nexec\"a,b=b,a+b;L=zip(*L[::-1])+[[a]*a]*a;\"*input()\nfor r in L:print\" \".join(\"%*d\"%(len(str(a)),x)for x in r)",
        "n=int(input())\nf=[1,1]\nwhile len(f)<n:f+=[f[-1]+f[-2]]\no=[[]]\nfor i in f:o=(list(zip(*o)))[::-1]+[[i]*i]*i\nfor x in o:print(' '.join(str(y).rjust(len(str(f[-1])))for y in x))"
    ],
    "angle-between-the-hands-on-a-clock": [
        "def a(t):\n    o=abs(30*(int(t[:1])%12)-5.5*int(t[2:]));return o if o<=180 else 360-o",
        "def angle_24hr(time_str):\n    hour, minute = int(time_str[0:1]) % 12, int(time_str[2:3]) % 60\n    angle_dist = lambda a, b: ((a + (180 - b)) % 360) - 180\n    return angle_dist(((hour * 30) + (minute * 0.5)), minute * 6) * 10"
    ],
    "chebyshev-rotation": [
        "h=lambda z:z and 1j*h(z/1j)if'-'in`z*1j-z-1`else z+1",
        "lambda x,y:(x-(-y<x<=y)+(y<=x<-y),y+(~x<y<x)-(x<y<=-x))"
    ],
    "this-challenge-makes-cents": [
        "n=int(round(input()*100))\na=25\nfor b in\"quarter\",\"dime\",\"nickel\",\"penny\":\n if n>=a:print\"%d \"%(n/a)+b,\n n%=a;a=40/a+5^12",
        "a=input()*100;k={25:0,10:0,5:0,1:0}\nfor i in k:k[i]=a//i;a%=i\nprint' '.join(['%d %s'%(k[x],{25:'quarter',10:'dime',5:'nickel',1:'penny'}[x]) for x in k if k[x]])"
    ],
    "peter-is-a-picky-eater": [
        "f=lambda a,n=-1:-1in(a:=sorted([0]+a))and-n-2or f([x-1for x in a[n:]]+a[:n],n-1)",
        "f=lambda l,n=1:n<=len(l)and-~f([v-(e<n)for e,v in enumerate(sorted(l)[::-1])if(e<n)-v],n+1)"
    ],
    "leyland-numbers": [
        "t=[]\nfor k in range(100):a,b,q=k//10,k%10,a**b+b**a;f=lambda q:0if q in t else t.append(q);f(q)\nprint(sorted(t)[7:])",
        "r=range(2,32);f=lambda n:sorted({x**y+y**x for x in r for y in r})[n]"
    ],
    "lets-do-some-enciph5r47g": [
        "m=input()[::-1];j=1;t=''\nfor i in m:s=m[j:].find(i);t=[i,`s`][0<s<10]+t;j+=1\nprint t",
        "def p(x):print(x,end='')\nl={}\nfor i,c in enumerate(input()):\n if l.get(c,i+9)<i+9:\n  p(i-l[c]-1)\n else:\n  p(c)\n l[c]=i",
        "s=''\nfor c in input():d=s[:~10:-1].find(c);s+=-d*c or`d`\nprint s"
    ],
    "visualize-nicomachuss-theorem": [
        "n=input()\nR,J=range,''.join;r=[]\nfor i in R(n+1):\n S=sum(R(i));c='AxBo'[i%2::2]\n for j in R(S):r[~j]+=c[j/i%2]*i\n r+=[J(c[-j/i%2]for j in R(S+i,0,-1))]*i\nfor l in r:print J(l)",
        "g=lambda y:y>1and[l+y*f(y,i)for i,l in enumerate(g(y-1))]+y*[''.join(f(y,i)for i in range(y*-~y/2))]or['#']\nf=lambda y,i:'0@+#'[(y*~-y/2%y+i)/y%2+y%2*2]"
    ],
    "interpret-numbers-very-literally": [
        "f=lambda n,k=1000:n>19and(f(n/k,k/10)+`k-k%4*5`)*(n>=k)+f(n%k,k/10)or`n`[:n]",
        "def F(n,o=\"\"):\n for i in 1000,100:\n  if n>=i:o+=F(n//i)+str(i);n%=i\n return o+'0'[:0<n%10<=n>19].join(str(n))*(n>0)",
        "f=lambda n:n/T and f(n/T)+`T`+f(n%T)or(n>=H)*`n/H*T+H`+'0'[:n%10>0<n%H>19].join(`n%H`)*(n%H>0)\nH=100;T=1000"
    ],
    "theres-an-echo-in-my-array-echo-in-my-array-my-array": [
        "def f(r,l=1):o=r[:l];o+=(v-o[-l]for v in r[l:]);return l<len(r)and(min(o)<any(o[-l:])and f(r,l+1)or o[:-l])or r",
        "def f(a,i=1):\n e=a[:i]\n for v in a[i:-i]:e+=v-e[-i],\n return i<=len(a)/2and(min(e)>=0<e[-i:]==a[-i:]and e or f(a,i+1))or a"
    ],
    "will-i-tip-over": [
        "def f(s):w,b,p=s.split('\\n');return cmp(sum((ord((w+' '*-~i)[i])-31)*(i-p.find('|'))for i in range(len(b))),0)",
        "def f(s):i,b,p=s.split('\\n');c=p.find('|');l=sum((ord(e)-32)*(c-i.find(e))for e in i[:c])+sum(x for x in range(1,c+1));r=sum((ord(e)-32)*i[c:].find(e)for e in i[c:])+sum(x for x in range(len(b[c:])));return(l>r)-(r>l)",
        "def f(s):L=len(s)/3;print cmp(sum((ord(s[i])-31)*(i-s[-L:].find('|'))for i in range(L)),0)"
    ],
    "the-strange-ordering-of-sharkovskii": [
        "f=lambda a,p=0:(a&1)*(a,p)or f(a>>1,p+1)\nt=lambda(n,p),(m,q):(n==1)*(m==1)&(p>=q)or (m>1)&(p<=q)|(n<=m)&(p==q)or m==1\nlambda a,b:t(f(a),f(b))",
        "f=lambda a,b:b<2or[f(a/2,b/2),a>1,0,1<a<=b][a%2+b%2*2]",
        "lambda*l:cmp(*[([-n][n&n-1:],n&-n,n)for n in l])<1",
        "k=lambda n:[n&~-n<1,(n&-n)*cmp(n&~-n,1),n/(n&-n)]\nlambda a,b:k(a)<=k(b)"
    ],
    "unlock-your-lock": [
        "a,c=input()\nprint a\nfor i in 0,1,2:\n while a[i]!=c[i]:a[i]=(a[i]+(a[i]-c[i])%10/5*2-1)%10;print a",
        "a,b=input()\ni=0\nprint a\nfor x in a:\n while x-b[i]:a[i]=x=(x+(x-b[i])%10/5*2-1)%10;print a\n i+=1"
    ],
    "as-easy-as-one-two-three": [
        "lambda n:`n-12`==`n`[0]*3",
        "range(123,790,111).count",
        "lambda n:n%111==12<n<900"
    ],
    "whats-my-middle-name": [
        "print(input().split()[1:-1])",
        "lambda n:n.split()[1:-1]",
        "lambda n:n[1:-1]"
    ],
    "sort-numbers-by-binary-1s-count": [
        "def f(l):l.sort(key=lambda x:`bin(x)`.count('1'),reverse=1)",
        "l.sorted(key=lambda x:bin(x).count('1'))",
        "print sorted(input(),key=lambda x:-sum(int(d)for d in bin(x)[2:]))",
        "print(sorted(input().split(),key=lambda x:-bin(int(x)).count(\"1\"))) # 67",
        "def f(l):l.sort(lambda n:-bin(n).count('1'))"
    ],
    "java-is-to-javascript-as-car-is-to-carpet": [
        "f=input().lower().find\nprint'car'+'pet'*(f('java')!=~f('javascript'))",
        "k=input().lower();print'car'+'pet'*(k[:4]!='java'or'javascript'in k)",
        "g=lambda s:(lambda r:'car' if r[:4]=='java' and 'javascript' not in r else 'carpet')(s.lower())"
    ],
    "code-ladder-cops": [
        "print r___e(_______+_[___]",
        "y=10__;s='09________';print int(s[8__________:y])",
        "print(?%??f?r?t)",
        "print 8/8",
        "print r___e(3______+_[___]",
        "print(_______(str(ord(x))for x in ________).___________)",
        "_____ (__________)_(_____*4)_",
        "print r___e(3_4____+_[___]",
        "print(??bin()?????)",
        "print len([????])",
        "#__________________\nriny\n________"
    ],
    "is-this-number-a-repdigit": [
        "lambda s:s==s[0]*len(s)",
        "lambda x:len(set(x))<2",
        "len({*input()})>1>t"
    ],
    "catalan-numbers": [
        "f=lambda x:x<1or x*f(x-1)\nc=lambda n:f(2*n)/f(n)/f(n+1)",
        "f=lambda n:0**n or(4+6/~n)*f(n-1)",
        "(lambda f:lambda n:f(2*n)/f(n)/f(n+1))((lambda r:r(r))(lambda r:lambda x:x<1or x*r(r)(x-1)))"
    ],
    "how-much-do-i-have-to-write": [
        "f=lambda n:len(`n`)+(n and f(n+cmp(0,n)))",
        "def f(i,j=1):\n if i==0:print j\n else:j+=len(`i`);f((i-1,i+1)[i<0],j)",
        "lambda n:sum(map(len,map(str,range(*[[0,n-1,-1],[n+1]][n>0]))))",
        "lambda x:sum(map(len,map(str,(range(0,x+cmp(x,.5),cmp(x,.5))))))",
        "lambda n:len(`range(abs(n)+1)`)+2*~n+3*n*(n<0)"
    ],
    "draw-an-hourglass": [
        "N=n=input()\nexec\"print('*'*max(n,2-n)).center(N);n-=2;\"*n",
        "f=lambda n,i=0:n>1and' '*i+'*'*n+'\\n'+f(n-2,i+1)+' '*i+'*'*n+'\\n'or' '*i+'*\\n'",
        "def f(i):[print(' '*(i//2-abs(j-i//2))+'*'*2*abs(j-i//2)+'*')for j in range(i)]"
    ],
    "remove-leading-and-trailing-zeroes": [
        "lambda a:map(int,''.join(map(str,a)).strip('0'))",
        "def f(a):\n for i in(0,-1):\n  while a and a[i]==0:a.pop(i)\n return a",
        "print(input().strip('0 '))"
    ],
    "196-algorithm-code-golf": [
        "n=input()\nwhile`n`!=`n`[::-1]:n+=int(`n`[::-1])\nprint n",
        "f=lambda x,y=0:x if x==y else f(x+y,int(`x+y`[::-1]))",
        "f=lambda n,r=0:n-r*2and f(n+int(`n`[::-1]),n)or r"
    ],
    "woody-words-tinny-words": [
        "lambda w:\"wtPoiVonCdn yy\"[(w*4)[9]in\"tin\"or(w[2]<\"b\")*2::3]",
        "lambda s:'PVC'*('ea'in s)or'wtoiondnyy'[s[-2:]in'instperit'::2]",
        "lambda n:'wtPoiVonCdn yy'[hash(n)%97%78%28%15%2+('ea'in n)::3]"
    ],
    "repeated-factorials": [
        "f=lambda n,b:n<1or n*f(n-b,b)",
        "m=lambda n,s:n<1or n*m(n-s,s)\nf=lambda x:int(m(int(x.split(\"!\")[0]),x.count(\"!\")))"
    ],
    "lets-decrease-the-monotony": [
        "lambda l:max(map(cmp,l[1:],l))",
        "x=map(str,input())\nprint[2,eval(\">\".join(x))+eval(\">=\".join(x))][len(x)>1]",
        "e=sorted\nlambda a:(a==e(a)[::-1])+(e({*a})[::-1]==a)",
        "def f(L):\n z=0\n for i in range(0,len(L)-1):\n  if L[i]-L[i+1]<0:\n   return 2\n  if L[i]-L[i+1]==0:\n   z=1\n return z"
    ],
    "automate-your-first-grade-counting-exercise": [
        "x=\"one two three four five six seven eight nine ten eleven twelve thir#four#fif#six#seven#eigh#nine#\".replace(\"#\",\"teen \").split()\nx+=[a+\"ty\"+b for a in\"twen\",\"thir\",\"for\",\"fif\"for b in['']+x[:9]]\nv=input()\nfor s in range(1,x.index(v)+2)if v>50else x[:v]:print s",
        "l='one two three four five six seven eight nine ten eleven twelve thir#four#fif#six#seven#eigh#nine#'.replace('#','teen ').split()\nm='twenty','thirty','forty','fifty'\ni,R=input(),range\nl+=sum([[m[x]]+[m[x]+l[y]for y in R(9)]for x in R(3)],[])\nfor x in R(1,l.index(i)+2)if i in l else l[:int(i)]:print(x)",
        "def z(f):\n a,b,i,d=\"one two three four five six seven eight nine ten eleven twelve thir#four#fif#six#seven#eigh#nine#\".replace(\"#\",\"teen \").split()+[\"\"],\"twenty thirty forty fifty\".split(),1,f>50\n if d:f=f.split();f=a.index(f[-1])+21+b.index(f[-2])*10 if len(f)>1 else b.index(f[-1])*10+20 if f[-1]in b else a.index(f[-1])+1\n while i<=f:s=i if d else a[i-1]if i<20 else b[i//10-2]+a[i%10-1];print s;i+=1",
        "l='one two three four five six seven eight nine ten eleven twelve thir#four#fif#six#seven#eigh#nine#'.replace('#','teen ').split()\nm='twenty','thirty','forty','fifty'\ni,z,R=raw_input(),' ',range\ntry:n=int(i);p=(n/10)-2;o=(l+sum([[m[x]]+[m[x]+z+l[y]for y in R(9)]for x in R(p)],[])+[m[p]]+[m[p]+z+l[y]for y in R(n%10)],l[:n])[n<20]\nexcept:j=i.split();o=map(str,R(1,(m.index(j[0])+2)*10+l.index(j[1])+2if z in i else l.index(i)+2if i in l else(m.index(i)+2)*10+1))\nprint','.join(o)"
    ],
    "i-transpose-the-source-code-you-transpose-the-input": [
        "lambda\\\na:a\nmz= '''\nbi'   '\ndp'   '\na('\n *\n a\n\\)'''",
        "lambda\\\na:a\nma= \"\"\"\nb.    \"\ndT\"   \"\na \"\n\\ \"\"\"",
        "f=lambda i:i;\"\"\"\n=              \"\nl              \"\na\nm\nb\nd\na\n\ni\n:\n[\n*\nz\ni\np\n(\n*\ni\n)\n]\n;\n\"\n\"\n\"\"\""
    ],
    "create-a-binary-wall": [
        "lambda n:[bin(x)[2:].replace(*'0 ').rjust(len(bin(max(n)))-2)for x in n]",
        "lambda k:[[' *'[i>>y&1]for y in range(len(bin(max(k)))-3,-1,-1)]for i in k]",
        "lambda a:[' '*(len(bin(max(a)))-len(i)-2)+i for i in[bin(i)[2:].replace(*'0 ')for i in a]]"
    ],
    "26-singers-26-letters": [
        "def f(s):i=sum(map(ord,s))%98%40;return chr(i-i/26*18+i/32*3-i/37*8+65)",
        "lambda m:chr(98+\"\u0507\u0332\u0419\u0413\u032b\u047c\u04ff\u0418\u0538\u054b\u0436\u02be\u048d\u03f4\u042c\u05ba\u039d\u05e2\u0415\u039e\u03fe\u049e\u059c\u04e3\u05aa\".find(chr(sum(map(ord,m)))))",
        "def f(n):i=hash(n)%337%125%45;return chr(65+i-i/25*2-i/29*21+i/35*2)",
        "lambda n:chr(hash(n)%2354%977%237%54%26+65)"
    ],
    "twisting-words": [
        "s,z=eval(input());p=0\nwhile p<len(s):a=s[p:p+z].ljust(z);print(a[::-1] if p%(2*z) else a);p+=z",
        "s,n=input()\nk=n\nwhile k<=len(s):print s[k-n:k]+'\\n'+s[k+n-1:k-1:-1].rjust(n);k+=2*n",
        "I,c=input()\nI+=(c-len(I)%c)*\" \"\nL=[]\ni=0\nwhile I:s=I[:c];L+=[[s,s[::-1]][i%2]];i+=1;I=I[c:]\nprint\"\\n\".join(L)",
        "t,x=eval(input())\nprint(\"\\n\".join([t[c:c+x].ljust(x)[::1-2*(int(c/x)%2)] for c in range(0,len(t),x)]))",
        "def a(s,n):l=len(s)//n+1;s+=' '*(len(s)-l);print('\\n'.join([s[x*n:n*x+n][::(-1)**x]for x in range(l)]))",
        "def a(s,n,x=1):\n while s:print(s[:n].rjust(n)[::x]);s=s[n:];x=-x\n\na('Programming Puzzles & Code Golf',4)",
        "s,n=input()\nd=1\nwhile s:print(s+n*' ')[:n][::d];s=s[n:];d=-d",
        "s,n=input()\nk=0\nwhile k<=len(s):print s[k:k+n].ljust(n)[::1-2*(k/n%2)];k+=n"
    ],
    "write-a-polyquine": [
        "s=1//2;_=r'''<?#/.__id__;s=+0;#';read -d '' q<<'';s=\\';Q='echo s=1//2\\;_=r$s$s$s\\<\\?\\#/.__id__\\;s=+0\\;#$s\\;read -d $s$s q\\<\\<$s$s\\;s=\\\\$s\\;Q=$s$Q$s\\;eval\\ \\$Q;echo $q';eval $Q\n$_='eval(\"0\"?0?\"def strtr(s,f,t);s.tr(f,t) end;class String;def chr(n);self+n.chr end;end\":\"$u=strtr=(s,f,t)=>[...f].reduce((s,a,i)=>s.replace(RegExp(a,`g`),t[i]),s);printf=console.log;(S=String).prototype.chr=function(n){return this+S.fromCharCode(n)}\":[]&&\"sub strtr{eval q(q(X)=~y/X/X/r)=~s/X/shift/ger}\");printf(strtr(\"%s<?#/.__id__;s=+0;#j;read -d jj q<<jj;s=zj;Q=jecho s=1//2z;_=rksksksz<z?z#/.__id__z;s=+0z;#ksz;read -d ksks qz<z<ksksz;s=zzksz;Q=kskQksz;evalz zkQ;echo kqj;eval kQwk_=j%sj;eval(k_);//;#jjj;f=jjjs=1//2;_=r%%s%%s%%s;f=%%s%%s%%s;q=_[18]*3;print f%%%%(q,_,q,q,f,q)jjj;q=_[18]*3;print f%%(q,_,q,q,f,q)%s\",\"jkwz\",\"\".chr(39).chr(36).chr(10).chr(92).chr(92)),[]&&\"s=1//2;_=r\".chr(39).chr(39).chr(39),$_,$u?\"\":\"\".chr(10));';eval($_);//;#''';f='''s=1//2;_=r%s%s%s;f=%s%s%s;q=_[18]*3;print f%%(q,_,q,q,f,q)''';q=_[18]*3;print f%(q,_,q,q,f,q)",
        "a='eval(a.split(\" \")[2%-4]),1//2# q=String.fromCharCode(39);console.log(\"a=\"+q+a+q+a.slice(-8)) print(a[-12:]%a) a=%r;eval(a)';eval(a)"
    ],
    "interlace-strings": [
        "lambda a,b:[(-~len(a)/2*s)[::len(a)+1]for s in a+b,b+a]",
        "def f(a,b):a[1::2],b[1::2]=b[1::2],a[1::2]"
    ],
    "count-rotary-dial-pulses-in-a-phone-number-including-letters": [
        "lambda s:sum([(n-59-n/83-n/90)/3,1-~n%~9][n<58]for n in map(ord,s)if n>47)",
        "f=lambda n:sum(map(int,n.translate(n.maketrans('ADGJMPTWBEHKNQUXCFILORVYSZ','23456789'*3+'79','()+-./ '))))+10*n.count('0')"
    ],
    "is-this-string-a-letter-doing-a-cartwheel": [
        "lambda x:any([x in p*len(x)for p in'nu','mw','bq'])*len(x)%2*len(x)>2",
        "lambda x:[len(x)%2,x[:2]in'nu,un,bq,qb,mw,wm',len(set(x[::2])),len(set(x[1::2]))]==[1]*4",
        "lambda s:s[:3]in'ununqbqbwmwm'and s==s[:2]*max(len(s)/2,1)+s[0]",
        "lambda x:len(x)>1and{x[0],x[1]}in[{i,j}for i,j in zip('ubw','nqm')]and x==(-~len(x)/2*(x[0]+x[1]))[:-1]",
        "lambda s:s[0]==s[-1]and any(any({*s[::2]}=={i[j]}and{*s[1::2]}=={i[j<1]}for j in[0,1])for i in['nu','mw','bq'])",
        "lambda n:''.join(sorted({*n[1::2]}|{*n[::2]}))in\"nu,mw,bq\"*(n==n[::-1])",
        "lambda x:x==len(x)//2*x[:2]+x[0]and{*x}in[{*'nu'},{*'mw'},{*'bq'}]",
        "lambda s:s[2:]+s[1:3]==s>s[:2]in'bqb\u007funu\u007fwmw'"
    ],
    "consonance-or-dissonance": [
        "lambda a,b,f='C C#D D#E F F#G G#A A#B'.find:3142>>(f(a)-f(b))/2%12&1",
        "a,b=map(\"C C#D D#E F F#G G#A A#B\".index,input())\nprint chr(abs(a-b))in\"\ue002\ue004\ue00c\ue014\ue016\""
    ],
    "sum-the-powers-that-be": [
        "f=lambda n,k,i=1:n/i and(n%i**k<1)*i**k+f(n,k,i+1)",
        "lambda x,n:sum(i**n*(x%i**n<1)for i in range(1,-~x))",
        "lambda n,k:sum(j*(j**k**-1%1==n%j)for j in range(1,n+1))"
    ],
    "code-golf-for-my-real-friends": [
        "s=input()\nx=0\nl= \"Ch,pain,Sham,Ps,pods,psuedo-,Pe,coats,petty,Lo,strife,loose,La,bugs,lady,Si,RealPlayer,single,Tu,weed,Tumblr,Fa,hawks,faux,Pl,solids,platonic\".split(\",\")\na,b,c,d,e,f,g,h = \" and real\",\"for my\",\"friends\",\".!\",\"print(a,l[p+1],b,l[p+2]\",\",c+d[0])\",\"+c+d[1])\",\",c+d[1])\"\nfor p in range(0,27,3):\n x+=1\n if s[:2] == l[p]:\n  if x == 2: eval(e+g)\n  else: eval(e+f if x in(3,6) else e+h)",
        "Erik the Outgolfer"
    ],
    "basic-ascii-tallies": [
        "n=input()\nwhile n>0:print\"\\n\".join(\"\".join(\"|/ \"[2*(j%5>3)+(n/(5*(j/5+1))and 3-i==j%5)]for j in range(min(50,n)))for i in range(4)),\"\\n\";n-=50",
        "f=lambda n:n>50and f(50)+\"\\n\\n\"+f(n-50)or\"\\n\".join((\"|||/|||\"[k:k+4]+\" \")*(n//5)+\" \"+\"|\"*(n%5)for k in range(4))"
    ],
    "the-sum-is-always-15": [
        "def f(l):\n m=15;r,s=sum(l)%m,0\n if r:l+=[m-r]\n while l:\n  x=l.pop(0)\n  if s+x>m:y=m-s;l[0:0]=[x-y];x=y\n  s+=x;print(x,end=' \\n'[s==m]);s%=m",
        "i=input()\nwhile i:\n s=15;r=[]\n while s>0:n=i.pop(0)if i else s;s-=n;r+=[n]if s>=0 else[n+s]\n if s<0:i=[-s]+i\n print r",
        "s=0\ni=15\np=print\nfor e in eval(input()):\n if s>=i:p()\n s=s%i+e\n if s>i:s-=i;p(e-s);p();e=s\n p(e)\nif s!=i:p(i-s%i)"
    ],
    "the-original-number": [
        "def g(s,a=0,f=''):\n for c in s:\n    a+=34**ord(c)%43;r='P!\\x83u\\x8eI\\x92|Z'.find(chr(a))+1\n    if r:f,a=f+`r`,0\n return f",
        "s=input()\nfor y in'WXGURFSOIZ':vars()[y]=s.count(y)\nwhile Z<9:s+=[O-U-W,W,R-U,U,F-U,X,S-X,G,I-X-G-F+U][Z]*str(Z+1);Z+=1\nprint s"
    ],
    "find-the-infinity-words": [
        "lambda s:map(cmp,s,s[1:]+s[0])in[[m,n,-m,-n,0]for m in-1,1for n in-1,1]",
        "s=input()\nv,w,x,y,z=map(cmp,s,s[1:]+s[0])\nv*x+w*y|z>-2>_",
        "'KNEES'"
    ],
    "primality-testing-formula": [
        "n**(n*n-n)/(((2**n**n+1)**n**n>>n**n*~-n)%2**n**n)%n>n-2",
        "((((((2**(n*n)/(2**n-1)**2)*(2**((n**2)*n)/(2**(n**2)-1)**2))^((n*((2**(n*n-n)/(2**n-1))*(2**((n**2)*(n-1))/(2**n**2-1))))))-((2**(n*n-n)/(2**n-1))*(2**((n**2)*(n-1))/(2**(n**2)-1))))&(((2**(n*(n-1))/(2**n-1))*(2**((n**2)*(n-1))/(2**(n**2)-1)))*(2**(n-1)))==0))|((1<n<6)&(n!=4))"
    ],
    "primes-other-than-optimus": [
        "lambda x,r=range,l=len:sum(~-f*(~-l(x)==sum(`f`[t]==x[t]for t in r(l(x))))and all(f%v for v in r(2,f))for f in r(10**~-l(x),10**l(x)))",
        "lambda I:sum(all(i%v for v in range(2,i))*sum(z!=x for z,x in zip(I,`i`))==1for i in range(1+10**~-len(I),10**len(I)))"
    ],
    "insert-inbetween": [
        "lambda s:f\"!{'!'.join(s)}!\"",
        "lambda x:x.replace('','!')",
        "lambda s:s.replace('','!')",
        "lambda s:'!%s!'%'!'.join(s)"
    ],
    "infinitely-many-%e2%84%95": [
        "R=1,\nwhile 1:print R;R+=len(R),",
        "s=[1]\nwhile 1:print(s);s+=[s[-1]+1]",
        "n=1\nwhile 1:n+=1;print range(1,n)"
    ],
    "abc-and-cba": [
        "try:exec(\"print'abc'\")\nexcept:print('cba')",
        "print(\"abc\"[::1/2and-1or 1])",
        "print([\"abc\",\"cba\"][1])",
        "print('abc')#|echo cba",
        "print\"abc\"[::-1]",
        "print(\"abc\")# ,,,@",
        "print(['abc','cba'][(0 or 1)])",
        "print('abc'[::-(1/2>0)|1])",
        "print(['abc','cba'][1/2>0])",
        "print(round(.5)and\"abc\"or\"cba\")",
        "print('acbbca'[1/2>0::2])",
        "print('abc'[::int(1/2*4)-1])"
    ],
    "evaluate-the-aspect-ratio-of-a-triangle": [
        "lambda a,b,c:a*b*c/(b+c-a)/(a+c-b)/(a+b-c)",
        "def f(x,y,z):s=x+y+z;return 1/((s/x-2)*(s/y-2)*(s/z-2))"
    ],
    "guess-my-password-cops-thread": [
        "class D(dict):__getitem__=0\ns=open(0).read()\nif\".\"not in s:exec(s,D())",
        "class D(dict):__getitem__=0\nexec(\"\".join(open(0)),D())",
        "eval(input(),{'__builtins__':{}})(**{0:0})",
        "x=[(9,23),(10,24),(10,25),(11,23),(11,24)]\ndef f(g):\n    h=g.copy()\n    for move in range(30):\n        n=[]\n        for i in range(12):\n            n.append([])\n            for j in range(36):\n                c=0\n                for (a,b)in[(-1,-1),(-1,0),(-1,1),(0,-1),(0,1),(1,-1),(1,0),(1,1)]:\n                    if i+a>=0 and i+a<12 and j+b>=0 and j+b<36:\n                        c+=h[i+a][j+b]\n                if h[i][j]==0 and c==3:\n                    n[i].append(1)\n                elif h[i][j]==0:\n                    n[i].append(0)\n                elif h[i][j]==1 and c!=2 and c!=3:\n                    n[i].append(0)\n                elif h[i][j]==1:\n                    n[i].append(1)\n        h=n.copy()\n    for i in range(12):\n        for j in range(36):\n            if g[i][j]!=h[i][j]:\n                if not((i,j)in x):\n                    print('N')\n    for (i,j)in x:\n        if g[i][j]==h[i][j]:\n            print('N')\n    print('Y')",
        "s=input()\nassert not{*s}&{*'()[]{}'}\neval(s,{'__builtins__':{}})(**{0:0})",
        "while 1:\n\ttry:l=input()\n\texcept:l=''\n\texec(l,{},{\"exit\":0,\"quit\":0})\n\tprint(1)",
        "I=input\nX=vars(vars()[I()])\nX[I()]=X[I()]\nclass I:1/0",
        "def f(s,a):1/(not{*\"_.}\"}&{*s});c=compile(s,\"\",\"exec\");x=bytearray(c.co_code);[0for i in a for x[i]in[9]];return eval(c.replace(co_code=bytes(x)),{\"__builtins__\":{}})",
        "def f():\n try:exec(open(0).read())\n except:0\n return lambda:[\"wow\"]",
        "KDIITIWDRIKIDITI",
        "'\\n ,.:;=@_abcdefijlmnoprstvz'",
        "c=compile(c:=open(0,\"rb\").read(),\"\",\"exec\").replace(co_code=c)\nexec(c)"
    ],
    "the-first-the-last-and-everything-between": [
        "lambda a,b:[a,b]+[*range(a+1,b)]+[*range(a-1,b,-1)]",
        "def m(a,b):s=(1,-1)[a>b];return[a,b]+list(range(a+s,b,s))",
        "lambda a,b:[a,b]+range(a,b,a<b or-1)[1:]",
        "lambda a,b:[a,b,*range(a+1-2*(a>b),b,1-2*(a>b))]",
        "lambda x:x+range(*x,-cmp(*x)|1)[1:]",
        "lambda i,j:[i,j]+range(i,j,(i<j)*2-1)[1:]",
        "lambda x,y:[x,y]+range(x,y,-(y<x)|1)[1:]",
        "lambda a,b:[a,b,*range(a,b,-(a>b)|1)[1:]]"
    ],
    "follow-a-linked-list": [
        "def f(l,c=0):\n while 1:c=l[c];yield c",
        "def f(l,i=0):print(l[i]);f(l,l[i])",
        "s=input()\ni=s.split(\" \")\nn=0\no=[]\nwhile True:\no.append(i[n])\nn=i[n]"
    ],
    "sylvesters-sequence": [
        "l=[2]\nfor _ in range(int(input())):\n    n=1\n    for i in l:n*=i\n    l+=[n+1]\nprint(l[-1])",
        "f=lambda x:reduce(int.__mul__,[1]+map(f,range(x)))+1",
        "f=lambda n:0**n*2or~-f(n-1)*f(n-1)+1"
    ],
    "capitalize-first-letter-of-each-word-of-input": [
        "i=raw_input()\nprint''.join((c,c.upper())[p==' ']for p,c in zip(' '+i,i))",
        "f=1\nfor c in input():print(end=f*c.upper()or c);f=c==\" \"",
        "for w in raw_input().split(\" \"):print w and w[0].upper()+w[1:],",
        "x=list(' '+input())\nfor i in range(len(x)-1):\n if x[i-1]==' ':x[i]=x[i].title()\nprint(''.join(x[1:]))",
        "print(*(w[0].upper()+w[1:]for w in input().split()))"
    ],
    "am-i-not-good-enough-for-you": [
        "lambda n:sum(d*(n%d<1)for d in range(1,n))==n",
        "lambda x:sum(i for i in range(1,x)if x%i<1)==x"
    ],
    "generate-monday-numbers": [
        "i=0\nwhile i<1e8:\n j=str(i)\n if len(set(j))+2==len(j)+('0'in j)+all(i%int(k)<1 for k in j):print(i)\n i+=1",
        "print[n for n in range(1,9**9)if(n<10**len(set(`n`)))>any(n%(int(d)or.3)for d in`n`)]",
        "print[i for i in range(6**9)if'0'not in`i`and len(set(`i`))==len(`i`)and all(i%int(k)==0for k in`i`)]"
    ],
    "multiply-a-string-by-a-number": [
        "h=lambda s,n:h(s[::-1],-n)if n<0 else s[0]*n+h(s[1:],n)if s else s*n",
        "f=lambda s,n:s and s[0]*n+f(s[1:],n)+s[0]*-n",
        "lambda s,n:''.join(i*n**2for i in s)[::n or 1]"
    ],
    "draw-a-graph-of-y-nx": [
        "%pylab\ndef f(n):x=arange(121)/20-3+0j;plot(x,(-n)**x)",
        "matplotlib"
    ],
    "will-jimmy-fall-off-his-platform": [
        "lambda a:sum(1-(\" \"in i)for i in zip(*a))>1",
        "lambda s:sum(j in'/o\\\\'and p=='-'for j,p in zip(*s))>1",
        "lambda j,p:'--'in p[j.find('/'):][:3]"
    ],
    "make-it-explode": [
        "lambda l:map(g,*map(g,*l))\ng=lambda*l:sum([[x,0]for x in l],[0])",
        "n=input()\na=[[0]*(2*len(n[0])+1)for i in[0]+2*n]\nfor l,v in zip(a[1::2],n):l[1::2]=v\nprint a",
        "def n(a):\n\tl,g='0 ',len(a[0])*2+1;print l*g\n\tfor i in a:print l+' 0 '.join(i)+' 0';print l*g",
        "def a(b):\n    z='00'*len(b[0])+'0'\n    r=z+'\\n'\n    for c in b:\n        e='0'\n        for d in c:e+=str(d)+'0'\n        r+=e+'\\n'+z+'\\n'\n    return r"
    ],
    "evenst-ring-c-ode-g-olf": [
        "f=lambda s:s==s[0]or(ord(s[0])-ord(s[1]))%2*f(s[1:])",
        "lambda s:all((ord(x)-ord(y))%2for x,y in zip(s,s[1:]))"
    ],
    "print-a-tongue-twister": [
        "print\"She sells seashells by the seashore,\\nThe shells she sells are seashells, I'm sure.\\nSo if she sells seashells on the seashore,\\nThen I'm sure she sells seashore shells.\"",
        "print\"S{0}ells by{1} shells she sells are seashells, I'm sure.\\nSo if s{0}ells on{1}n I'm sure s{0}ore shells.\".format(\"he sells seash\",\" the seashore,\\nThe\")",
        "print(\"Sh\u0005\u0002\u0001\u0002 by\u0007\u0001\u0003\u0004\u0002\u0004\u0005\u0002 are\u0001\u0002,\u0006.\\nSo if\u0004\u0005\u0002\u0001\u0002 on\u0007\u0001\u0003n\u0006\u0004\u0005\u0002\u0001ore\u0004\u0002.\".translate(\"| seash|ells|ore,\\nThe| sh|e s| I'm sure| the\".split(\"|\")))"
    ],
    "alphabet-diamond": [
        "A='abcdefghijklmnopqrstuvwxyz'\nD=''\nfor k in range(1,27):\n D+=A[k:]+A[:k]\n D+=D[-2:-27:-1]+'\\n'\nprint(D+D[:51]+D[::-1])",
        "R=range\nfor i in R(53):print''.join(chr(90-(abs(j-25)+abs(i-26)-1)%26)for j in R(51))"
    ],
    "how-happy-is-this-emoticon": [
        "lambda s:160%ord(s[-1])%7",
        "lambda s:ord(s[-1])*2%19%4",
        "lambda e:\"(|)D\".find(e[-1])"
    ],
    "is-my-matrix-arrowhead": [
        "lambda m,E=enumerate:all((x[j]>0)-(i>0<j!=i)for i,x in E(m)for j,y in E(m))",
        "def f(m):l=len(m);return all((m[a%l][a/l]<1)^any([a<l,a%l<1,a/l==a%l])for a in range(l*l))",
        "lambda x,e=enumerate:any(0**n^(0<i!=j>0)for i,r in e(x)for j,n in e(r))"
    ],
    "determine-the-depth-of-an-array": [
        "f=lambda l:\"A\"<str(l)and-~max(map(f,l))",
        "f=lambda l:l>{}and-~max(map(f,l))"
    ],
    "expand-a-c-array": [
        "t,v,_,*l=input().split();v=v[:-1]+'%s]'\nprint(t,v%len(l)+';');i=0\nfor x in l:print(v%i,'= %s;'%x.strip('{,};'));i+=1",
        "m,p=str.split,print;y,u=m(input(),'[');t,n=m(y);i=m(u[5:-2],', ')\nl=len(i);p(t,n+f'[{l}];')\nfor x in range(l):p(n+f'[{x}] = {i[x]};')",
        "s=input().split()\nt,n,v=s[0],s[1][:-2],''.join(s[3:])\na=v[1:-2].split(',')\nprint'%s %s[%d];'%(t,n,len(a))\nfor i in range(len(a)):print'%s[%d] = %s;'%(n,i,a[i])"
    ],
    "draw-an-ascii-lightning-bolt": [
        "n=int(input())\np=print\np('__\\n\\\\ \\\\')\nfor i in[0]*~-n:p(r''' \\ \\\n__\\ \\\n\\  __\\\n''',end='')\np(r''' \\ \\\n  \\ \\\n   \\/\n''')",
        "print((\"__\\nl l\"+\"__l\\  __\\\\\\n l\"*~-input()+\"  l   \\/\").replace('l','\\ \\\\\\n'))",
        "print'__\\n\\ \\\\\\n \\ \\\\\\n'+r'''__\\ \\\n\\  __\\\n \\ \\\n'''*~-input()+'  \\ \\\\\\n   \\/'"
    ],
    "checkmate-aka-the-urinal-problem": [
        "f=lambda n:n>1and f(n-2)+f(n-3)or 1",
        "f=lambda n:+(n<2)or f(n-2)+f(n-3)"
    ],
    "find-the-nth-decimal-of-pi": [
        "n=input()+9\nx=p=5L**7\nwhile~-p:x=p/2*x/p+10**n;p-=2\nprint`x/5`[-9]",
        "n=10**10010\na=p=2*n\ni=1\nwhile a:a=a*i/(2*i+1);p+=a;i+=1\nlambda n:`p`[n+1]"
    ],
    "find-the-smallest-positive-integer-which-ends-in-n-is-divisible-by-n-and-whose": [
        "n <= sys.maxint",
        "f=lambda n,x=0:x*(x%n<sum(map(int,`x`))==n==x%10**len(`n`))or f(n,x+n)"
    ],
    "amount-of-permutations-on-an-nxnxn-rubiks-cube": [
        "lambda n:3674160*61600**(n%2)*24**(~-n/2*6)*0xb88d4641131f0**(n*(n-2)/4)",
        "lambda n:0xab4de800000**(n%2)*3674160*0x83629343d3dcd1c00000**(n*(n-2)/4)/24**((n-2)**2/4*6)"
    ],
    "complex-binary-numbers": [
        "p=r=0\nfor n in bin(input()*2):t=n=='1';r-=p*~-t;p=p*t*1jor t*1j\nprint r",
        "print sum(1j**len(s)for s in bin(input())[2:].split('0')if s)",
        "f=lambda n,k=0:(n and f(n/2,n%2*(k or 1)*1j))+~n%2*k"
    ],
    "exchange-capitalization": [
        "lambda a,b:(g(a,b),g(b,a))\ng=lambda*a:[chr(ord(x)&95|(y>'Z')<<5)for x,y in zip(*a)]",
        "lambda a,b:''.join(chr(ord(x)&95|ord(y)&32)for x,y in zip(a+' '+b,b+'a'+a))"
    ],
    "easy-to-multiply-numbers": [
        "a,b=input()\ne=enumerate\nl=[0,0]*len(a+b)\nfor i,x in e(a):\n for j,y in e(b):l[i-~j]+=int(x)*int(y)\nprint max(l)<10",
        "lambda n,m:eval(f'0x{n}*0x{m}<0x{n*m}')",
        "lambda n,m:any(sum(n/10**(k-j)%10*(m/10**j%10)for j in range(k+1))>9for k in range(n+m))"
    ],
    "how-much-mana-do-i-need": [
        "i=input()\nt=[x.split()for x in\"Lo Um On Ee Pal Mon|Ya Vi Oh Ful Des Zo|Ven Ew Kath Ir Bro Gor|Ku Ros Dain Neta Ra Sar\".split('|')]\nc=t[0].index(i[0])+1;r=c+1;s=c+r*(t[1].index(i[1])+2)/2\nif len(i)>2:s+=r*(t[2].index(i[2])+4-(i[2]=='Bro'))/2\nif len(i)>3:s+=r*(t[3].index(i[3])+1+(i[3]in'KuRaSar'))/2\nprint(s)",
        "b=[int('27169735 2  4567 435262'[int(x,36)%141%83%50%23])for x in input()]\nprint b[0]+sum(a*-~b[0]/2for a in b[1:])"
    ],
    "sum-of-first-row-and-column-then-second-row-and-column-and-so-on": [
        "f=lambda m:[reduce(lambda x,y:x+y[i],m[i:],sum(m[i][i+1:]))for i in range(min(len(m),len(m[0])))]",
        "lambda L:[sum(L[i,i:])+sum(L[i+1:,i])for i in range(min(L.shape))]",
        "f=lambda m:[sum(m[k][k:])+sum(list(zip(*m))[k][k+1:])for k in range(min(len(m),len(m[0])))]"
    ],
    "the-arithmetic-derivative": [
        "f=lambda n,p=2:+(n*n>1)and(n%p and f(n,p+1)or p*f(n/p)+n/p)",
        "a=b=input()\nd=2\ns=0\nwhile d<=abs(b):\n    if a%d==0:\n        a=a/d\n        s+=b/d\n    else:\n        d+=1\nprint s"
    ],
    "make-a-super-acrostic": [
        "n=input();l=len(n)\nfor i in range(l):print(l/2*' '+n)[i:l+i]",
        "a=input()\nc=len(a)\nb=a.center(c*2)\nfor i in range(c):print(b[i:i+c])",
        "n=input();x=len(n)\nfor i in range(x):print((2*x-~i)*' '+n)[x+x/2:2*x+x/2]"
    ],
    "coating-every-pancake": [
        "s=[1]+[0,0]*input()\nfor f in input():x=f*2;s[0]=s[x]=s[0]|s[x];s[:x]=s[x-1::-1]\nprint all(s)",
        "n,b=input()\ns=[1]+[0]*n\nfor x in b:s[:x+1]=s[x::-1];s[x]|=s[0]\nprint all(s)",
        "d=[1]+[0,0]*input()\nfor i in input():n=2*i;d[:n]=reversed(d[:n]);d[n]=d[n-1]=d[n]|d[n-1]\nprint(all(d[:-1]))"
    ],
    "where-is-that-snake-going": [
        "lambda b:sum(g(b,i,j)for j,l in e(b)for i,_ in e(l))\ne=enumerate\ndef g(b,x,y):d=len(b[0])>x>-1<y<len(b);c=eval(`b`);c[d*y][d*x]=0;return d and b[y][x]and('1'not in`c`or sum(g(c,x+a,y)+g(c,x,y+a)for a in(1,-1)))",
        "E=enumerate\ng=lambda P,x,y:sum(g(P-{o},*o)for o in P if x<0 or abs(x-o[0])+abs(y-o[1])<2)+0**len(P)\nlambda L:g({(x,y)for y,r in E(L)for x,e in E(r)if e},-1,0)"
    ],
    "the-will-rogers-phenomenon": [
        "lambda p:any([1for i in 0,1for e in p[i]if g[i^1]<e<g[i]]for g in[[sum(l)*1./len(l)for l in p]])",
        "lambda*L:any(sum(C)/len(C)>x>sum(D)/len(D)for(C,D)in[L,L[::-1]]for x in C)"
    ],
    "translate-morse-code-based-on-tone-duration": [
        "s=lambda t,f=''.join:f('; TEMNAIOGKDWRUS;;QZYCXBJP;L;FVH09;8;;;7;;;;;;;61;;;;;;;2;;;3;45'[int('1'+f('0'if j[1:]else j for j in i.split('0')),2)]for i in t.split('000'))",
        "lambda s:''.join(' E-T----Z-Q---RSWU--2FH-V980NIMA--1CBYX-6--GDOK534PLJ-7'[int('0'+l.replace('111','3'),16)%57]for l in s.split('000'))",
        "lambda s:''.join(\"IVMB  T  K 9LZF 1HWO3 GUS4 8 7A  E QR 26   NJX    Y0P 5D  C\"[(int('0'+l)^2162146)%59]for l in s.split('000'))"
    ],
    "who-will-win-the-election": [
        "def f(x):\n    for i,v in enumerate(x):n=x[i-(i>0)];x[i]=(v>3)*n+abs(n-1)*(v<0)+x[i]*(0<v<4)\n    print x.count(1)>x.count(0)",
        "lambda(v):sum([l for l in[2*int(v[1]/2)]for i in v for l in[i*l**(i%2)]])"
    ],
    "worn-tile-scrabble": [
        "lambda a:''.join([r*7for r in'_ E DG BCMP FHVW K * * JX * QZ'.split()][x][:a.count(x)]for x in set(a))",
        "def f(l):\n d=list(map(list,\"  _EEEEEEE_DDDDGGG_BBCCMMP_FFHHVVW_K___JX__QZ\".split('_')))\n return[d[i].pop()for i in l]"
    ],
    "anti-aliasing-ascii-art": [
        "H=input()\nW=input()+1\nI=' '.join(raw_input()for i in' '*H)\nfor i in range(H):print''.join(map(lambda(s,a,b,c,d):(s*5+'dY<'+s+'bF>'+s+';V@'+' '*16)[16*(s==' ')+8*(a==' ')+4*(b==' ')+2*(c==' ')+(d==' ')],zip(I,I[1:]+' ',' '+I,I[W:]+' '*W,' '*W+I))[i*W:i*W+W-1])",
        "H=input();W=1+input()\nS=' '\no=W*S\nF=o+'\\n'.join((raw_input()+o)[:W-1]for k in range(H))+o\nprint ''.join((16*x+'@;<d>b'+2*x+'V'+x+'Y'+x+'F'+3*x)[\n16*(x>S)|8*(a>S)|4*(l>S)|2*(r>S)|(b>S)]for\nx,a,l,r,b in zip(F[W:-W],F,F[W-1:],F[W+1:],F[2*W:]))"
    ],
    "count-up-folks": [
        "print(*range(1,int(input())+1))",
        "x,i=int(input()),0\nwhile i<x:i+=1;print(i)",
        "for i in xrange(input()):print-~i",
        "i=0\nx=input()\nwhile i<x:i+=1;print i"
    ],
    "this-challenge-uses-the-character": [
        "n=input()-1\np=(' '*n+'+\\n')*n\nprint p+'++'*n+'+\\n'+p",
        "n=2*input()-1;C='+'.center\nfor c in C(n):print C(n,c)",
        "lambda n:('g+\\n'*~-n+'+'*~-(2*n)+'\\ng+'*~-n).replace('g',' '*~-n)",
        "n=input()-1\nz=(' '*n+'+\\n')*n\nprint z+'+'*(2*n+1)+'\\n'+z"
    ],
    "longest-common-prefix-of-2-strings": [
        "for a,b in zip(*input()):print(1/0if a!=b else a),",
        "def f(w):[print(end=c[c!=d])for c,d in zip(*w)]",
        "r=''\nfor x,y in zip(input(),input()):\n if x==y:r+=x\n else:break\nprint(r)"
    ],
    "reverse-a-string-by-chunks": [
        "f=lambda s,n:s and f(s[n:],n)+s[:n]",
        "lambda n,s:''.join([s[i:i+n]for i in range(0,len(s),n)][::-1])"
    ],
    "reverse-array-sum": [
        "lambda l:[i+l.pop()for i in l*1]",
        "lambda l:map(sum,zip(l,l[::-1]))",
        "lambda l:[i+j for i,j in zip(l,l[::-1])]"
    ],
    "stretching-words": [
        "def f(x,y,b=''):\n for i in x:\n    try:\n     if i==y[0]:i=y.pop(0)*2\n    except:0\n    b+=i\n print b",
        "def f(s,l):b=s[:1]==l[:1];return s and-~b*s[0]+f(s[1:],l[b:])",
        "def f(s,t):\n for c in t:s=s.replace(c,'%',1)\n print s.replace('%','%s')%tuple(x*2for x in t)"
    ],
    "cahartcres-awppnig-character-swapping": [
        "f=lambda s:s[3:]and s[:3:2]+f(s[1:5:2]+s[4:])or s",
        "def f(s):s[1:-2:2],s[2:-1:2]=s[2:-1:2],s[1:-2:2];return s"
    ],
    "find-the-highest-unique-digit": [
        "lambda i:max(x+9-9*i.count(x)for x in i)",
        "lambda s:max(s,key=lambda o:s.count(o)<2)",
        "lambda l:max(1/l.count(n)*n for n in l)",
        "lambda i:max(x*(i.count(x)<2)for x in i)"
    ],
    "half-half-half-and-half": [
        "lambda n:(8*n+4)/2**len(bin(n))-1",
        "def f(n):m=2**len(bin(n))/4;return 2*n-m+1,m",
        "n,d=0,1\nfor t in range(int(input())):\n    n+=2\n    if n>d:n=1;d*=2\nprint(n/d)"
    ],
    "determinant-of-an-integer-matrix": [
        "f=lambda m:sum((-1)**i*v*f([j[:i]+j[i+1:]for j in m[1:]])for i,v in enumerate(m[0]))if m else 1",
        "f=lambda m,p=[]:m[0][0]*f(zip(*p+m[1:])[1:])-f(m[1:],p+m[:1])if m else[]==p",
        "def d(n):\n l=len(n);r=range(0,l)\n if l==1:return n[0][0]\n else:return sum([(-1)**i*n[0][i]*d([[n[a][b]for b in r if b!=i]for a in r[1:]])for i in r])"
    ],
    "alphabet-completion-rate": [
        "lambda s:len({*filter(str.isalpha,s.lower())})/26",
        "lambda i:len(set(o for o in i.lower()if o.isalpha()))/26.",
        "lambda s:len({*s.upper()}-{*s.lower()})/26"
    ],
    "wind-me-a-number-snake": [
        "lambda n:[list(map(v,list(range(t-n,t)),[y]*n))for t in[1+n//2]for y in range(n-t,-t,-1)]\nv=lambda x,y,r=0:y>=abs(x)and(3-2*r+4*y)*y+x+1or v(y,-x,r+1)",
        "def f(n):\n M=[n*[0]for a in range(n)]\n x=y=n//2-1+n%2\n M[x][y]=i=s=1\n while 1:\n  t=s*2\n  for d in'R'+'D'*(t-1)+'L'*t+'U'*t+'R'*t:\n   if i==n*n:print(*M,sep='\\n');return\n   v=[1,-1][d in'LU']\n   if d in'UD':x+=v\n   else:y+=v\n   M[x][y]=i=i+1\n  s+=1"
    ],
    "make-an-ascii-bat-fly-around-an-ascii-moon": [
        "c,e,n=' ','m','\\n';f,g=c*9+e*3+c*9,c*7+e*7+c*7;h=9,12;i=12,15;j=6,9;k=13,17;l=4,7;m=c*21,f,g,c*6+e*9+c*6,g,f,c*21;p=h,i,k,(15,18),k,i,h,j,l,(3,6),l,j,h;w=0\nfor z in map(int,'0123456543210'):print n.join(m[:z])+n+m[z][:p[w][0]]+'^o^'+m[z][p[w][1]:]+n+n.join(m[z+1:]);w+=1",
        "b=['   ','^o^']\nfor k in range(91):r=k%7;print(b[k/7+r==12]*(r%6>0)+(r*(6-r)*8/5-5)*'m'+b[k/7%12==r]).center(15)"
    ],
    "mass-of-elements": [
        "def f(x):print {\"H\":1,\"He\":4,\"Li\":7,\"Be\":9,\"B\":11,\"C\":12,\"N\":14,\"O\":16,\"F\":19,\"Ne\":20,\"Na\":23,\"Mg\":24,\"Al\":27,\"Si\":28,\"P\":31,\"S\":32,\"Cl\":35,\"Ar\":40,\"K\":39,\"Ca\":40,\"Sc\":45,\"Ti\":48,\"V\":51,\"Cr\":52,\"Mn\":55,\"Fe\":56,\"Co\":59,\"Ni\":59,\"Cu\":64,\"Zn\":65,\"Ga\":70,\"Ge\":73,\"As\":75,\"Se\":79,\"Br\":80,\"Kr\":84,\"Rb\":85,\"Sr\":88,\"Y\":89,\"Zr\":91,\"Nb\":93,\"Mo\":96,\"Tc\":98,\"Ru\":101,\"Rh\":103,\"Pd\":106,\"Ag\":108,\"Cd\":112,\"In\":115,\"Sn\":119,\"Sb\":122,\"Te\":128,\"I\":127,\"Xe\":131,\"Cs\":133,\"Ba\":137,\"La\":139,\"Ce\":140,\"Pr\":141,\"Nd\":144,\"Pm\":145,\"Sm\":150,\"Eu\":152,\"Gd\":157,\"Tb\":159,\"Dy\":163,\"Ho\":165,\"Er\":167,\"Tm\":169,\"Yb\":173,\"Lu\":175,\"Hf\":178,\"Ta\":181,\"W\":184,\"Re\":186,\"Os\":190,\"Ir\":192,\"Pt\":195,\"Au\":197,\"Hg\":201,\"Tl\":204,\"Pb\":207,\"Bi\":209,\"Po\":209,\"At\":210,\"Rn\":222,\"Fr\":223,\"Ra\":226,\"Ac\":227,\"Th\":232,\"Pa\":231,\"U\":238,\"Np\":237,\"Pu\":244,\"Am\":243,\"Cm\":247,\"Bk\":247,\"Cf\":251,\"Es\":252,\"Fm\":257}[x]",
        "print(dict(H=1,He=4,Li=7,Be=9,B=11,C=12,N=14,O=16,F=19,Ne=20,Na=23,Mg=24,Al=27,Si=28,P=31,S=32,Cl=35,Ar=40,K=30,Ca=40,Sc=45,Ti=48,V=51,Cr=52,Mn=55,Fe=56,Co=58,Ni=58,Cu=64,Zn=65,Ga=70,Ge=73,As=75,Se=79,Br=80,Kr=84,Rb=85,Sr=88,Y=89,Zr=91,Nb=93,Mo=96,Tc=98,Ru=101,Rh=103,Pd=106,Ag=108,Cd=112,In=115,Sn=119,Sb=122,Te=128,I=127,Xe=131,Cs=133,Ba=137,La=139,Ce=140,Pr=141,Nd=144,Pm=145,Sm=150,Eu=152,Gd=157,Tb=159,Dy=163,Ho=165,Er=167,Tm=169,Yb=173,Lu=175,Hf=178,Ta=181,W=184,Re=186,Os=190,Ir=192,Pt=195,Au=197,Hg=201,Tl=204,Pb=207,Bi=209,Po=209,At=210,Rn=222,Fr=223,Ra=226,Ac=227,Th=232,Pa=231,U=238,Np=237,Pu=244,Am=243,Cm=247,Bk=247,Cf=251,Es=252,Fm=257)[input()])",
        "#coding:latin1\nc=\"\u00f4\u00dc\u00c5\u00cc\u00bf\u00df*[h\u00cc\u00b9I\u00caALu>-\\\u00cf\u00c3nay,\u00c3U[\u0160\u00e1\u0160J\u00f0\u00fbC\u00a2\\r\u00fd\u00d1\u00cfR\u00ac\\0W\u00b6\u00b0\u00f2\u00a3w\u00bf<M\u00b9K\u01780I\\f\u00ee1\u017d[b\u00a5!i\u00d6\u0153\u00adC>\u00f7\u00a9\u20ac)r\u00eb>:\u00f6\u00e6\u00f6\\n\u0153\u00e8\u00e3bX\u00f10\u00c8\u00e9\u00e08J\u00af6s\u00f5'\u00ecA\u00b1+y\u00ef#\u00bb\u00c0\u00d9<\u0160=\u00d9\u00ef\"\nn=sum([ord(c[i])*256**i for i in range(145)])\nw=raw_input()+'q'\ns=1\nwhile n and n%541!=ord(w[0])*21+ord(w[1])-1464:\n    n/=541;s+=n%6;n/=6\nprint(s,s+7)[s>210]"
    ],
    "is-this-n-speak": [
        "lambda s:s in[''.join(c*n for c in s[::n])for n in range(2,len(s))]",
        "lambda s:any(s==\"\".join(i*k for i in s[::k])for k in range(2,len(s)))"
    ],
    "output-all-strings": [
        "x,n=input()\nl=len(x)\nfor i in range(n):\n s=''\n while i:i-=1;s+=x[i%l];i/=l\n print s",
        "yield x",
        "s=input();l=['']\nfor x in l:print x;l+=[x+c for c in s]"
    ],
    "be-as-fair-as-possible": [
        "o=input();d=[]\nfor i in range(len(o)-1):\n f=int(o[:i+1]);s=int(o[i+1:]);d.append(abs(f-s))\nprint(min(d))",
        "lambda n:min(abs(int(n[i:])-int(n[:i]))for i in range(1,len(n)))",
        "f=lambda n,k=1:min(abs(n/k-n%k),k/n*n or f(n,10*k))",
        "lambda n:min(abs(n%10**i-n/10**i)for i in range(len(`n`)))"
    ],
    "is-it-a-mersenne-prime": [
        "f=lambda n,i=3:(n^i)-all(n%i for i in range(2,n))<0 or f(n,-~i|i)",
        "def f(a):\n for b in range(a):\n  if(a+1==2**b and not[i for i in range(2,a)if a%i<1]):return 1",
        "def f(m):\n s,n=(m!=3)*4,m>>2\n while-~m&m<n:s,n=(s*s-2)%m,n>>1\n return s<1",
        "a=int(input());print(a&-~a<1and a>1and all(a%b for b in range(2,a)))",
        "lambda n:-~n&n<all(n%i for i in range(2,n))<n"
    ],
    "up-and-down-up-and-down": [
        "f=lambda n:[0][n:]or f(n-1)+range(-n,n+1)[::n%2*2-1][2:]",
        "def c(n):print([(-1)**j*(abs(j-i)-j)for j in range(n+1)for i in range(2*j)][:-n+1])",
        "r=k=0;exec'print r;r+=1-k**.5//1%2*2;k+=1;'*-~input()**2"
    ],
    "no-one-please": [
        "[print(e) for e in map(str,range(int(input())+1))if not'11'in e]",
        "n=int(input())\nc=0\nfor x in ' '*n:\n c+=1\n while'11'in str(c):c+=1\nprint(c)",
        "lambda n:[i for i in range(n*2)if'11'not in`i`][n]"
    ],
    "what-day-is-it-on-flooptonia": [
        "n=int(input())+1\nfor c,x in zip(b\" C\",\"Qupu Blinkorp Paas Karpasus Floopdoor Dumaflop Lindilo Fwup\".split()):c>=n>0and print(*[n,x][-c:]);n-=c",
        "n=input();e=[-1,21,38,62,80,108,140,207];m=1\nwhile n>e[m]:m+=1\nprint[`n-e[m-1]`+' '+'Qupu Blinkorp Paas Karpasus Dumaflop Lindilo Fwup'.split()[m-1],'Floopdoor'][n==80]"
    ],
    "could-you-please-stop-shuffling-the-deck-and-play-already": [
        "f=lambda x:x[1]-2and 1+f(x[::2]+x[1::2])  # 1-based\nf=lambda x:x[1]-1and 1+f(x[::2]+x[1::2])  # 0-based",
        "f=lambda x:x[1]-2and-~f(x[::2]+x[1::2])"
    ],
    "sum-of-modulo-sums": [
        "f=lambda n,c=10:n/c and n%(n/c+n%c)+f(n,c*10)",
        "lambda x:sum(int(x)%(int(x[:i])+int(x[i:]))for i in range(1,len(x)))"
    ],
    "detonate-a-string": [
        "s=input()\nk=l=len(s)\nwhile k>1-l:k-=1;m=abs(k);print' '*m+' '.join(s[m::2])",
        "lambda s,j=' '.join:map(j,zip(*(j(c*-~i).center(len(s)*2)for i,c in enumerate(s))))"
    ],
    "sort-the-climbing-grades": [
        "lambda l:sorted(l,key=lambda x:'B00+'.find(x[1:])+1or int(x[1:])+3)",
        "lambda x:sorted(x,key=lambda y,B10=0:eval(y[1:]+'10'))"
    ],
    "undo-a-range-of-numbers": [
        "f=lambda s,i=1,r='':r<s and-~f(s,i+1,r+`i`)",
        "l=lambda x,z=\"\",y=0:z<x and l(x,z+`y`,y+1)or y",
        "f=lambda s,i=0,t='':t<s and f(s,i+1,t+`i`)or i"
    ],
    "am-i-a-self-number": [
        "lambda x:[i for i in range(x)if i+sum([int(j)for j in`i`])==x]==[]",
        "lambda x:{x}-{n+sum(map(int,str(n)))for n in range(x)}"
    ],
    "autogram-programs": [
        "(\"''+.23cnotu()\"*2+'\"*'*3).count",
        "lambda c,s='lambda c,s=%r:(s%%s).count(c)':(s%s).count(c)"
    ],
    "help-me-open-the-box": [
        "i=\"\\n---\\n| |\\n|_|\"\nl,b,r=i.count(\"-\"),i.split('\\n'),range\nfor x in r(1,l):print\" \"*(l-x)+\"/\"\nfor x in r(2,len(b)):print b[x]",
        "def o(b):\n m=b.split('\\n')[1:]\n print\"\\n\".join([\"/\".rjust(i)for i in range(len(m[0]),0,-1)]+m)",
        "f=open('f.txt')\nd=len(f.readline())-1\na=f.read()\nwhile d:d-=1;print(' '*d+'/')\nprint(a)",
        "f=open(0)\nw=len(f.readline())\nwhile w:w-=1;print(' '*w+'/')\nprint(f.read())"
    ],
    "is-it-a-prefix-code": [
        "lambda l:sum(0==a.find(b)for a in l for b in l)==len(l)",
        "lambda l:all(1/map(a.find,l).count(0)for a in l)"
    ],
    "alphabet-cannon": [
        "f=lambda n,o=0:n and'\\n'.join([f(n-1,o+n).replace('\\n','\\n ')]+[chr(65+(n+o+~i)%26)+'  '*~-n+chr(65+(n*n+o+i)%26)for i in range(n)])or''",
        "I=input()\nS=list('ZYXWVUTSRQPONMLKJIHGFEDCBA'*I)\nR=range\nprint zip(*[(' '*(sum(R(abs(i))))+eval('S.pop()+'*abs(i)+\"''\")[::[-1,1][i>0]]).ljust(sum(range(I+1)))for i in R(-I,I+1)if i])",
        "lambda n:[' '*(n-j)+chr(~-i%26+65)+'  '*j+chr((n*-~n-i)%26+65)for i,j in zip(range(n*-~n/2,0,-1),sum([-~i*[i]for i in range(n)],[]))]",
        "j,r,c,s=int(input()),range,[],[];a=(j+1)*j;b=a//2\nfor i in r(j):k=i+1;c.extend([j-k]*k)\nfor i in r(a):s+=chr(ord('A')+(i%26))\nfor i in r(b):print(' '*c[i]+s[b-i-1]+' '*(2*(j-c[i]-1))+s[b+i])"
    ],
    "curly-numbers": [
        "d=lambda x:(\"{\"+d(x//4)+\"}\"if x>3 else\"\")+\";\"*(x%4)\nc=lambda n:\"{}\"*(int(n)<4)+d(int(n))if n.isdigit()else reduce(lambda x,y:x*4+y,[x.count(\";\")for x in n.split(\"}\")])",
        "lambda n:'{}'*(int(n)<4)+g(int(n))if n.isdigit()else sum((v==';')*4**n.count('}',i)for i,v in enumerate(n))\ng=lambda n:'{%s}'%g(n/4)+';'*(n%4)if n>3else';'*n",
        "def c(t):                           # curly to int function\n v=0                                #  int value of input\n for a in t:                        #  for each character of input\n  if a==';':v+=1                    #   if you find a ';', add one to total\n  if a=='}':v*=4                    #   if you find a '}', multiply total by 4\n print v                            #  print value\ndef i(t):                           # int to curly function\n v=int(t);f,b=\"{}\"if v<4 else\"\",\"\"  #  get integer value. initialize front (f) and back (b) strings\n while 1:                           #  loop until stopped\n  r,v=v%4,int(v/4)                  #   get remainder of v/4 and int value of v/4\n  if r>0:b=';'*r+b                  #   if remainder exists, prepend that many ';' to back string\n  if v>0:f=f+'{';b='}'+b            #   if remaining value > 4, append '{' to front and prepend '}' to back\n  if v<4:b=';'*v+b;break            #   if remaining value < 4, prepend that many ';' to back string and break\n print f+b                          #  print result\nt=raw_input()                       # get raw input\ntry:int(t);i(t)                     # use try block to determine which function to call\nexcept:c(t)                         #"
    ],
    "cryptographic-hash-golf": [
        "def H(I):\n    o=0;n=3;M=1<<128\n    for c in I:i=ord(c);o=(o<<i^o^i^n^0x9bb90058bcf52d3276a7bf07bcb279b7)%M;n=n*n%M\n    return o",
        "def f(n,h=42,m=2**128):\n while n:h+=n&~-m;n>>=128;h+=h<<10;h^=h>>6;h%=m\n h+=h<<3;h^=h>>11;h+=h<<15;return h%m",
        "h,m,s=1,0,raw_input()\nfor c in[9+int(s[x:x+197])for x in range(0,len(s),197)]:h+=pow(c,257,99**99+52)\nprint h%4**64",
        "def f(m):\n h=1;p=[2]+[n for n in range(2,102)if 2**n%n==2];l=len(bin(m))-2;*b,=map(int,bin((l<<(l+25)//26*26)+m)[2:])\n while b:\n  h*=h\n  for P in p:\n   if b:h=h*P**b.pop()%0xb6ee45a9012d1718f626305a971e6a21\n return h"
    ],
    "balanced-ternary-converter": [
        "n=input()\ns=\"\"\nwhile n:s=\"0+-\"[n%3]+s;n=-~n/3\nprint s or 0",
        "n=eval(input())\ns=\"\"\nwhile n:s=\"0+-\"[n%3]+s;n=-~n//3\nprint(s or 0)"
    ],
    "verify-a-minesweeper-board": [
        "def f(B):n=B.find(' ')+1;R=range(len(B));print all(B[I]in' X'+`sum(2>I%n-i%n>-2<I/n-i/n<2<B[i]>'W'for i in R)`for I in R)",
        "def f(s):w=s.find(' ');E=dict(enumerate(s));return all(E[i]in' X'+`sum(E.get(i+d/3*~w+d%3+w,5)>'O'for d in range(9))`for i in E)",
        "s=input();w=s.index(' ')+1\nprint all(c in'X 'or(int(c)==sum(s[max(0,a-1):max(0,a+2)].count('X')for a in[i-w,i,i+w]))for i,c in enumerate(s))"
    ],
    "alphabet-histogram": [
        "def f(s):S=sorted(set(s)^{' '});C=map(s.count,S);P=max(C)+4;return zip(*(zip(*[('%d-'%y*(y%5==2>>y)).rjust(P)for y in range(P,0,-1)])+[(n*'#').rjust(P)for n in C]))+[[' ']*P+S]",
        "s=input()\nd={c:s.count(c)for c in s if' '<c}\nh=-max(d.values())/5*-5\nfor y in range(h,-1,-1):print('%d-'%y*(y%5==2>>y)).rjust(len(`-h`))+''.join(('X '[y>v],k)[y<1]for k,v in sorted(d.items()))",
        "lambda s:[[list((\"%d-\"%i*(i%5==2>>i)).rjust(len(q)))+[\"* \"[s.count(c)<i]for c in q]for i in range(max(map(s.count,q))+4,0,-1)]+[[\" \"]*len(q)+q]for q in[sorted(set(s)-{' '})]][0]"
    ],
    "create-an-interface-that-fits-the-xkcd-types": [
        "B=\"\"\"53\"#0000FF\"~62DONE~43NaN.000000000000013~25(1,4,3,4,5)~26\"rainbow\"~49\"4\"~21\"[2]\"~29FALSE~15|*|*|*|___10.5___~17'\"+\"'~1212~60('\"',\"!\",\" \",\"!\",'\"')~24NaN~31TRUE~64NaN~76NaP\"\"\"\ni=0\nwhile 1:i+=1;s=input(\"[%s]>\"%i);print(\"=>\"+B[B.find(str(sum(map(ord,s))%81))+2:].split(\"~\")[0].replace(\"*\",\"\\n=>\"))",
        "a={'2+\"2\"':'\"4\"','\"2\"+[]':'\"[2]\"',\"(2/0)\":\"NaN\",\"(2/0)+2\":\"NaP\",'\"\"+\"\"':\"'\\\"+\\\"'\",\"[1,2,3]+2\":\"FALSE\",\"[1,2,3]+4\":\"TRUE\",\"2/(2-(3/2+1/2))\":\"NaN.000000000000013\",'RANGE(\" \")':'(\\'\"\\',\"!\",\" \",\"!\",\\'\"\\')',\"+2\":\"12\",\"2+2\":\"DONE\",\"RANGE(1,5)\":\"(1,4,3,4,5)\",\"FLOOR(10.5)\":\"|\\n|\\n|\\n|___10.5___\",'colors.rgb(\"blue\")':'\"#0000FF\"','colors.rgb(\"yellowish blue\")':\"NaN\",\"colors.sort()\":'\"rainbow\"'}\ni=1\nwhile 1:b=a[input(\"[%i]>\"%i).replace(\"\\t\",\"\")].split(\"\\n\");print(\"=> \"+\"\\n=> \".join(b));i+=1"
    ],
    "fond-memories-of-past-primes": [
        "p=lambda n:all(n%x for x in range(2,n))\ng=input()\ns=2\nwhile not(p(s)and len([l for l in[str(x)for x in range(2,s)if p(x)]if l in str(s)])==g):s+=1\nprint s",
        "f=lambda n,x=2:n-sum(all(j%k for j in(i,x)for k in range(2,j))for i in range(2,x)if`i`in`x`)and f(n,x+1)or x"
    ],
    "sum-of-powers-of-2": [
        "def f(x):n=1;exec'print n&x;n*=2;'*8",
        "f=lambda n,p=1:n/p*[1]and f(n,p*2)+[p&n]",
        "lambda n:[n&2**i for i in range(8)]"
    ],
    "multiply-two-strings": [
        "lambda*a:''.join(map(max,*a))",
        "lambda a:''.join(map(max,zip(*a)))"
    ],
    "get-your-dubs-together": [
        "lambda s:len(`s`)-len(`s`.rstrip(`s%10`))",
        "input()",
        "lambda S:[x==`S`[-1]for x in`S`[::-1]+'~'].index(0)",
        "f=lambda n:0<n%100%11or-~f(n/10)"
    ],
    "flatten-the-array": [
        "f=lambda l:[l]*(l*0!=[])or sum(map(f,l),[])",
        "f=lambda a:sum([list==type(x)and f(x)or[x]for x in a],[])"
    ],
    "decode-the-dreaded-alphabet-cypher%ef%b8%8f": [
        "lambda i:\"\".join(x[:2]if'a'>x else x[0]for x in i.replace('a','a#').split('#')[:-1])",
        "lambda s:[r for l,r in zip(' '+s,s)if'b'>l]"
    ],
    "write-a-program-to-elasticize-strings": [
        "f=lambda s:s and f(s[:-1])+s[-1]*len(s)",
        "f=lambda s,i=1:s and s[0]*i+f(s[1:],i+1)"
    ],
    "the-first-n-numbers-without-consecutive-equal-binary-digits": [
        "s=0\nexec\"print s;s+=s+~s%2;\"*input()",
        "s=2\nexec\"print s/3;s*=2;\"*input()",
        "c=lambda x,r=0:x and[r]+c(x-1,2*r+~r%2)or[]",
        "lambda n:[int(('0'+'10'*i)[:i+1],2)for i in range(n)]",
        "lambda n:[2**i*2/3for i in range(n)]"
    ],
    "compute-the-median": [
        "lambda l:l.sort()or(l[len(l)/2]+l[~len(l)/2])/2.",
        "f=lambda l:l.sort()or(len(l)<3)*(l[0]+l[-1])/2or f(l[1:-1])"
    ],
    "is-there-a-single-straight-line-in-the-matrix": [
        "lambda a,n:set(map(sum,a+zip(*a)))=={0,1,n}",
        "lambda a,n:sorted(map(sum,a+zip(*a)))[-2:]==[1,n]"
    ],
    "exploded-substrings": [
        "lambda x:[print(' '*i+x[i:j+1])for i in range(len(x))for j in range(i,len(x))]",
        "f=lambda s,p='':set(s)and{p+s}|f(s[1:],' '+p)|f(s[:-1],p)",
        "e(\"abcde\",0)"
    ],
    "double-it-your-way": [
        "lambda n:\"and n*n#\"and 2*n",
        "print(eval(input()+\"**2\"[len(*open(__file__))%2:])) #",
        "0;  i=input;0;  p=print;n=i()#\nx=int(n)##\nz=2*x#z=x*x\np(z)##"
    ],
    "find-a-multiple-of-a-given-number-whose-decimal-representation-looks-like-binary": [
        "99 -> 0.436 Seconds\n72 -> 0.007 Seconds",
        "a=input();b=1\nwhile set(`a*b`)&set('23456789'):b+=1\nprint b",
        "n=input()\nd={n:0}\nk=1\nwhile min(d):[d.setdefault((x+k)%n,d[x]+k)for x in set(d)];k*=10\nprint d[0]/n",
        "n=a=input()\nwhile'1'<max(str(a)):a+=n\nprint a/n"
    ],
    "interleave-numbers-from-1-to-n-with-the-same-numbers-reversed": [
        "lambda n:''.join(`x+1`+`n-x`for x in range(n))",
        "lambda n:''.join(\"%d%d\"%(x+1,n-x)for x in range(n))",
        "n=input()+1\ni=1\ns=\"\"\nwhile i<n:\n    s+=`i`+`n-i`\n    i+=1\nprint s"
    ],
    "be-there-for-the-square": [
        "lambda x:[x]+[x[i]+\" \"*(len(x)-2)+x[~i]for i in range(1,len(x)-1)]+[x[::-1]]",
        "lambda s:[s]+map((' '*len(s[2:])).join,zip(s,s[:0:-1]))[1:]+[s[::-1]]"
    ],
    "return-the-closest-prime-number": [
        "lambda n:sorted(range(1,3*n),key=lambda x:abs(x-n)if all(x%k for k in range(2,x))else 2*n)[0]",
        "f=lambda n,k=1,p=1:k<n*3and min(k+n-p%k*2*n,f(n,k+1,p*k*k)-n,key=abs)+n",
        "l=lambda p:min(filter(lambda p:all(p%n for n in range(2,p)),range(2,p*3)),key=lambda x:abs(x-p))"
    ],
    "the-leading-zeroes-challenge": [
        "lambda x,y:f'{x:0{(y,0)[y<0]+(x<0)}}'",
        "lambda x,y:x.zfill(y+(x<'.'))",
        "f(x,y)"
    ],
    "the-rats-sequence": [
        "def f(n):\n v='1'\n for _ in v*n:v=''.join(sorted(str(int(v)+int(v[::-1]))))\n print v",
        "f=lambda x,n=1:x and f(x-1,int(''.join(sorted(`n+int(`n`[::-1])`))))or n",
        "f=lambda n,a=1:n<1or int(''.join(sorted(`f(n-1)+f(n-1,-1)`))[::a])",
        "def f(n):\n t=1\n for i in range(n):t=int(\"\".join(sorted(str(int(str(t)[::-1])+t))))\n print t"
    ],
    "generate-recam%c3%a1ns-sequence": [
        "m=p,=0,\nexec\"p+=1;k=m[-1]-p;m+=k+2*p*(k*(k>0)in m),;\"*input()\nprint m",
        "n=a=0\nv=[]\nexec'a+=[n,-n][a+n in v];print a;n-=1;v+=a,n;'*input()",
        "def f(x,t=0):\n if x:t=f(x-1);t+=2*x*(t*(t>0)in map(f,range(x)))\n return t"
    ],
    "calculate-the-longest-series-of-1s-in-an-integers-binary-value": [
        "m=t=i=j=0\nfor c in bin(input()):\n t=-~t*(c>'0');i+=1\n if t>m:j=i;m=t\nprint i-j",
        "f=lambda x:x&x>>1and f(x&x>>1)or len(bin(x))-3",
        "len(bin(num)[2:].split('1'*(max(list(map(len,bin(num)[2:].split('0'))))))[1])",
        "f=lambda x:f(x&x/2)if x&x/2else len(bin(x))-3",
        "f=lambda n:n/2and(n&n/2<1)+f(n&n/2or n/2)"
    ],
    "backwards-alphabet-triangle": [
        "print('\\n'.join((25-len(v)//2)*' '+v for v in(''.join(\" \"+chr(i)for i in range(90,64,-1))[i:52]for i in range(51,-1,-2))))",
        "i=26\ns='A'\nwhile i:i-=1;print' '*i+s;s='%c '%(91-i)+s",
        "for i in range(27):print((27-i)*' '+' '.join(chr(64+i-x)for x in range(i)))",
        "for i in range(26):print(' '*(25-i)+' '.join(chr(65+i-j) for j in range(i+1)))",
        "for _ in range(26):print(f'{\" \".join([*map(chr,range(65,91))][0:_+1][::-1]):^52}'.rstrip())"
    ],
    "targeted-duplicate-removal": [
        "l,n=input()\nfor x in l:\n if~n-x:print x;n^=-(x==n)",
        "n,l=input()\nx=1\nfor d in l:\n if x|d-n:print d;x*=d-n",
        "f=lambda n,l:l.count(n)>1and f(l.pop(~l[::-1].index(n)),l)or l"
    ],
    "please-release-me": [
        "lambda v,c:'.'.join((str((int(x)+1)*(i==c)),x)[i<c]for i,x in enumerate(v.split('.')))",
        "lambda s,n:'.'.join(str([-~int(x)*(i==n),x][i<n])for i,x in enumerate(s.split('.')))"
    ],
    "simulate-keystrokes": [
        "f=lambda s,r='',c='':f(s[1:],*{'B':(r[:-1],c),'C':(r,r),'D':('',c),'P':(r+c,c),'':(r+s[0],c)}[s[0][1:2]])if s else r",
        "r=c=\"\"\nfor o in input():c=[c,r][x==\"[C]\"];r=[r+c,r[:-1],r,\"\",r+o][ord(o[1:2]or\"E\")%5]\nprint r"
    ],
    "bring-out-the-inner-llama-of-a-sentence": [
        "g,n,o='llama',0,[]\nfor i in s:\n if g:exec(\"o+=[n];g=g[1:];\"*(i.lower()==g[0])+\"n+=1\")\no*=len(o)>4",
        "r=[];c=-1\nfor x in'llama':c=s.lower().find(x,c+1);r+=[c]\nr*=1-(-1in r)"
    ],
    "sum-of-five-cubes": [
        "lambda N:[n**3for k in[(N**3-N)//6]for n in[N,-k-1,1-k,k,k]]",
        "def f(n):k=(n-n**3)//6;return[n**3,(k+1)**3,(k-1)**3,-k**3,-k**3]",
        "def f(n):k=(n**3-n)/6;return[v**3for v in~k,1-k,n,k,k]"
    ],
    "brute-force-the-switchboard": [
        "f=lambda s:{s.replace('v','{}').format(*['v^'[c<'1']for c in bin(x+i)[::-1]])for i in range(x:=1<<len(s))}",
        "def f(s):i=s.find('v');return(i>=0and f(s[:i].replace('^','v')+'^'+s[i+1:])+'\\n'or'')+s",
        "def f(a):\n b=[0]\n for l in a.split():b+=[b[-1]+l.count('v')]\n return'\\n'.join(''.join(f\"{k:b}\".zfill(b[-1])[x:y]+'-\\n'for x,y in zip(b,b[1:]))for k in range(2**b[-1])).replace('0','-v').replace('1','-^')"
    ],
    "i-love-sardines": [
        "lambda x,y,t='_'*10:'\\n'.join(x[::1-2*y]for x in[' %s  '%t,'()'[y]+t+'@%']+['|'+('<>**)(%s><<>'%t)[y::2]+'||']*x+['|'+' '*10+'||']*(3-x)+[\"'\"+'='*10+\"''\"])",
        "n,d=input()\nt,a,b,c,e,k=' __________   ','(__________@% ','|<*)_____><|| ','|          || ',\"'=========='' \",'\\n'\nprint[t+k+a+k+k.join([b]*n)+k+k.join([c]*(3-n))+k*(n<3)+e,t[::-1]+k+a[::-1].replace(*'()')+k+k.join([b[::-1].replace(*')(')]*n)+k+k.join([c[::-1]]*(3-n))+k*(n<3)+e[::-1]][d]"
    ],
    "the-easy-road-to-code": [
        "n,d=input()\ns=' '+'|\\/'[d]\nfor c in(s*n)[n:]:print' '*n+s,c+s;n+=d",
        "n,d=input()\nc='|\\/'[d]\ni=n\nwhile i:print' '*(n-i*d)+c,i%2*c or' ',c;i-=1",
        "n,d=input()\nc='|/\\\\'[d]\nfor i in range(n):t=0if d==0else(i if d<0else n-i);print(' '*t+'{} {} {}'.format(c,' 'if i%2==0else c,c))",
        "n,d=input();p=''\nwhile n:g='|/\\\\'[d];n-=1;print['',' '*n,p][d]+g+' %s '%(g,' ')[n%2]+g;p+=' '"
    ],
    "can-the-number-be-split-into-powers-of-2": [
        "f=lambda n,k=10:k<11*n>n%k&n%k-1<(n<k)|f(n/k)|f(n,10*k)*n",
        "f=lambda n:bin(int(n)).count('1')==1or any(f(n[:i])*f(n[i:])for i in range(1,len(n)))",
        "f=lambda n,m=10:n>=m/10and(n%m&n%m-1<1and(n/m<1or f(n/m))or f(n,m*10))"
    ],
    "the-ihih-pyramid": [
        "r=range(input()+1)\nr=r[:0:-1]+r\nfor y in r:print''.join('| -'[[x%2,y%2+1][x&-2<y]]for x in r)",
        "def i(e):\n d=\"|\";a=e*2;x=d+\" \"*(a-1)+d\n if e<1:return d\n if e%2:d,x=[\" \",\"-\"*(a+1)]\n return[x]+[d+z+d for z in i(e-1)]+[x]"
    ],
    "square-snowflake": [
        "s=\"%64c\"%10\nexec's*=63;s=\"\".join(s[n][(s[n+3967:][:191]*3)[::64].strip()==\"X\":n!=2015]or\"X\"for n in range(4032));'*32\nprint s",
        "R=range(63)\nfor i in R:m=[[i>0==(x*y-961)*0**m[y][x]*~-sum(sum(k[x+x%~x:x+2])for k in m[y+y%~y:y+2])for x in R]for y in R]\nprint m"
    ],
    "root-of-root-of-root-of-root": [
        "s=n=input()\nwhile s:print' '*s,'/ '*(n-s)+'_'*(2*s+len(`n`));s-=1\nprint'\\/'*n,n",
        "n=int(input())\nfor i in range(n):print(\" \"*(n+~i),\" /\"*i,\"_\"*(2*n-2*i+len(str(n))))\nprint(\"\\/\"*n,n)"
    ],
    "an-ant-on-a-cube": [
        "def f(l):\n p=[3,2,1]\n for d in l:p[d],p[0]=-p[0],p[d]\n return[3,2]<p",
        "f=lambda l:reduce(lambda n,x:n%4*64+n/4*16**x%63,l,27)<28"
    ],
    "count-rook-moves-1d": [
        "def f(r):S=map(len,r.split('R'));return sum(S)*2-S[0]-S[-1]",
        "lambda s:sum((s+s).strip())/9"
    ],
    "superior-passtimes": [
        "lambda l:map(sum,zip(*[iter(l)]*2))==l[len(l)/2+1:]",
        "lambda x:reduce(lambda a,b:(b==map(sum,zip(a[::2],a[1::2])))*b,x)",
        "lambda a:[map(int.__add__,x[::2],x[1::2])for x in a[:-1]]==a[1:]",
        "lambda v:any(x+v[i-1]-v[(len(v)+i)//2]for i,x in enumerate(v)if i%2)",
        "lambda l:all(l[i+1]==map(sum,zip(l[i][::2],l[i][1::2]))for i in range(len(l)-1))"
    ],
    "smallest-prime-with-a-twist-a068103": [
        "w=2,3,5,7,11,13,17,19,23,29,31,37,41\ndef p(n):\n for q in w:\n  if n%q<1:return n==q\n  if q*q>n:return 1\n m=n-1;s,d=-1,m\n while d%2==0:s,d=s+1,d//2\n for a in w:\n  x=pow(a,d,n)\n  if x in(1,m):continue\n  for _ in range(s):\n   x=x*x%n\n   if x==1:return 0\n   if x==m:break\n  else:return 0\n return 1\ndef f(i):\n if i<2:return 2\n k=1\n while k:\n  k*=10;l=int('2'*i)*k\n  for n in range(l+1,l+k,2):\n   if p(n):return n",
        "def f(x):\n k=10;p=2*(k**x//9)\n while x>1:\n  for n in range(p*k,p*k+k):\n   if all(n%q for q in range(2,n)):return n\n  k*=10\n return 2"
    ],
    "creating-a-hq9-interpreter": [
        "q=raw_input()\nif set(q)-set('HQ9+'):print'Source code contains invalid characters'\nb=' bottles of beer'\nb=[b,b.replace('s','')]\nw=[a+' on the wall'for a in b]\nt='Take one down, pass it around,\\n'\nc={'H':'Hello, world!','Q':q,'9':''.join(`i`+w[i<2]+',\\n'+`i`+b[i<2]+'.\\n'+t+(`i`if i>1 else'No')+w[0]+'.\\n'for i in range(1,100)[::-1])+'No'+w[0]+',\\nNo'+b[0]+'.\\n'+'Go to the store, buy some more,\\n99'+w[0]+'.'}\nfor d in q:\n if d in c:print c[d]",
        "s,o=raw_input(),''\nfor z in s:\n if z in'Hh':o+='Hello World!'\n elif z in'Qq':o+=s\n elif'9'==z:\n  i=298\n  while~-i:print i/3or 99,'bottle'+'s of beer on the wall.\\n'[2<i<6:9+i%3*12]+'..\\nGToa kteo  otnhee  dsotwonr,e ,p absusy  isto maer omuonrde,,'[(i>3)+i%3*68::2];i-=1\n elif'+'!=z:o='Source code contains invalid characters';break\nprint o"
    ],
    "how-many-countries-are-in-the-european-union": [
        "i=int(input()[:6]);print((((((((27,28)[202002>i>201306],25)[i<200701],15)[i<200405],12)[i<199501],10)[i<198601],9)[i<198101],6)[i<197301],0)[i<195801]",
        "lambda d:ord('069:<?IKLK'[sum(d>i for i in(0,5479,8401,10227,13514,16922,17897,20270,22676))])-48"
    ],
    "what-is-my-volume": [
        "lambda n:'\\n'.join(i[:5+0**n]+(n//33*(' '+j))[:4]for i,j in zip([' _/|','|  |\\\\/','|_ |/\\\\','  \\|'],'\\\\\\//'))",
        "n=input()\nfor s in'\\ _/|','\\|  |\\/','/|_ |/\\\\','/  \\|':print s[1:6+0**n],s[:n>32],s[:n/66]"
    ],
    "which-dominoes-are-missing": [
        "lambda z,s=\"0123456\":{x+y for x in s for y in s[int(x):]}-{(a+b,b+a)[a>b]for a,b in z}",
        "lambda A,S=\"0123456\":sum([[i+j for j in S[int(i):]if(i+j in A)+(j+i in A)<1]for i in S],[])"
    ],
    "different-ways-of-defining-primes": [
        "lambda i,k:(i>k)<all(k%r for r in range(i,k))",
        "f=lambda n,i:n==i or i>i%n>0<f(n+1,i)"
    ],
    "grid-based-digital-logic-duodyadic-tiles": [
        "def f(G,T,L):\n def g(x,y):\n  if x>-1<y:l=g(x-1,y)[1];t=g(x,y-1)[0];r=l,t,1-l,0,0,1,t,l,l&t,l|t,l^t;i=\"+\\\\!0 1U)&|^\".index(G[y*-~W+x]);return((t,l,1-t)+r[3:])[i],r[i]\n  return(int((y<0)*T[x]or L[y]),)*2\n H=G.count(\"\\n\")+1;W=len(G)/H;return eval('\"\".join(map(str,[g(%s]for _ in range(%s)])),'*2%('_,H-1)[0','W','W-1,_)[1','H'))",
        "def b(d,j,g):\n h=enumerate;e=dict((s[0],eval('lambda T,L:('+s[1:]+')'))for s in' 0,0#00,0#11,1#+L,T#\\\\T,L#UT,T#)L,L#!1-L,1-T#&T&L,T&L#|T|L,T|L#^T^L,T^L'.split('#'));j=list(j+'\\n');g=list(g)\n for y,k in h(d.split('\\n')):\n  L=g[y]\n  for x,c in h(k):T=j[x];L,B=e[c](int(T),int(L));j[x]=`B`\n  g[y]=`L`\n print''.join(j+g)"
    ],
    "square-root-of-ascii-art": [
        "x=input()\nn=len(x)\ns=\" \"\nfor v in[s*2*n+\"_\"*(2+len(x[0]))]+[s*i+\"\\\\\"+s*2*(n+~i)+\"/\"+s*-~i+r for i,r in enumerate(x)]:print v[n/2:]",
        "def f(l):h=len(l);w=len(l[0]);c=int(h/2);print('\\n'.join([(h*2-c)*' '+w*'_']+[(i*' '+'\\\\'+(h-i-1)*2*' '+'/'+i*' ')[c:]+s for(i,s)in enumerate(l)]))",
        "x=Q=input()\nl=len(x)\nk=(l+1)/2\nq=l+k\nx=[[' ']*(q+1)+list(y)for y in x]\nfor i in range(k):x[i+l/2][i]='\\\\'\nfor j in range(l):x[j][q-j-1]='/'\nprint'\\n'.join([' '*q+'_'*(2+len(Q[0]))]+map(''.join,x))"
    ],
    "alphabet-staircase": [
        "[print(a*(ord(a)-96))for a in \"abcdefghijklmnosqrstuvwxyz\"]",
        "for k in range(27):print(chr(k+96)*k)",
        "i=1\nexec'print chr(i+96)*i;i+=1;'*26"
    ],
    "internal-truth-machine": [
        "or~print(0)\nwhile 1:print(1)",
        "and exec('while 1:print(1)');print(0)",
        "0 or print(0)or exit()\nwhile 1:print(1)"
    ],
    "is-it-a-sum-free-set": [
        "lambda s:s^{a+b for a in s for b in s}>s",
        "lambda s:s==s-{a+b for a in s for b in s}"
    ],
    "compute-the-adler-32-checksum": [
        "H=h=65521\nl=1\nfor n in input():l+=n;h+=l\nprint h%H<<16|l%H",
        "lambda w,E=65521:(1+sum(w))%E+(sum(1+sum(w[:i+1])for i in range(len(w)))%E<<16)",
        "lambda w:((1+sum(w))%65521)+4**8*(sum(1+sum(w[:i+1])for i in range(len(w)))%65521)"
    ],
    "source-code-byte-frequency": [
        "print(open(__file__).read().count(input())/46)",
        "f=open(__file__).read();print(f.count(input())/len(f))",
        "s=\"print`'s=;exec s'+s`.count(input())/50.\";exec s"
    ],
    "calculate-eulers-totient-function": [
        "lambda n:sum(k/n*k%n>n-2for k in range(n*n))",
        "f=lambda n,d=1:d/n or-f(d)*(n%d<1)-~f(n,d+1)",
        "f=lambda n,k=1,m=1:n*(k>n)or f(n-(n%k<m%k)*n/k,k+1,m*k*k)"
    ],
    "count-how-many-times-your-program-repeats": [
        "c=open(__file__).read().count;print(c('w\t')-c('y\\t'))#))'\ty'(c-)'t\\w'(c(tnirp;tnuoc.)(daer.)__elif__(nepo=c",
        "for i in(a:=0),1:#1=-a;)a(tnirp+dna i \n i and+print(a);a+=1#:1,)0=:a(ni i rof",
        "0-~+0"
    ],
    "character-cross": [
        "s=input()\nL=len(s)\nR=range(L)\nfor i in R:print\" \".join([s[j],\" \"][j!=i!=L+~j]for j in R)",
        "s=input()\ni=n=len(s)\nwhile i:i-=1;a=[\" \"]*n;a[i]=s[i];a[~i]=s[~i];print(*a)",
        "w=input();l=len(w);d=l//2;n=' ';x=range(d)\nfor i in x:print(n*i*2+w[i],n*(l+2-i*4),w[-1*i-1])\nprint(n*(l-1)+w[d])\nfor i in x:print(n*(l-i*2-3)+w[-1*(d+i+2)],n*(i*4+1),w[d+i+1])"
    ],
    "print-all-lexicographically-increasing-numbers-under-10000": [
        "for i in range(6790):\n if`i`==\"\".join(sorted(set(`i`))):print i",
        "for i in range(9999):\n if list(`i`)==sorted(set(`i`)):print i",
        "lambda:[x for x in range(9999)if sorted(set(`x`))==list(`x`)]",
        "for n in range(9999):\n if eval('<'.join(`n`))**n:print n",
        "i=0\nexec\"print i\\ni+=1\\nif eval('<'.join(`i`)):1;\"*7000"
    ],
    "16-bit-binary-grid": [
        "n=bin(4**8+input())[3:]\ni=0\nexec\"print'| %s |'%' | '.join(' #'[x>'0']for x in n[:4])*i or'+---'*4+'+';n=n[4*i:];i^=1;\"*9",
        "n=input()\ns=();exec\"s=(' #'[n%2],)+s;n/=2;\"*16\na='+---'*4+'+\\n'\nprint(a+'| %s '*4+'|\\n')*4%s+a",
        "a=\"|\";b=\"+\"+\"---+\"*4+\"\\n\";r=0,1,2,3;(lambda x:print(b+b.join(a+a.join(\" %s \"%'# '[x&2**(i+j*4)<1]for i in r)+a+\"\\n\"for j in r)+b))(int(input()))",
        "J=''.join;R='+---'*4;i=format(input(),'016b')\nprint J(R+'+\\n|'+J(' '+('#'if int(l)else' ')+' |'for l in i[n*4:-~n*4])+'\\n'for n in range(4)),R+'+'"
    ],
    "list-all-times-in-the-day-at-a-half-hour-rate": [
        "print ',\\n'.join(['%02d:00,\\n%02d:30'%(h,h) for h in range(24)])",
        "for i in range(48):print\"'%02d:%s0',\"[:57-i]%(i/2,i%2*3)",
        "print',\\n'.join([\"'%02d:%s0'\"%(h,m)for h in range(24)for m in'03'])",
        "print',\\n'.join(\"'%02u:00',\\n'%02u:30'\"%(h,h)for h in range(24))",
        "for i in range(24):print(\"'%02d:00,\\n%02d:30'\"%(i,i)+', '[i>22])"
    ],
    "2-cats-in-a-quine": [
        "id=print(open(0).read());",
        "s='s=%r;exec(s[20:45])#print(end=open(0).read())\\nprint(s%%s)';exec(s[20:45])#"
    ],
    "validate-random-die-tippers": [
        "lambda x:all(0<a^b<7for a,b in zip(x,x[1:]))",
        "lambda x:all(x[i]!=x[i+1]!=7-x[i]for i in range(len(x)-1))",
        "f=lambda h,*t:t==()or 7>h^t[0]>0<f(*t)",
        "lambda s:reduce(lambda p,n:n*(7-p!=n!=p>0),s)",
        "f=lambda s:len(s)<2or(s[0]!=s[1]and int(s[0])!=7-int(s[1]))and f(s[1:])"
    ],
    "is-it-really-time": [
        "lambda n:n/100%100<60>n%100",
        "f=lambda n:n<1or(n%100<60)*f(n/100)"
    ],
    "what-temperature-is-my-stove": [
        "p=0\nfor k in input():\n  if k=='+':\n    if p==0:p=9\n    elif p==9:p=0\n    else:p+=1\n  if p==0:p=4\n  else:p-=1\nprint(p)",
        "lambda s,a=0:[[a:=b'49021324354657687980'[c+2*a]-48for c in s],a][1]",
        "f=lambda x,t=0:f(x[1:],{\"+\":{9:0,0:9},\"-\":{0:4}}[x[0]].get(t,t+eval(f\"{x[0]}1\")))if x else t",
        "def f(c,t=0):\n if len(c):p=c[0];t=((0,9,4)[p],t+p)[t>0]%10;return f(c[1:],t)\n return t",
        "n=0\nfor b in input():n=[b%7-2,n+b][n>0]%10\nprint n"
    ],
    "golfing-ascii-art": [
        "s=' ';print('\\n'+6*s+\"'\\\\\"+19*s+'.  .'+24*s+\"|>18>>\\n\"+8*s+'\\\\'+14*s+'.'+9*s+\"' .\"+19*s+\"|\\n       O>>\"+9*s+'.'+17*s+\"'o\"+16*s+'|\\n'+8*s+\"\\\\       .\"+38*s+'|\\n'+8*s+\"/\\\\    .\"+40*s+\"|\\n       / /  .\"+42*s+\"|\\n jgs^^^^^^^`\"+51*'^'+'\\n')",
        "i=\"\"\"\nG^y`G^MsGgGj!G\nG|!o'G.!H/!G/!M\nG|!n.!J\\G/!N\nG|!l.!M\\!N\nG|!VoG'!W.!O>HO!M\nG|!Y.!G'!O.!T\\!N\nG>H8G1G>G|!^.!H.!Y\\G'!L\nG\"\"\".replace('!','G ')\no=''\nj=140\nwhile j:j-=2;o+=ord(i[j+1])%70*i[j]\nprint o",
        "'eJzjUgAB9RgFTKAHRthBjZ2hhZ0dF5SHphuhSx2rCTVQff52dlj0wPXm49IHtw+n83Do048hQRdCnz4QKuipE6sNqC8rvTgOAhLiSAdcAG/9Ri8='.decode('base64').decode('zip')",
        "print'''\n%6s'\\%19s.  .%24s|>18>>\n%8s\\%14s.%9s' .%19s|\n%7sO>>%9s.%17s'o%16s|\n%8s\\%7s.%38s|\n%8s/\\%4s.%40s|\n%7s/ /  .'%41s|\n jgs'''%(('',)*19)+'^'*7+'`'+'^'*51",
        "\u6323\u646f\u6e69\u3a67\u5455\u2d46\u3631\u4542\nprint\u7827\ue39cR\uf503\u0518\ua04c\u4607\u41d8\u9d8d\u85a1\u1d9d\u8c17\ua68b\ua11d\u1d4d\u11ab\u3035\ufe8d\u7676\u3458\u35c1\ue3e7\u08d4\u11b7\u0ba7\u6971\u8fd4\u4121\u921b\u7d46\u5420\u53d0\u5627\u481f\u5663\u717a\u041c\uc424\u0e91\ua000\u472e'.decode(\u7a27\u696cb')"
    ],
    "ah-why-is-there-a-bug-in-my-program": [
        "def f(n):print((n+len(\"bug\")+5)/10)",
        "while __debug__:print(1)",
        "print 'bug'*4"
    ],
    "how-many-ip-addresses-are-in-a-given-range": [
        "f=lambda a:reduce(lambda x,y:x*256+int(y),a.split(\".\"),0)\np=lambda a,b:abs(f(a)-f(b))+1",
        "y=lambda:map(int,input().split(\".\"));a,b=y(),y();print sum(256**(3-i)*abs(a[i]-b[i])for i in range(4))+1",
        "def a():x=map(int,raw_input().split(\".\"));return x[0]*2**24+x[1]*2**16+x[2]*2**8+x[3]\nprint abs(a()-a())+1"
    ],
    "longest-word-using-a-single-row-of-the-qwerty-keyboard": [
        "lambda l:max(l,key=lambda w:(-len({\"asdfghjklzxcvbnm\".find(c)/9for c in w}),len(w)))",
        "a.strip(b)",
        "lambda a:max(a,key=lambda x:(any(map(set(x).__le__,['qwertyuiop','asdfghjkl','zxcvbnm'])),len(x)))"
    ],
    "binary-fibonacci": [
        "f=lambda n,a=[0,1]:n>len(a)and f(n,a+[sum(a[-2:])])or int(''.join(bin(v)[2:]for v in a[:n]),2)",
        "w='';a,b=0,1\nexec('w+=bin(a)[2:];a,b=b,a+b;'*int(input()))\nprint(int(w,2))",
        "def f(N):\n a,b,l=0,1,''\n for _ in range(N):l+=format(a,'b');a,b=b,a+b\n return int(l,2)",
        "f=lambda n,a=0,b=1,r=0:n and f(n-1,b,a+b,r<<len(bin(a))-2|a)or r",
        "f=lambda n,a=0,b=1:n and int(f'{a:b}{f(n-1,b,a+b)*2:b}',2)//2",
        "def f(n):\n a,b,r=0,1,\"0\"\n for _ in range(n-1):a,b=b,a+b;r+=bin(a)[2:]\n print int(r,2)"
    ],
    "how-many-three-fruit-pies-can-you-make": [
        "h=lambda l,k=3:k*'_'and min(h(sorted(l)[:-1],k-1),sum(l)/k)",
        "s=sorted([input()for x in[0]*5])\nwhile s[2]:s[2]-=1;s[3]-=1;s[4]-=1;s.sort();x+=1\nprint x",
        "g=lambda l,k:0if k>sum(l)else-(-1in l)or-~g(map(sum,zip(sorted(l),[0]*(len(l)-k)+[-1]*k)),k))"
    ],
    "golf-a-golf-chart": [
        "lambda d:sum(b//25<=b%25+23-d/5<=7for b in b'BUNSWYQ+-}\u0018')+1",
        "lambda n,a=[1],b=[2],c=[3],d=[4]:(a*20+b*11+a*4+b*15+c*6+b*4+c+(c*9+d)*6+d*5+c*14+d+c*10+b*25+a*25)[n-60]",
        "lambda n:sum(a<=n/5<=b for a,b in zip(b'($\" \u001e\u001c\u001a\u0018\u0016\u0013\u0010\f',b'4/*(%\" \u001e\u001c\u001a\u0017\u0012'))",
        "lambda d,n=12:sum((n:=n+x//8-4)<=d/5<=n+x%8+6for x in b' A980001225F')",
        "lambda n:sum(a<=chr(n)<b for a,b in zip('<P_nx\u0082\u008c\u0096\u00a0\u00aa\u00b4\u00c8','[t\u0083\u008d\u0097\u00a1\u00ab\u00ba\u00c9\u00d3\u00ec\u0105'))"
    ],
    "how-far-away-is-n-to-the-next-power-of-b": [
        "f=lambda a,b,v=1:(a<v)*(v-a)or f(a,b,v*b)",
        "i=1;n,b=input()\nwhile n>=i:i*=b\nprint i-n"
    ],
    "cat-goes-meow": [
        "i=input();print(i+' goes Meow'*(i=='ca''t'))",
        "lambda i:([i+f' goes \"{a.split(\",\")[0]}\"'for a in(\"bark,dog,wolf,seal,zebra bellow,alligator,moose,okapi bleat,deer,elk,giraffe,sheep,goat,lamb bray,donkey,ass buzz,bee,mosquito caw,crow,raven,rook chirp,cicada,cricket,songbird chuckle,linnet croak,frog,toad cry,swan hiss,goose,snake,tarantula meow,c\"+\"at moo,calf,cow,ox oink,pig,hog roar,badger,bear,lion,tiger,jaguar,leopard scream,monkey,peacock,vulture screech,bat,eagle,owl squeak,hamster,mouse,rat,rabbit,hare,tapir\").split()if i in a.split(\",\")[0:]]+[i])[0]",
        "u=raw_input()\nl=\"ca\"\"t badger rhino okapi moose stag tiger hippo lion\".split()\nprint u+' goes \"%s\"'%[\"Growl\",\"Bellow\",\"Meow\"][`l`.find(u)%3]*(u in l)"
    ],
    "can-i-restack-the-buckets": [
        "lambda x:sum(sorted(x),[0])==range(len(sum(x,[]))+1)",
        "lambda l:sum(sorted(l),[0])<range(len(`l`))"
    ],
    "sum-it-up-with-a-digital-triangle": [
        "def f(x):print(*x);x[-1]==''or f(['']+[(x[i]+x[i+1])%10if''!=x[i]else''for i in range(len(x)-1)])",
        "f=lambda L,*S:f([sum(x)%10for x in zip(L,L[1:print(*S,*L)]or 1)],'',*S)"
    ],
    "dwarves-and-coins": [
        "def f(n,m):a=range(m)[::-1];b=n-sum(a);c=b/m;d=[i+c for i in a];return(d,-1)[-1in d or c*m!=b]",
        "n,m=map(int,input().split())\n\u03ba,\u03c1=divmod(n-m*(m-1)//2,m)\nx=[-1]if \u03c1 else range(\u03ba,\u03ba+m)[::-1]\nprint(*x)",
        "n,m=map(int,input().split(' '))\nr=range(m);n-=sum(r)\nif n%m<1:\n for x in r:print(m-x+n//m-1,end=' ')\nelse:print -1",
        "n,m=map(int,input().split())\nk=n/m+m/2\na=int(k)\nprint(*(range(a,a-m,-1),[-1])[k-a-.5or~a>-m])"
    ],
    "how-much-present-did-you-get-for-christmas": [
        "lambda i:sum(x[0]*x[1]*x[2]if len(x)>1 else x[0]**3*4.18879for x in i)",
        "lambda l:sum(a*b*c or a**3*4.18879for a,b,c in l)"
    ],
    "check-membership-of-an-infinite-list": [
        "def f(l,v):\n a=l()\n while(a-v)*(b:=a-l())>0:a-=b\n return a==v",
        "lambda a,g:a in map(g,range(abs(a-g(0))+1))"
    ],
    "stackable-sequences": [
        "s=[]\nfor c in input():s+=-1,;s[s.index(c-1)]=c",
        "s=[]\nfor c in input():s+=c,-1;s.remove(c-1)"
    ],
    "the-lucky-house": [
        "lambda x,l:int([3,1,7.77,2,.1][sum(map(l.count,l))%14%5]+x/1e2)",
        "lambda c,a:(ord(\"\u012c\u0309\u00c8d\\n\"[len(x:=[*map(a.count,{*a})])*(max(x)!=3)])+c)//100",
        "lambda x,a,b,c,d:(x+(100*sum((a==b,a==c,a==d,b==c,b==d,c==d))or 10)+177*(a==b==c==d))/100",
        "def f(c,a):x=sum(map(a.count,a))//2;return[c//90,x-2,7+(c>22)][x//3]",
        "def f(c,a):x=sorted([a.count(i)for i in set(a)]);return([300,777,200,100,10][len(x)*(x[-1]!=3)]+c)//100"
    ],
    "recursive-acronyms": [
        "def f(s):\n s=s.lower().split();a,f=list(s[0]),[]\n for w in s:f+=0*a.pop(0)if a and w[0]==a[0]else[w]\n return(0,)if a else(1,f)",
        "def f(s):\n    w=s.lower().split();r=list(w[0]);return(True,[x for x in w if x[0]not in r])if len(r)==1 or[x for x in[y[0]for y in w]if x in r]==r else False",
        "l=raw_input().lower().split()\na=l[0]\ne=[]\nfor w in l:d=w[0]!=a[0];a=a[1-d:];e+=[w]*d  \nb=a==''\nprint b,b*`e`",
        "def f(x):\n s=x.lower().split();w=list(s[0][1:]);s=s[1:];o=[]\n if not w:return 1,s\n [w.pop(0)if i[0]==w[0]else o.append(i)for i in s]\n return(0,)if w else(1,o)"
    ],
    "a-note-on-n": [
        "f=lambda x,a=2,b=1:str(b).find(str(x))==0and a-1or f(x,a+1,b*a)",
        "f=lambda a,n=2,p=1:(`p`.find(a)and f(a,n+1,p*n))+1"
    ],
    "trump-needs-your-help-to-stop-the-starman": [
        "F=[1]\nL=[2,1]\nn=input()\nexec 2*n*\"F,L=L+[sum(L[-2:])],F;\"\nprint[\"Pippi\",\"Lucas\",\"Ness\",\"Travis\"][(n in F)*2+(n in L)]",
        "f=lambda i,n=input():abs(5*n*n+i)**.5%1>0\nprint[\"Travis\",\"Lucas\",\"Ness\",\"Pippi\"][f(4)*f(-4)+2*f(20)*f(-20)]"
    ],
    "dice-paths-on-a-grid": [
        "a=b=1\nt=0\nfor c in input():t=1+t*1j**(a*c*(a*a-c*c)*b**5%7*2/3+2*(a==c));a,b=b,c\nprint t==0",
        "def f(l,p=[3,2,4,5,1,6],v=0):\n for d in l:n=p.index(d);v+=1j**n;p=[p[int(i)]for i in'%06d'%ord('\ud9b6\udcfe\uccbd\ud955\ude58\ua623'[n])]\n return v==0"
    ],
    "fryer-simulator": [
        "f=lambda a,i=-2,e=enumerate:a*i or f([[E or int((6*max(len(a)>i>-1<j<len(a[i])and a[i][j]for i,j in((r+1,c),(r-1,c),(r,c+1),(r,c-1))))**.5)for c,E in e(R)]for r,R in e(a)],i+1)",
        "e=enumerate;l=input()\nfor y,f in e(l):\n for g,h in e(f):x=1+min(abs(y-a)+abs(g-c)for a,b in e(l)for c,d in e(b)if d==1);l[y][g]=x*(x<5)\nprint l",
        "f=lambda a,n=2,e=enumerate:n//5*a or f([[r[j]or n*any([0,*r][j:j+3]+[0,*c][i:i+3])for j,c in e(zip(*a))]for i,r in e(a)],n+1)"
    ],
    "how-many-cardboard-digits-do-i-need": [
        "lambda n:sum(max(str(j).count(str(i))for j in range(n+1))for i in range(9))",
        "lambda n:9*len(`n`)-9+(n*9+8)/10**len(`n`)+(n<10)"
    ],
    "5318008-fun-with-calculators": [
        "d,f,g='oizehsglb',[x.lower()for x in open('w.txt').read().split('\\n')if len(x)<10],[]\nfor x in f:\n c=x[::-1]\n for b in d:c=c.replace(b,`d.find(b)`)\n g=[g,g+[['0.'+c[1:],c][c[0]!='0']]][c.isdigit()]\nprint g",
        "for s in open(\"w.txt\"):\n L=map(\"oizehsglb\".find,s[-2::-1].lower())\n if-min(L)<1>len(L)-9:print`L[0]`+\".\"[L[0]:]+`L`[4::3]",
        "for x in open(\"w.txt\"):\n a=\"oizehsglb\";g=[`a.find(b)`for b in x[::-1].lower()if b in a]\n if len(g)==len(x)-1<10:\n  if g[0]==\"0\":g[0]=\"0.\"\n  print\"\".join(g)",
        "for s in open('w.txt'):\n try:a=''.join(map(lambda c:dict(zip('bglioszhe','867105243'))[c],s[:-1][::-1]));a=[a,'0.'+a[1:]][a[0]=='0'];print['',''.join(a)][len(s)<11]\n except:0"
    ],
    "what-are-the-repeating-fibonacci-digits": [
        "n=input()\np=b=l=n/10,n%10\nwhile~-(b in p):p+=b,;l+=(b[1]/10or b[0]%10)+b[1]%10,;b=l[-2:]\nprint l[p.index(b)-2:-2]",
        "f=lambda n,m=0,z=[]:(n,m)in zip(z,z[1:])and z[z.index(m)::-1]or f((z and n//10or m%10)+n%10,z and n or n//10,(m,*z))",
        "s=input()\ns=[s/10,s%10]\nwhile zip(s,s[1:]).count((s[-2],s[-1]))<2:s+=[(s[-1]/10or s[-2]%10)+s[-1]%10]\nprint s[-s[::-1].index(s[-2],2)-1:-2]"
    ],
    "kolakoski-reduction": [
        "def f(s,c=2,j=0):\n w=[1]\n for i in s[1:]:w+=[1]*(i!=s[j]);w[-1]+=i==s[j];j+=1\n return(w==[2])*c-({1,2}!=set(s))or f(w,c+1)",
        "a,c=input(),0\nt=a==[]\nwhile 1<len(a)and~-t:\n r,i=[],0\n while i<len(a):\n\tj=i\n\twhile[a[j]]==a[i:i+1]:i+=1\n\tr+=[i-j]\n a=r;c+=1;t=any(x>2for x in a)\nprint~c*t+c",
        "f=lambda l,i=0:i if l==[1]else 0if max(l)>2or min(l)<1else f([len(x)+1for x in\"\".join(`v!=l[i+1]`[0]for i,v in enumerate(l[:-1])).split(\"T\")],i+1)"
    ],
    "how-many-guineas-in-a-gross-of-threepennies": [
        "s=str.startswith\nh='half'\nu,v=raw_input().split(' in ')\na,b=u.split(' ',1)\nC=dict(fa=1,pe=4,twop=8,tu=8,thr=12,gr=16,si=24,ta=24,sh=48,b=48,fl=96,c=240,po=960,so=960,q=960,gu=1008)\nC.update({h+'p':2,h+' gr':8,'two ':96,h+' c':120,h+' s':480,h+' gu':504})\nfor c in iter(C):\n if s(b,c):k=C[c]\n if s(v,c):f=C[c]\nprint u+' is %0.4f '%(eval(a)*k/f)+v",
        "str.startwith",
        "f=lambda c:c[:2]in\"hatw\"and f(c[5-(c>'t'):])*2/4**(c<'t')or[1,4,4,4,8,12,16,24,24,48,48,96,240,1008,960]['fapecoentuthgrsitashboflcrgu'.find(c[:2])//2]\na,b=input().split(\" in \")\nx,c=a.split(\" \",1)\nprint(a,\"is %0.4f\"%(eval(x)*f(c)/f(b)),b)"
    ],
    "code-golf-count-islands": [
        "A=input()\nc=0\nX=len(A[0])-1\nY=len(A)-1\ndef C(T):\n x,y=T\n if A[y][x]<'.':A[y][x]='.';map(C,zip([x]*3+[min(x+1,X)]*3+[max(x-1,0)]*3,[y,min(y+1,Y),max(y-1,0)]*3))\nwhile'*'in sum(A,[]):i=sum(A,[]).index('*');c+=1;C((i%-~X,i/-~X))\nprint c",
        "s=input()\nc=[(s.index(l),i)for l in s for i,v in enumerate(l)if'*'==v]\nn=[set([d for d in c if-2<d[0]-v[0]<2and-2<d[1]-v[1]<2])for v in c]\nf=lambda x,p=0:p if x&n[p]else f(x,p+1)\nprint len(set(map(f,n)))",
        "g=map(list,input())\nq,w,t,r=len(g),len(g[0]),0,range\ndef l(i,j):\n if 0<=i<q and 0<=j<w and g[i][j]=='1':g[i][j]=0;l(i+1,j);l(i-1,j);l(i,j+1);l(i,j-1)\n return 1\nprint sum(l(i,j)if g[i][j]=='1'else 0 for j in r(w)for i in r(q))"
    ],
    "who-is-the-tallest": [
        "def T(I):\n b=[0];q=[];J=b+I+b\n for i,x in enumerate(I):[q,b][J[i]<x>J[i+2]]+=x,\n return len(b)<3and b[1]or T(q)",
        "def f(l):k=[x[0]for x in zip(l,[0]+l,l[1:]+[0])if(max(x),)>x];return(len(k)+2>len(l))*max(l)or f(k)",
        "def f(A):\n t=[0];l=[];a=b=0\n for c in A+[0]:[l,t][a<b>c]+=[b];a,b=b,c\n return t[-2]and f(l)or t[1]"
    ],
    "implement-true-string-addition": [
        "lambda a,b:s(d(a)^d(b))\ndef s(n,x=0,s=''):\n while n:n-=1;s+=chr(n%256);n>>=8\n return s\ndef d(n,c=0):\n while s(c)!=n:c+=1\n return c",
        "def n(s):\n n=s and ord(s[0])+1 or 0\n for c in s[1:]:n=n*256+ord(c)\n return(-1)**n*n/2\ndef f(l,r,s=\"\"):\n i=n(l)+n(r)\n i=abs(i*2+(i<=0))\n while i>257:s=chr(i%256)+s;i/=256\n return[\"\",chr(i-1)+s][i>0]",
        "lambda a,b:s(d(a)^d(b))\nd=lambda s:s and d(s[1:])*256+ord(s[0])+1or 0\ns=lambda d:d and chr(~-d%256)+s(~-d/256)or''",
        "f=lambda a,b,L=len:f(c:=a.rstrip(x:=a[-1]),x*(L(a)-L(c)^L(b)-L(d:=b.lstrip(x)))+d)if a else b"
    ],
    "numbers-by-position": [
        "print([str(x)*x for x in range(1,10)])",
        "for i in range(10):print(str(i)*i)",
        "i=0\nwhile i<9:print(str(i:=i+1)*i)",
        "print[i*`i`for i in range(1,10)]",
        "i=1;exec\"print`i`*i;i+=1;\"*9"
    ],
    "shortest-way-to-reverse-a-number": [
        "print int(`input()`[::-1])",
        "def r(n):print(int(str(n)[::-1]))",
        "r=lambda i:int(str(i)[::-1])"
    ],
    "sum-the-numbers-on-standard-in": [
        "lambda n:sum(map(int,open(n)))",
        "print(sum(map(int,open(0))))",
        "s=0\ntry:\n    while 1:s+=input()\nexcept:print s"
    ],
    "clearing-the-most-significant-bit-from-an-integer": [
        "lambda n:n^2**len(bin(n))/8",
        "lambda n:int('0'+bin(n)[3:],2)",
        "lambda n:n-2**len(bin(n))/8",
        "lambda n:n-2**(n.bit_length()-1)",
        "f=lambda n:n-1and 2*f(n/2)+n%2"
    ],
    "all-ascii-characters-with-a-given-bit-count": [
        "lambda n:[chr(i)for i in range(32,127)if sum(map(int,bin(i)[2:]))==n]",
        "lambda n:[chr(i)for i in range(32,127)if bin(i).count('1')==n]"
    ],
    "determine-if-a-number-is-divisible-by-13-without-using-13-itself": [
        "def F(n):s=oct(n);return F(abs(sum(int(s[-1-i])*[1,-5,-1,5][i&3]for i in range(len(s)))))if n>7 else'yneos'[n>0::2]",
        "print[\"no\",\"yes\"][input()%ord(\"\\x0D\")==0]",
        "x=input()\nwhile x>50:x=x//10+x%10*4\nprint x==x//10+x%10*4",
        "print('no' if any((' ' * int(input())).split('             ')) else 'yes')",
        "print['yes','no'][input()*2%26>0]",
        "print input()%015==0",
        "print'yneos'[2*input()%26>0::2]"
    ],
    "is-it-a-bumpy-word": [
        "g=lambda a,b,c,*s:((a<b)^(b<c))*(s==()or g(b,c,*s))",
        "lambda s:all((x<y)^(y<z)for x,y,z in zip(s,s[1:],s[2:]))",
        "def a(s):x=s[1:];return[cmp(s[0],x)]+a(x) if x else []\nprint len(set(a(input())))>1",
        "def _(w):*r,=map(lambda a,b:0>ord(a)-ord(b)and-1or 1,w,w[1:]);s=len(r)%2==0and r+[r[0]]or r;return sum(s)in(-1,1)and s==s[::-1]",
        "s=input()\nb=s[0]<s[1]\no=1\nfor i in range(len(s)-1):o&=(s[i]<s[i+1])==b;b^=1\nprint o",
        "s=input()\nm=map(lambda x,y:y>x,s[:-1],s[1:])\nprint all(x-y for x,y in zip(m[:-1],m[1:]))"
    ],
    "split-a-list-at-the-second-occurrence-of-the-first-element": [
        "lambda l:[l[:(i:=l.index(l[0],1))],l[i:]]",
        "def f(a):a.insert(a[1:].index(a[0])+1,-1)",
        "lambda s:[s[:(i:=s.find(s[0],1))],s[i:]]",
        "i=input()\na=i.index(i[0],1)\nprint i[:a],i[a:]"
    ],
    "count-up-diagonally": [
        "def f(a,b,s=''):print s;b<a or f(a+1,b,' '*len(s)+`a`)",
        "def f(a,b):\n for i in range(a,b+1):print sum(len(`j`)for j in range(i))*' '+`i`",
        "def f(l,u,s=0):\n while l<=u:print' '*s+`l`;s+=len(`l`);l+=1",
        "f=lambda a,b,n,z:'\\n'+' '*(a+n-z)+str(a)+f(a+1,b,n+len(str(a))-1,z) if a!=b+1 else ''",
        "lambda a,b:'\\v'.join(map(str,range(a,b+1)))"
    ],
    "output-a-super-mario-image": [
        "[print(\" *#.-\\n\"[ord(x[1])-35]*(ord(x[0])-35),end=\"\")for x in [\"2#/$$(2#'%'&$%$&$(0#$%%&&%(&%%'&$(0#&%*&)%1#&%/#&%$(3#.&2#$%&&$%-#$%&&$%$(2#%%$$*%4#$%$&$%$&$%-#$%$&$%$&$%$(/#'%*$)%0#$%$&$%$&$%-#$%$&$%$&$%$(.#&&$%&$$&'$$&$$&%'&-#$%&&$%-#$%&&$%$(.#'&-$%%(&.#&%/#&%$(.#'&'$'#($'&$(0#'%+#'%$(.#)%+#)%$(a%$($%&&$%)&$%$&%%&&$%)&$%$&%%&&$%)&$%$&%%5'$%$(N%5'$%$($%%&$%'&$%'&%%%&$%'&$%'&%%%&$%'&$%'&8%$(M%'#$%-'$%$($%(&$%)&%%(&$%)&%%(&$%)&$%'#$%-'$%$(M%'#$%-'$%$($%$&$%%&$%'&$%%&%%$&$%%&$%'&$%%&%%$&$%%&$%'&$%%&$%'#$%-'$%$(M%'#\"[x:x+2]for x in range(0,454,2)]]",
        "u,v,w,x,y,z=\"*.-#\\n \"\nt=z*4\ns=x+w*18+x\nr=t+x+w*10+x+y\nq=x+v*3+x+v*6+x+v+x\np=x+v*2+x+v*4+x+v*4+x\no=x+v*5+x+v*6+x\nn=x+v+x+v*2+x+v*4+x+v*2+x\nm=z*10+x+v+x+v+x\nl=z*10+x+v*3+x\nprint(t*4+u*12+y+z*15+x*4+v*4+x+v+y+z*13+x+v*2+x*3+v*5+x*2+v*4+y+z*13+x*3+v*7+x*6+z*14+x*3+t*3+x*3+y+t*4+v*11+z*5+l*2+y+z*15+x*2+u+x*7+z*7+m*2+y+t*3+x*4+u*7+x*6+z*3+m*2+y+z*11+v*3+x+u*3+v+u*4+v+u+x*3+v*4+l*2+y+z*11+v*4+u*10+x*2+v*5+z*11+x*3+t*3+x*3+y+z*11+v*4+u*4+t+u*5+v*4+y+z*13+x*4+t*2+x*4+y+z*11+x*6+t*2+x*6+y+x*62+y+q*3+s+y+x*42+s+y+p*3+x*20+y+x*42+r+o*3+r+x*42+r+n*3+r+x*42+t+x*11)",
        "w,s,d,r=' *.#'\nm='--'\nn=m*5\nA=d*2\nB=d*3\nC=d*4\nD=d*5\nE=d*6\nF=r*2\nG=r*3\nH=r*4\nI=r*6\nJ=r*42\nK=w*10\nL=K+w\nM=L+w\nN=M+w\nO=w*15\nP=w*4\nQ=w*8\nR=d+r\nS=r+R+R\nT=B+r\nU=r+T\nV=r+A\nW=r+d+F+T+E\nX=r+C\nY=r+E+F+D\nZ=R+A+X+V\na=r+P+r+n+r\nb=J+P+r\nc=F+A+X+X\ne=b+n+r\nf=s*12\ng=d*7\nh=s*3\nj=s*4\nk=r*62\nl=m*9\no=r*11\np=r*21\nz='\\n'\nfor i in\"OfzOHCrdzNVGDFCzNGgINwGMGzOwDEOUKUzOFsGHNPSKSzMHhjINSKSzLThdjdsGCKUKUzLCjhhFDLGMGzLCjPjsCzNHQHzLIQIzkzUEWWrdFlrzJrlrzVXXccpzezrDYYrEazezrZFZFZazboz\":print(end=eval(i))",
        "n=0\nfor c in'\"/AVHF`N.o,>D\\\\5:{/RD?{C._Q\\\\%r7,SUOXGh8<}nA^Qddb<=Vb7;L@QPi[XJ65W=p|@<fxMl2+C1gro(x%m\"Iz0+B?9d</tYaj.!:6(T#_/5el1Hl{[W&g*A.Oc1*4zf#[{WfLr@Km_jgFkg#1D`&Ik9r\\'{M]7c&# X1,U#]=>}JFwVexi7nzbKnS-@-y{IA=l#=\"EVj=8L`%\"9w@zoc9!:q/rT\\\\OMd]/p^ksiT?P_yj,':n=n*94+ord(c)-32\nd=[*' *\\n#.-']\ns=c=' '\nwhile n:i=n%202;d+=[c+(i>=len(d)and c[0]or d[i][0])];c=d[i];s+=c;n//=202\nprint(s)"
    ],
    "help-ive-mixed-my-week-up": [
        "lambda l:map(sorted(l).pop,[1,4,4,3,0,0,0])",
        "lambda l:l.sort(key=lambda x:'uehrau'.find(x[1],x[0]=='S'))"
    ],
    "implement-hyperexponentiation-tetration-without-the-use-of": [
        "r=lambda x,y:(x for _ in range(y));t=lambda x,y:reduce(lambda y,x:reduce(lambda x,y:sum(r(x,y)),r(x,y)),r(x,y),1)",
        "r=xrange\ndef m(x,y):\n i=0\n for n in r(y):i+=x\n return i\ndef e(x,y):\n i=1\n for n in r(1,y+1):i=m(i,x)\n return i\ndef t(x,y):\n i=1\n for n in r(y):i=e(x,i)\n return i",
        "a,b=input().split()\nr=1\nexec(\"r=%s**r;\"%a*int(b))\nprint(r)"
    ],
    "prime-counting-function": [
        "f=lambda n,k=1,p=1:n/k and p%k+f(n,k+1,p*k*k)",
        "f=lambda n:1if n<1else(2**n%n==2)+f(n-1)",
        "def c(x):\n    p=0\n    for i in range(2,x+1):\n        P=1\n        for d in range(1,i):\n            if i%d==0 and d!=1:\n                P=0\n        p+=1*P\n    return p"
    ],
    "find-the-largest-and-the-smallest-number-in-an-array": [
        "min(s)",
        "lambda x:[m(t for t in x if str(t)!=t)for m in(min,max)]",
        "def m(a):b=sorted(n for n in a if type(n)==int);return b[0],b[-1]",
        "lambda"
    ],
    "convert-a-string-of-binary-characters-to-the-ascii-equivalents": [
        "bytes(int(c,2)for c in s.split())",
        "''.join(chr(int(x,2))for x in s.split())",
        "for i in s.split():print(end=chr(int(i,2)))",
        "lambda s:\"\".join(map(lambda b:chr(int(b,2)),s.split()))",
        "''.join(map(lambda x:chr(int(x,2)),s.split()))"
    ],
    "what-base-is-this-number-in": [
        "lambda x:int(max(x),36)+1",
        "lambda s:(max(s)-8)%39"
    ],
    "render-digital-clock-style-numbers": [
        "b=map(int,raw_input());a=map(int,bin(914290166014670372457936330)[2:]);c=' |_';p=lambda k:''.join(c[a[9*n+k]]+c[2*a[9*n+1+k]]+c[a[9*n+2+k]]for n in b)+'\\n';print p(6)+p(0)+p(3)",
        "a=\"   \";b=\" _ \";c=\"|_|\";d=\"| |\";e=\"|  \";f=\"  |\";g=\"|_ \";h=\" _|\"\nz=[[b,d,c],[a,f,f],[b,h,g],[b,h,h],[a,c,f],[b,g,h],[b,g,c],[b,f,f],[b,c,c],[b,c,h]]\nx=map(int,raw_input())\nfor i in range(3):\n for j in x:\n  print z[j][i],\n print"
    ],
    "is-it-a-lynch-bell-number": [
        "lambda n:all(int(n)%int(d)+n.count(d)<2for d in n)",
        "def f(n):\n s=\"\"\n for i in n:\n  if i in s or int(n)%int(i)!=0:return 0\n  s+=i\n return 1",
        "lambda n:any(int(n)%int(x)for x in n)or len(n)>len({*n})"
    ],
    "construct-a-word-ladder": [
        "b=p=0\nr=''\nfor w in input():\n for c in w:r+='\\n'.ljust(p)*b+c;p+=1-b\n b^=1\nprint r",
        "words=input().split();space=-1;\nfor i in range(len(words)):\n if i%2==0:\n  print(words[i]);space+=len(words[i])\n else:\n  for ch in words[i][:-1]:        \n   print(\" \"*(space)+ch)\n  print(\" \"*(space)+words[i][-1],end=\"\")",
        "s=i=-1\nr=''\nfor w in input():r+=[('\\n'+' '*s).join(' '+w),w][i];s-=i*len(w);i=~i\nprint r"
    ],
    "reversing-of-words": [
        "lambda s:' '.join(s.split()[::-1])",
        "print(*input().split()[::-1])"
    ],
    "interleave-strings": [
        "a=lambda a:\"\".join([i for i in reduce(lambda: b,c:b+c, map(None,*map(lambda m:list(m),a)) if i])",
        "f=lambda s:' '*any(s)and''.join(x[:1]for x in s)+f([x[1:]for x in s])",
        "i=len(x)if len(x)>len(y) else len(y) h=0 a=\"\" while h<i: if h<len(x) a+=x[h] if h<len(y): a += y[h] h+=1 print a",
        "lambda*m:''.join(map(lambda*r:''.join(filter(None,r)),*m))"
    ],
    "how-can-i-get-a-repdigit": [
        "a=b=input()\nwhile len(set(str(a)))!=1:a+=1\nprint a-b",
        "f=lambda n:1-len(set(`n`))and-~f(n+1)",
        "def f(n):r=10**len(`n`)/9;print-n/r*-r-n"
    ],
    "slowly-turn-a-string-into-another": [
        "lambda s,t:'\\n'.join(g(s)[:-1]+g(t)[::-1])\ng=lambda s:s and[s]+g(s[:-1])or[]",
        "n='\\n';lambda x,y:x+n+n.join(x[:-i]for i in range(1,len(x)-1))+n+n.join(y[:i]for i in range(1,len(y)+1))",
        "f=lambda A,B:\"\\n\".join([(A+\" \")[:-i]for i in range(len(A))]+[B[:i+1]for i in range(len(B))])",
        "x,y=input(),input()\nfor i in x:print x;x=x[:-1]\ns=y[0]\nfor i in y[1:]:s+=i;print s",
        "f=lambda a,b,r='',i=2:a and f(a[:-1],b,r+a+'\\n')or(len(b)>=i and f(a,b,r+b[:i]+'\\n',i+1)or r)"
    ],
    "integer-mark-into-grade": [
        "lambda g:g>99and'A'or[chr(75-g/10)+'-+'[g%10>2:1-(g%10>6)],'F'][g<60]",
        "lambda n:\"FA\"[n>59:1+n/100]or chr(75-n/10)+\"+-\"[(n+3)%10/3::2]"
    ],
    "build-a-twisted-hello-world": [
        "print \"  Hello, world!\"[ 2::]\n#rint \"T w i s t e r !\"[ ::2]",
        "print'Hello, world!'\n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'     \n#rint'Twister!'"
    ],
    "how-tall-are-the-monoliths": [
        "lambda l:[s.index('_')+1for s in zip(*l[-2::-1])if'_'in s]",
        "lambda s:[x.index('_')for x in map(None,*s.split('\\n')[::-1])if'_'in x[1:]]",
        "lambda s:len(s.split('\\n'))-1"
    ],
    "disarium-dilemma": [
        "lambda m,n:[k for k in range(m,n+1)if sum(int(j)**(i+1) for i,j in enumerate(list(`k`)))==k]",
        "for i in range(input(),input()+1):x=sum(int(`i`[n])**-~n for n in range(len(`i`)));print(\"\",x)[x==i]",
        "a,b=input()\nwhile a<=b:\n t=p=0\n for x in`a`:p+=1;t+=int(x)**p\n if t==a:print a\n a+=1",
        "lambda n,m:[x for x in range(n,m+1)if sum(int(m)**-~p for p,m in enumerate(`x`))==x]",
        "lambda n,m:{*range(10),89,135,175,518,598,1306,1676,2427,2646798,0xa8b8cd06890f2773}&{*range(n,m+1)}",
        "n=int(input())\nm=int(input())\nR=[x for x in range(n,m+1)]\nO=[sum(map(int,str(x)))for x in R]\nF=[(x**(O.index(x)))for x in O]\nL=[x for x in F for w in R if x==w]\nprint(list(set(L)))"
    ],
    "dutch-burgerservicenummer-bsn-eleven-test": [
        "def g(s):u=7<len(s)<10and sum(x*int(('0'+s)[-x])for x in range(2,10))-int(s[-1]);print(u%11<1)*u",
        "def f(i):S=sum(a*b for a,b in zip([-1]+range(2,10),map(int,i)[::-1]));return(7<len(i)<10)*(S%11<1)*S>0",
        "lambda i:7<len(i)<10*((S:=sum(a*b for a,b in zip([-1,*range(2,10)],map(int,i[::-1]))))%11<1)*S>0",
        "lambda s:len(s)in(8,9)and not(x:=sum(a:=[*map(lambda n,m:int(n)*m,s[::-1],range(1,10))])-2*a[0])%11and x"
    ],
    "how-far-should-i-sum": [
        "lambda n,s=0,i=1:s<n and-~f(n,s+1/i,i+1)",
        "f=lambda x,n=1:x>0and-~f(x-1/n,n+1)"
    ],
    "can-the-number-reach-1-by-repeatedly-subtracting-the-largest-prime-less-than-it": [
        "f=lambda n:n<2if n<3else f(n-[x for x in range(2,n)if all(x%y for y in range(2,x))][-1])",
        "r=lambda n:n>2and r(n-[a for a in range(2,n)if all(a%b for b in range(2,a))][-1])or n<2"
    ],
    "make-a-spiky-box": [
        "lambda w,h:'/\\\\'*w+'\\n'+'\\\\%s/\\n/%s\\\\\\n'%(('  '*~-w,)*2)*~-h+'\\\\/'*w",
        "def f(a,b,n=\"\\n\"):r=\"\\\\\"+\"  \"*~-a+\"/\";print(\"/\\\\\"*a+n+(r+n+r[::-1]+n)*~-b+\"\\\\/\"*a)"
    ],
    "ascii-triangles": [
        "n=5\nq=\"\".join(map(lambda x:\"|%s\\\\\\n\"%(x*\" \"),range(n)))+\"-\"*n",
        "x=int(input())\nfor i in range(x):print('|'+' '*i+'\\\\')\nprint('-'*(x+1))",
        "def f(i,c=0):\n if c<i:print'|'+' '*c+'\\\\';f(i,c+1)\n print'-'*((c+1,c)[c<1]);exit()",
        "n=input();s='\\\\'\nexec\"print'|'+s;s=' '+s;\"*n\nif n:print'-'*-~n",
        "f=lambda n,k=0:k<n and'|'+' '*k+'\\\\\\n'+f(n,k+1)or'-'[:n]*-~n",
        "def x(n):\n if n:\n  for i in range(n):print('|'+' '*i+'\\\\')\n  print('-'*-~n)",
        "lambda x:'\\n'.join(['|'+' '*n+'\\\\'for n in range(x)]+['-'*-~x*(x>0)])",
        "n=input()\nw=0\nexec'print\"|\"+\" \"*w+\"\\\\\\\\\"+(\"\\\\n\"+\"-\"*-~n)*(w>n-2);w+=1;'*n"
    ],
    "head-shoulders-knees-and-toes-knees-and-toes": [
        "lambda n,k='head shoulders '+'knees toes '*2:(k*2+'eyes ears mouth nose '+k).split()[n%22]",
        "c=int('602323'*2+'4517602323'[input()%22])\nprint\"smkteehnhonoyaeooueeerasutesssdelhs\"[c::8]+\"ders\"*(c<1)"
    ],
    "calculate-the-points-in-a-sjoelen-game": [
        "lambda i:i[1]-i[3]+2*(sum(i)+i[2]+5*min(i))",
        "l=input()\nprint l[0]*2+l[1]*3+l[2]*4+l[3]+10*min(l)"
    ],
    "will-the-beam-hit": [
        "def f(s):t=s.strip('.\\n');return not['\\n'in t,len(t)%(s.find('\\n')+1)!=1,1]['>O<vO^'.find(t[0]+t[-1])//3]",
        "def f(a,o=0,d={},q=''):\n for r in a:\n  i=0\n  for c in r:d[c]=o,i;i+=1;q=(c,q)[c in'O.']\n  o+=1\n z,y=d['O'];e,j=d[q];return eval(\"z%se and y%sj\"%(('><'[q<'v'],'=='),('==',q))[q in'><'])"
    ],
    "write-an-interactive-deadfish-interpreter": [
        "a=0\nwhile 1:\n for c in raw_input(\">> \"):\n  if c in'ix':a+=1\n  if c=='d':a-=1\n  if c in'sk':a*=a\n  if c in'oc':print a\n  if a in(-1,256):a=0",
        "v=0\nm=lambda y:(0,y)[-1!=y!=256]\ni=x='+1'\nd='-1'\ns=k='*v'\nc=o=');print(v'\nwhile 1:\n for n in input('>>'):exec('v=m(v'+locals().get(n,'')+')')",
        "a=0\ns=lambda x:\"a=%d\"%(x!=-1and x!=256and x)\nwhile 1:\n for i in input(\">>\"):u,b,o=s(a+1),s(a*a),\"print(a)\";exec(dict(i=u,x=u,d=s(a-1),s=b,k=b,o=o,c=o).get(i,\"\"))",
        "a=0\nwhile 1:\n for c in input(\">> \"):\n  a+=(c in'ix')-(c=='d')+(a*a-a)*(c in'sk')\n  if c in'oc':print(a)\n  a*=-1!=a!=256"
    ],
    "staircase-numbers": [
        "f=lambda n,x=0:10**x>n or(`n%(x+2)`==`n`[~x])*f(n,x+1)",
        "lambda m:all(int(x)==m%(n+2)for n,x in enumerate(str(m)[::-1]))",
        "lambda x:[`x%(n+2)`for n in range(len(`x`))][::-1]==list(`x`)",
        "lambda x:all(`x%(i+2)`==`x`[~i]for i in range(len(`x`)))"
    ],
    "uniquify-identifiers": [
        "a=input();u=[];j=1\nfor x in a:\n u+=[[x,j][x in u]]\n while j in u+a:j+=1\nprint u",
        "x=input()\nfor i,n in enumerate(x):x[i]=[n,list(set(range(1,len(x)+9))-set(x))[0]][n in x[:i]]\nprint x"
    ],
    "golf-text-into-dna": [
        "def f(x):\n\tc='';v=int(''.join(map(str,x.encode())))\n\twhile v:c='ACGT'[v%4]+c;v>>=2\n\treturn c",
        "lambda s,j=''.join:j('ACGT'[int(j(t),2)]for t in\nzip(*[iter(bin(int(j(`ord(c)`for c in s))*2)[2:])]*2))",
        "lambda v:\"\".join([\"ACGT\"[int(x,2)]for x in map(''.join,zip(*[iter((bin(int(\"\".join([str(ord(i))for i in v])))+\"0\")[2:])]*2))])",
        "def f(x):c=bin(int(''.join(map(str,map(ord,x)))))[2:];return''.join('ACGT'[int(z+y,2)]for z,y in zip(*[iter(c+'0'*(len(c)%2))]*2))",
        "lambda x:''.join('ACGT'[h//4]+'ACGT'[h%4]for h in [int(h,16)for h in hex(int(''.join(map(str,x.encode()))))[2:]])[1:]",
        "def f(A):g=''.join;B=bin(int(g(map(str,map(ord,A)))))[2:];B+=len(B)%2*'0';return g('ACGT'[int(B[i:i+2],2)] for i in range(len(B))[::2])"
    ],
    "build-a-mob-of-suspiciously-happy-lenny-faces-%cd%a1-%cd%9c%ca%96-%cd%a1": [
        "f=lambda i:L[:7+~2%~i]+f(i-1)+L[6+2%i:]if i>1else L*i\nL='( \u0361\u00b0 \u035c\u0296 \u0361\u00b0)'",
        "f=lambda i:i*'x'and\"( \u0361\u00b0 \u035c\u0296\"[:7+~2%~i]+f(i-1)+\"\u0296 \u0361\u00b0)\"[2%i:]",
        "x='( \u0361\u00b0 \u035c\u0296 \u0361\u00b0)'\nn=3-1\nprint(x[:4]*(n-1)+x[:7]*(n!=0)+x+x[6:]*(n!=0)+x[8:]*(n-1))"
    ],
    "levi-civita-symbol": [
        "lambda i,j,k:(i^j!=k or-~j-i)%3-1",
        "lambda i,j,k:(i-j)*(j-k)*(k-i)/2"
    ],
    "increment-a-guid": [
        "s='%032x'%-~int(input().replace('-',''),16)\nprint'-'.join((s[:8],s[8:12],s[12:16],s[16:20],s[20:]))",
        "def f(s):a=hex(int(s.replace('-',''),16)+1+2**128);return'-'.join((a[3:11],a[11:15],a[15:19],a[19:23],a[23:-1]))",
        "q='f0123456789abcdef--'\nf=lambda s:[str,f][s[-1]in'f-'](s[:-1])+q[q.find(s[-1])+1]"
    ],
    "simplify-a-square-root": [
        "k=n=input()\nwhile n%k**2:k-=1\nprint k,n/k/k",
        "def e(k):a=filter(lambda x:k/x**2*x*x==k,range(k,0,-1))[0];return a,k/a**2"
    ],
    "greatest-common-substring": [
        "def a(b):c=[[d[f:e]for e in range(len(d)+1)for f in range(e+1)]for d in b];return max([i for i in c[0]if all(i in j for j in c)],key=len)",
        "lambda b:max(reduce(set.__and__,[{d[f:e]for e in range(len(d)+2)for f in range(e)}for d in b]),key=len)",
        "f=lambda h,*t:h and max(h*all(h in s for s in t),f(h[1:],*t),f(h[:-1],*t),key=len)"
    ],
    "all-about-basic-binary": [
        "N=input();g=lambda n:n<1or(n%b<2)*g(n/b)\nfor b in range(2,N+1):\n if g(N):print b",
        "n=input();b=1\nwhile b<n:\n b+=1;s=\"\";c=k=n\n while k:s=`k%b`+s;c*=k%b<2;k/=b\n if c:print b,s"
    ],
    "fermat-near-misses": [
        "def f(n,c=2):z=c**3+1;t=z in[(k/c)**3+(k%c)**3for k in range(c*c)];return[z]*n and[z]*t+f(n-t,c+1)",
        "x,y,z=2,3,4\nn=input()\nwhile n:\n if y**3+x**3-z**3==1and x<y<z:print z**3+1;n-=1\n x+=1\n if y<x:y+=1;x=2\n if z<y:z+=1;y=3"
    ],
    "black-box-trigonometry": [
        "h=hash;lambda f:h(f(.0869))%3%2*\"a\"+\"tscaionns\"[h(f(.14864))%3::3]+h(f(.511))%5%2*\"h\"",
        "lambda f:\"asinh acos cos cosh atan atanh tan sin asin tanh sinh acosh\".split()[hash(f(.029))%19%12]"
    ],
    "i-havent-seen-that-number-before": [
        "o=[];n=\"\";i=input()\nfor c in i:\n n+=c\n if not n in o:o.append(n);n=\"\"\nprint(i if n else\" \".join(o))",
        "i,n,*o=input(),\"\"\nfor c in i:n+=c;o,n=[o+[n],o,\"\",n][n in o::2]\nprint([\" \".join(o),i][n>\"\"])"
    ],
    "a-quine-of-sorts": [
        "lambda a:sorted(a,key=('lambd :sorted(,ky=\\'\\\\+).fin'+a).find)",
        "c=\"print(sorted(x:=input(),key=('c=%r;'%c+x).find))\";exec(c)"
    ],
    "the-knights-dialer": [
        "f=lambda s,n:n<1or sum(map(f,'46740 021268983 1634    9 7'[int(s)::10].strip(),[n-1]*3))",
        "f=lambda s,n:n<1or sum(f(i,n-1)for i in range(10)if`i`+`s`in`0x20cb0e9fd6fe45133e`)",
        "f=lambda n,k:n<1or k-5and(2-k%2)*f(n-1,4-k%-9%2)+9%~k%2*f(n-1,k%2*2)"
    ],
    "kill-it-with-fire": [
        "def f(x):\n while{i for m in x for i in m}>{9,''}:\n    yield x;i=0\n    for l in x:\n     j=0\n     for c in l:\n        if 0<c<9:x[i][j]+=1\n        j+=1\n     i+=1\n    i=0\n    for l in x:\n     j=0\n     for c in l:\n        if c==0 and{1}&{x[k[1]][k[2]]==4for k in[y for y in[[i,i-1,j],[i<len(x)-1,i+1,j],[j,i,j-1],[j<len(l)-1,i,j+1]]if y[0]]}:x[i][j]+=1\n        j+=1\n     i+=1\n yield x",
        "def f(j):\n k=[[int(min(9,j[x][y]+(j[x][y]>0)or 3in(lambda k,x,y:[k[i][j]for i,j in[[x-1,y],[x+1,y],[x,y-1],[x,y+1]]if(-1<i<len(k))and(-1<j<len(k[i]))])(j,x,y)))for y in range(len(j[x]))]for x in range(len(j))]\n if k!=j:print(k);f(k)"
    ],
    "parse-the-comments-out-of-my-esoteric-code": [
        "def f(x,o=\"\"):\n l=[i[:i.index(\"#\")-1]for i in x]\n for n in range(len(l[0])):\n  c=[x[n]for x in l]\n  if sum([1for x in c if x!=\" \"])<1:o+=\" \"\n  else:o+=[x for x in c if x!=\" \"][0]\n print o",
        "lambda x:`map(max,*x)`[2::5].split(' #')[0]"
    ],
    "repair-the-ranges": [
        "t=input()\nz=0\nfor i,e in enumerate(t):\n if e:\n  while z:t[i-z]=e+z if l>e else e-z;z-=1\n  l=e\n else:z+=1\nprint t",
        "def f(s):\n h=s[0]\n g=lambda s,h,v:h*(h[-1]==s[0])if len(s)==1else(g(s[1:],h+[h[-1]-v],-v)+g(s[1:],h+[h[-1]+v],+v))*(s[0]==0 or h[-1]==s[0])\n return g(s,[h],1)",
        "t=filter(bool,input())\nprint sum([range(o,p,cmp(p,o))for o,p in zip(t,t[1:])],[])+t[-1:]"
    ],
    "three-polyglots-two-period-two-quines-and-one-code-golf-challenge": [
        "s=\"'\";d='\"';r=['print(\"s=\"+d+s+d+\";d=\"+s+d+s+\";r=[\"+s+r[1]+s+\",\"+s+r[0]+s+\"];eval(r[([11]+[0])[1]])\")','print(\"print(\"+d+\"Wrong language!\"+d+\")\")'];eval(r[([11]+[0])[1]])",
        "a=\"a=%r;b=%r;c=%r;1//2;print(c);'''\\nconsole.log(b,...[a,b,c].map(uneval))//'''\";b=\"a=%s;b=%s;c=%s;1//2;'''\\nprint=_=>console.log(c)//'''\\nprint(a%(a,b,c))\";c=\"1//2;alert=print\\nalert('Wrong language!')\";1//2;print(c);'''\nconsole.log(b,...[a,b,c].map(uneval))//'''",
        "unichr",
        "#define int char*\nint\na1=\"#define print(X) main(){printf(d,13,13,34,a1,34,13,13,34,a2,34,13,13,34,b1,34,13,13,34,b2,34,13,13,34,c,34,13,13,34,d,34,13,b1,13,b2);}\";\nint\na2=\"print(c%(13,34,34))\";\nint\nb1=\"#define print(X) main(){printf(c,13,34,34);};\";\nint\nb2=\"print(d%(13,13,34,a1,34,13,13,34,a2,34,13,13,34,b1,34,13,13,34,b2,34,13,13,34,c,34,13,13,34,d,34,13,a1,13,a2))\";\nint\nc=\"#define print(a) main(){puts(a);}%cprint(%cWrong language!%c)\";\nint\nd=\"#define int char*%cint%ca1=%c%s%c;%cint%ca2=%c%s%c;%cint%cb1=%c%s%c;%cint%cb2=%c%s%c;%cint%cc=%c%s%c;%cint%cd=%c%s%c;%c%s%c%s\";\n#define print(X) main(){printf(d,13,13,34,a1,34,13,13,34,a2,34,13,13,34,b1,34,13,13,34,b2,34,13,13,34,c,34,13,13,34,d,34,13,b1,13,b2);}\nprint(c%(13,34,34))",
        "#>21g::35*:*::\":\"%\\>:#$\":\"%#\\ \\#%\":\"/#::$#-g#1\\_#+\\#5:#5_v\n#v\"50g\"g12\"'<:#>!#,_@<'tnirp\"g12\">:#,_@\"+55\"print \"::g12$<\n#>21g\"Wrong language!\"21g\"g05\"21g\"[+5+5:]\"21g\"+55>#\">:#,_@\nprint'''print'<@_,#!>#:<'\"Wrong language!\"[+5+5:]'''"
    ],
    "hostile-divisor-numbers": [
        "n=input()\nx=1\nwhile n: \n x=i=x+1;d={0};c=1\n while i:m=set(`i`*(x%i<1));c*=d-m==d;d|=m;i-=1\n n-=c\nprint x",
        "f=lambda n,x=1,s=\"\",l=\"\",d=1:n and(d>x+1and f(n-1,x+1)or{*s}&{*l}and f(n,x+1)or f(n,x,s+l,(1-x%d)*str(d),d+1))or~-x",
        "k=input();n=0;r=range\nwhile k:n+=1;k-=1-any(set(`a`)&set(`b`)for a in r(1,n+1)for b in r(1,a)if n%a<1>n%b)\nprint n"
    ],
    "implement-tab-completion": [
        "lambda n,h:[a.pop()for a in[{s[:-i]for s in h if s.find(n)==0}for i in range(-len(`h`),0)]+[{n}]if len(a)==1][0]",
        "s,x=input();r='';q=1\nfor c in zip(*[t for t in x if s<=t<s+'\u00ff']):q/=len(set(c));r+=c[0]*q\nprint r or s",
        "s=input();l=[x for x in input()if x[:len(s)]==s]or[s];i=len(l[0])\nwhile len(l)>1:i-=1;l=set(x[:i]for x in l)\nprint l.pop()"
    ],
    "interlocking-brackets": [
        "def f(b,e='([{<)]}>',q=range(4)):\n b=[b[b.index(e[j])+1:b.index(e[j+4])]for j in q]\n print sum(sum(abs(b[k].count(e[j])-b[k].count(e[j+4]))for j in q)for k in q)/2",
        "t=0\ns=\"\"\nfor x in input():s+=chr(ord(x)&~7)\nfor x in s:a=s.split(x);t+=len(set(a[0])&set(a[1]))\nprint(t//2)"
    ],
    "lockers-vs-crackers-the-five-element-sequence": [
        "s=3\nfor n in input():s+=pow(n,s,7**58)\nprint s==0x8b5ca8d0cea606d2b32726a79f01adf56f12aeb6e",
        "a,b,c,d,e=input()\nprint 1if(a*c^b*e)*d==0xd5867e26a96897a2f80 and b^d==48891746 else 0",
        "i=input()\nk=1050809377681880902769L\nprint'01'[all((i>1,i[0]<i[4],k%i[0]<1,k%i[4]<1,i[4]-i[3]==i[3]-i[2]==i[2]-i[1]==i[1]-i[0]))]",
        "def a(b):\n    c=1\n    for d in b:\n        c=(c<<32)+d\n    return pow(7,c,0xf494eca63dcab7b47ac21158799ffcabca8f2c6b3)==0xa3742a4abcb812e0c3664551dd3d6d2207aecb9be",
        "def f(l,a=[0]):\n for n in l:a+=[(.8+.6j)**(n+a[-1])]\n return a[2::2]==[-0.20857691594748845+0.9907381787645837j,-0.7480510203178323-0.0856921111325014j]",
        "def L(a): return 1 if a==[(i-i**6) for i in bytearray(' ','utf-8')] else 0"
    ],
    "lets-play-m%c3%b6lkky": [
        "t=0\nfor v in input():t+=sum(v)-1or 762447093078/12**v.index(1)%12;t=[t+1,25][t>49]\nprint t",
        "f=lambda A,t=0:t>50and f(A,25)or A and f(A[1:],t-~(sum(A[0])-1or 762447093078/12**A[0].index(1)%12))or t",
        "c=0\nfor l in input():a=sum(l);c+=int('7985bc63a412'[l.index(1)],16)if a==1else a;c=(25,c)[c<51]\nprint c"
    ],
    "print-increment-decrement-alias-interpret-prindeal": [
        "p=filter(len,[l.split('#')[0].split()for l in input().split('\\n')]);m={};v={};i=0\nwhile i<len(p):\n s=p[i]\n if'('in`s`:s=s[f]\n n,f=s[0],0\n if n in m:a,b,c=([s[int(g)]if g.isdigit()else g for g in t]for t in m[n]);p=[a,(b,c)]+p[i+1:];i=0;continue\n s=s[1]\n q=v.get(s,0)\n if'd'>n:m[s]=p[i+1:i+4];i+=3\n elif'i'<n:print s,'=',q\n elif'd'<n:v[s]=q+1\n elif q:v[s]-=1\n else:f=1\n i+=1",
        "a=0\nA={}\nV={}\ndef f(l):\n if l[0]in\"d p i\":c,u=l;U=V[u]=V.get(u,0)+\"pi\".find(c);S=U<0;V[u]+=S;c<\"p\"or print(u,\"=\",U)\n else:d=lambda q:[w.isdigit()and l[int(w)]or w for w in A[l[0]][q]];S=f(d(1+f(d(0))))\n return S\nfor z in open(\"P\"):\n l=z.split(\"#\")[0].split()\n if\"a \"==z[:2]:a,s,*x=3,l[1]\n elif l*a:x+=l,;a-=1;A[s]=x\n elif l:f(l)"
    ],
    "a-fragile-quine": [
        "lambda s='lambda s=%r:s[22:]%%s%%s':s[22:]%s%s",
        "c='print(end=\"c=%r;exec(c\"%c+c[8*4])';exec(c)",
        "x='x=%r;1/(len(x)==30);print x%%x';1/(len(x)==30);print x%x",
        "s='s=%r;assert len(s)==34;print(s%%s)';assert len(s)==34;print(s%s)"
    ],
    "shoes-for-seahorses": [
        "f=lambda a:a[1:a.sort()]and-~f(a[1+(a[1]-a[0]<3):])or len(a)",
        "f=lambda a:a>[a.sort()]and-~f(a[[3+a.pop(0)]>a:])"
    ],
    "make-an-alphabetrie": [
        "def f(w,r=['']):\n for b,c in zip(w[1:],w)[::-1]:\n\ts='';d=0\n\tfor x,y,z in zip(r[0]+b,b,c+b):t=s[-1:];s=s[:-1]+[['+'*(s>'')+y,t+' |'[x in'+|']][y==z],t+y][d];d=d|(y!=z)\n\tr=[s]+r\n return[w[0]]+r",
        "p=lambda t,f,g:\"\\n\".join([(f[:-1]+\"+\"if(a!=min(t))*g else\"\")+a+p(t[a],(f+\" \"if len(t[a])>1or a==max(t)else f[:-1]+\"| \"),1)for a in t])if t else\"\"\ndef a(t,x):\n if x:c=x[0];t[c]=c in t and t[c]or{};a(t[c],x[1:])\ndef f(*s):t={};[a(t,i)for i in s];return p(t,\"\",0)"
    ],
    "find-the-dot-product-of-rationals": [
        "a=input();s=0;p=2;P=lambda n,i=0:n%p and(n,i)or P(n/p,i+1)\nwhile~-max(a):a,(w,x,y,z)=zip(*map(P,a));s+=(w-x)*(y-z);p+=1\nprint s",
        "l=input()\np=t=2\nwhile~-max(l):r=i=0;exec\"while l[i]%p<1:l[i]/=p;r+=1j**i\\ni+=1\\n\"*4;t+=r*r;p+=1\nprint t.imag/2"
    ],
    "break-tabs-in-half": [
        "I=[]\ntry:\n while 1:I+=[input()]\nexcept:r=m=0\nM=sum(map(len,I))\nO=[M*[' ']for _ in[0]*M]\nfor l in I:\n x=b=0;y=r;a=1;r+=1\n for c in l:\n  if'\\t'==c:a,b=-b,a;x+=a+2*b;y+=b-2*a\n  else:O[y][x]=c\n  x+=a;y+=b;m=max(m,y)\nfor l in O[:m+1]:print(*l,sep='')",
        "J=''.join\nu=raw_input().replace('\\t','  \\t  ')\nw=u[:]\nG=range(len(u))\nd,r=0,[[' 'for _ in G]for _ in G]\nu=u.split('\\n')\nfor t in G:\n x,y=0,0+t\n for c in u[t]:\n  if c=='\\t':d=(d+1)%4\n  if c!='\\t':\n   if c.strip():r[y][x]=c\n   if d<1:x+=1\n   if d==1:y+=1\n   if d==2:x-=1\n   if d>2:y-=1\nr=r[:max(i for i,n in enumerate(r)if J(n).strip())+1]\nfor i in r:print J(i).rstrip()"
    ],
    "lolololololololololololol": [
        "print('L',end='')\nwhile 1:print('ol',end='')",
        "x='L'\nwhile[print(end=x)]:x='ol'",
        "x='L'\nwhile x:x=print(end=x)or'ol'"
    ],
    "multiply-or-divide-by-n": [
        "r=i=1\nwhile 1:r=r/i or r*i;print r;i+=1",
        "while print(...)!=0:"
    ],
    "repeat-every-other-character-in-string-starting-with-second-character": [
        "lambda x:''.join(sorted(x[1::2]*2+x[::2]))",
        "f=lambda s:s and s[:2]+s[1:2]+f(s[2:])",
        "lambda s:''.join(c+i%2*c for i,c in enumerate(s))",
        "s[:1]*i",
        "lambda s:`[c*11for c in s]`[7::10]"
    ],
    "i-uppercase-the-source-code-you-reverse-the-input": [
        "r=-1;\u02b3=1;\u1d56\u02b3\u1d62\u207f\u1d57(\u1d62\u207f\u1d56\u1d58\u1d57()[::r])",
        "\u1d56\u02b3\u1d62\u207f\u1d57(\u1d62\u207f\u1d56\u1d58\u1d57()[::b'b'[0]%3-1])"
    ],
    "generate-alphabet-with-4-copies-of-each-letter": [
        "for i in range(104):print chr(i/4+65)",
        "x='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nfor e in x:\n    for d in range(0, 4):\n        print e",
        "i=65;exec('print chr(i);'*4+'i+=1;')*26"
    ],
    "implement-takewhile": [
        "f=lambda x:x and~x[0]%2*x and x[:1]+f(x[1:])",
        "t=lambda A,i=0:i<len(A)and~A[i]%2and[A[i]]+t(A,i+1)or[]",
        "def f(x):\n while\"1'\"in`map(bin,x)`:x.pop()",
        "lambda l:l[:[x%2for x in l+[1]].index(1)]",
        "def f(l):\n L=[]\n for x in l:\n  if x%2:break\n  L+=x,\n return L",
        "def f(L,E=[]):\n while L and~L[0]%2:E+=L.pop(0),\n print E",
        "lambda l:[x for x in l if l.__imul__(~x%2)]"
    ],
    "print-the-ascii-table": [
        "print(*map(chr,range(int(input()))))\nprint(*map(chr,range(int(input()))),sep='')",
        "lambda n:sys.stdout.buffer.write(bytes(range(n+1)))",
        "lambda n:('%c'*n)%(*range(n),)"
    ],
    "how-much-time-is-remaining": [
        "\"2:45\",\"5:01\"",
        "a, b = input()\ndef z(x):\n    x = x.split(\":\")\n    return int(x[0])*60+int(x[1])\na, b = z(a),z(b)\ns, m = b-a,0\nwhile s >= 60:\n    s -= 60\n    m += 1\nprint(str(m)+\":\"+str(s))"
    ],
    "a-square-of-text": [
        "a=int(len(s:=input())**.5)\nfor i in range(0,a**2,a):print(s[i:][:a])",
        "def f(s):\n\tr=int(len(s)**.5)\n\treturn'\\n'.join([s[i*r:i*r+r]for i in range(r)])",
        "i=input()\nfor c in range(len(i)):print(i[c],end=\"\\n\"*((c+1)%len(i)**0.5==0))",
        "s=input()\nn=int(len(s)**.5)\nwhile s:print s[:n];s=s[n:]"
    ],
    "count-from-1-to-100-in-roman-numerals": [
        "print' '.join(' '.join(i+j for  j in ' _I_II_III_IV_V_VI_VII_VIII_IX'.split('_'))for i in ' _X_XX_XXX_XL_L_LX_LXX_LXXX_XC'.split('_'))+' C'",
        "' '.join(i+j for i in['']+'X XX XXX XL L LX LXX LXXX XC C'.split()for j in['']+'I II III IV V VI VII VIII IX'.split())[1:-38]",
        "r=lambda n,l,v:(r(n,l[1:],v[1:])if n<v[0]else l[0]+r(n-v[0],l,v))if n else''\nfor i in range(1,101):print r(i,'C XC L XL X IX V IV I'.split(),[100,90,50,40,10,9,5,4,1]),",
        "r=lambda a,b,c:('',a,2*a,3*a,a+b,b,b+a,b+a+a,b+3*a,a+c);print' '.join(i+j for i in r(*'XLC')for j in r(*'IVX'))+' C'"
    ],
    "easier-communication-means-faster-coding-means-fewer-coders-means": [
        "while 1:print(end=\"FEWER CODERS MEANS EASIER COMMUNICATION MEANS FASTER CODING MEANS \")",
        "while 1:print'FEWER CODERS MEANS EASIER COMMUNICATION MEANS FASTER CODING MEANS',"
    ],
    "join-n-copies-of-a-snippet-to-produce-n2-characters": [
        "a='';print a;a+='xx';a",
        "g=0\nprint'g'*g;g+=2#"
    ],
    "how-many-wazirs-can-be-placed-on-an-n%c3%97n-chessboard": [
        "lambda x:x*x+1>>1",
        "lambda x:-(-x*x//2)"
    ],
    "charlie-oscar-delta-echo": [
        "print''.join('\\n%s: '%c*('['>c)+c for c in'AlfaBravoCharlieDeltaEchoFoxtrotGolfHotelIndiaJulietKiloLimaMikeNovemberOscarPapaQuebecRomeoSierraTangoUniformVictorWhiskeyXrayYankeeZulu')",
        "for x in'Alfa Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliet Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey Xray Yankee Zulu'.split():print x[0]+': '+x",
        "i=65\nfor w in\"lfa ravo harlie elta cho oxtrot olf otel ndia uliet ilo ima ike ovember scar apa uebec omeo ierra ango niform ictor hiskey ray ankee ulu\".split():print'%c: %c'%(i,i)+w;i+=1"
    ],
    "which-card-is-it": [
        "lambda n:'two,three,four,five,six,seven,eight,nine,ten,jack,queen,king,ace'.split(',')[(n-1)%13]+' of '+['hearts','diamonds','spades','clubs'][int((n-1)/13)]",
        "n=input();print 'two three four five six seven eight nine ten jack queen king ace'.split()[n%13]+' of '+['hearts','diamonds','spades','clubs'][n/13]",
        "s='hearts diamonds spades clubs two three four five six seven eight nine ten jack queen king ace'.split()\nlambda n:f'{s[n%13+4]} of {s[n//13]}'"
    ],
    "numbers-with-multiple-runs-of-ones": [
        "print[i for i in range(1,2**input())if[n[:1]for n in bin(i)[2:].split(\"0\")].count(\"1\")-1]",
        "lambda n:[i for i in range(2**n)if'01'in bin(i)]",
        "x=1\nwhile True:\n    if '01' in bin(x):\n        print(x)\n    x+=1"
    ],
    "chicken-mcnugget-numbers": [
        "lambda n:max(n>43,25<n>n%3>1,5<n>n%3<1,n in[20,40])",
        "lambda n:-n%3-n/20<(n%20!=3)",
        "lambda n:0x82492cb6dbf>>n&1",
        "lambda n:n+50in b'2345679:<=?@BCEHIKNQTW]'",
        "lambda n:n in[int(c,36)for c in'1234578ABDEGHJMNPSV']+[37,43]",
        "lambda n:0<=n--n%3*20!=3"
    ],
    "parenthifiable-binary-numbers": [
        "try:exec\"print 1,\"+\"\".join([\"],\",\"[\"][int(c)]for c in bin(input())[2:])\nexcept:print 0",
        "n=input()\ni=1\nwhile i*n:i+=1|n%-2;n/=2\nprint i==1",
        "f=lambda n,i=1:i*n>0<f(n/2,i+(-1)**n)or n<i<2",
        "lambda n:eval(\"'0b'==bin(n)\"+\".replace('10','')\"*n)"
    ],
    "output-the-van-der-corput-sequence": [
        "lambda n:[`i+1.`[::-1]for i in range(n)]",
        "lambda n:[f'{i+1}.0'[::-1]for i in range(n)]",
        "def f(i):\n    for i in range(1,i):print(\".\"+str(i)[::-1])"
    ],
    "calculate-isbn-13-check-digit": [
        "f=lambda s:s+`-sum(map(int,s+s[1::2]*2))%10`",
        "lambda n:n+`10-(sum(int(a)+3*int(b)for a,b in zip(n[::2],n[1::2]))%10or 10)`",
        ">>>r=input()\n>>>a=0\n>>>for x in r[::2]:\n    a+=int(x)\n>>>for x in r[1::2]:\n    a+=int(x)*3\n>>>a=(10-(a%10))%10\nprint(r+str(a))"
    ],
    "easily-typeable-words": [
        "k=['abc','def','ghi','jkl','mno','pqrs','tuv','wxyz',' ']\nx=input()\nl=2>1\nfor i in range(len(x)-1):\n for j in k:\n  if x[i+1] in j and x[i] in j:l=1>2\nprint(l)",
        "__builtin__"
    ],
    "mean-bits-an-average-challenge": [
        "def f(n):x=len(bin(n))-2;return(2-2**x)/n+x",
        "lambda x:sum(len(bin(i))-2for i in range(x))/x"
    ],
    "output-with-the-same-length-always": [
        "lambda n:f\"{n:33b}\".translate(\"abc\"*99)",
        "lambda i:[chr(ord(x)*2)for x in\"%9x\"%i]"
    ],
    "rebuild-a-rectangular-array-from-a-corner": [
        "def f(a):o=[i+i[::-1]for i in a];return o+o[::-1]",
        "lambda a:[b+b[::-1]for b in a+a[::-1]]"
    ],
    "find-max-sequence-length": [
        "s=input()\nfor c in set(s):\n i=0\n while-~i*c in s:i+=1\n print(c,'=',i)",
        "d={}.fromkeys(map(chr,range(97,123)),0)\nfor c in input():d[c]+=1\n[print(\"%s=%d\"%(p,d[p]))for p in d if d[p]>0]",
        "n=raw_input()\nprint map(lambda x:[x,n.count(x)],set(n))"
    ],
    "calculate-the-prime-factors": [
        "f=lambda n,k=2:n/k*[0]and(f(n,k+1),[k]+f(n/k,k))[n%k<1]",
        "n=input();i=1\nwhile~-n:\n i+=1\n while n%i<1:print i;n/=i",
        "f=lambda n,i=2:n/i*[f]and[f(n,i+1),[i]+f(n/i)][n%i<1]"
    ],
    "output-the-hours-at-90-degrees": [
        "lambda n:(range(1,13)*2)[n+2:n+9:3]",
        "lambda n:{*range(n%3,13,3)}-{n,0}"
    ],
    "digital-sum-fibonacci": [
        "f=lambda n:n>2and~-f(n-1)%9+~-f(n-2)%9+2or n>0",
        "a,b=0,1\nexec'a,b=b,(a%9or a)+(b%9or b);'*input()\nprint a",
        "f=lambda n:n>1and sum(map(int,`f(n-1)`+`f(n-2)`))or n"
    ],
    "sum-of-primes-between-given-range": [
        "x,y=map(int,raw_input().split())\ny+=1\na=range(y)\nprint sum(i for i in[[i for a[::i]in[([0]*y)[::i]]][0]for i in a[2:]if a[i]]if i>=x)",
        "a,b=map(int,input().split())\nP=k=1\ns=0\nwhile k<=b:s+=P%k*k*(k>=a);P*=k*k;k+=1\nprint(s)",
        "a,b=map(int,input().split());print(sum(n for n in range(a,b+1)if all(n%i for i in range(2,n))))",
        "S,E=input()\nL={}\nn=2\ns=0\nwhile n<=E:\n        try:\n                P=L[n];del L[n]\n        except:\n                P=[n]\n                if S<=n: s+=n\n        for p in P:\n                m=n+p\n                try:\n                        if p not in L[m]:L[m].append(p)\n                except:\n                        L[m] = [p]\n        n+=1\nprint s",
        "for i in range(input(),input()+1):P=n=1;exec'P*=n*n;n+=1;'*~-i;exec P%n*'print;'*i",
        "a,b=map(int,input().split())\nr=range\nprint(sum(1%i*all(i%j for j in r(2,i))*i for i in r(a,b+1)))"
    ],
    "put-together-a-senate-majority": [
        "0000000: 1d4e cb4e c330 10fc b7b8 05a3 36a8 4a41  .N.N.0......6.JA\n0000010: 88e3 361e 6aab 6636 5adb 20f7 eb71 b9cc  ..6.j.f6Z. ..q..\n0000020: 61de 4760 6a66 ceda 7dcf 7b3a 245e 4fd2  a.G`jf..}.{:$^O.\n0000030: f202 8429 37d6 c9f4 974e 0aba 5365 7126  ...)7....N..Seq&\n0000040: 9bee 8da5 3e65 b9c1 4b5d e341 1271 84c4  ....>e..K].A.q..\n0000050: 3eab 0997 54d6 b8b4 4bd2 b394 82f3 aab5  >...T...K.......\n0000060: bec5 46bc 07c9 f9a3 07f0 531b af13 48d4  ..F.......S...H.\n0000070: 49f5 0673 b2a5 aa4e 2ca4 3166 db60 d46e  I..s...N,.1f.`.n\n0000080: ffc8 4e37 1a94 bbc7 4cd9 35bb 243e 9b44  ..N7....L.5.$>.D\n0000090: f9f6 6296 8a47 ceb0 5986 bffb 644a 5d46  ..b..G..Y...dJ]F\n00000a0: 7d28 73b3 6d5c 5add c8bd 30ea 174e b0d0  }(s.m\\Z...0..N..\n00000b0: 0656 d843 35e9 7e3c 147a c50f f88a 5c94  .V.C5.~<.z....\\.\n00000c0: 7f                                       .",
        "print'LeeBurrCruzEnziKingPaulReedBluntBrownCaseyCoonsCrapoErnstFlakeHatchKaineLeahyMoranRischRubioSasseScottThuneUdallWydenYoungBennetBookerCapitoCardinCarperCorkerCornynCottonDainesDurbinGrahamHarrisHassanHellerHironoHoevenInhofeMarkeyMcCainMurphyMurrayNelsonPerduePetersRounds'"
    ],
    "im-walking-around-manhattan-how-far-am-i-from-my-hotel": [
        "x=lambda s:2*abs(sum([[1,-1,1j,-1j]['RLUD'.index(i)]for i in s]))",
        "y=lambda s:2*abs(sum(1j**(ord(i)%15)for i in s))"
    ],
    "wave-particle-duality-laterally-programmatically": [
        "lambda x:x[:-1]+(\" .\",\"\\/\",\"/\\\\\")[ord(x[-1])/46+(-1,1)[ord(x[-1])%46>0]]",
        "lambda s:s[:-1]+\"\\/ /\\.\"[-ord(s[-1])&3::3]",
        "lambda s:[s+'\\/'[s[-1]>'/'],' '+s][s<'/']"
    ],
    "a-quine-on-every-line": [
        "x='while 1:print(\"x=%r;exec(x)\"%x)';exec(x)",
        "c='while 2:print\"c=%r;exec c\"%c';exec c",
        "c='c=\\'%s\\';while 1:print c%c';while 1:print c%c"
    ],
    "sort-a-string-sort-of": [
        "f=lambda s,i=0,c='':s[i>>7:]and(s.count(c)>i>>7)*c+f(s,i+1,chr(i%128))",
        "lambda s:`zip(*sorted((s[:i].count(c),c)for i,c in enumerate(s)))[1]`[2::5]",
        "d={}\ndef f(c):d[c]=r=d.get(c,c),;return r\nprint`sorted(input(),key=f)`[2::5]",
        "a=[*input()]\nwhile a:\n    for c in sorted({*a}):print(end=c);a.remove(c)"
    ],
    "draw-hyperneutrinos-benzene-hegaxon-icon-in-ascii": [
        "b,f,s,u='\\/ _'\nprint'\\n'.join([s*6+u*15,s*5+f+s*15+b]+[s*(4-n)+'/ /'+s*(13+2*n)+'\\ \\\\'for n in range(5)]+[s*n+b+s*(25-2*n)+f for n in 0,1,2,3]+[s*4+b+s*2+u*13+s*2+f,s*5+b+u*15+f])",
        "a=`int(\"7YSUQZDJS0I3J2QJ40G9WNPIRBTBC1KF0F3X5WDMBW8CG5BVDHBJQ71V3UHCSY3TR8LC4IIEE5SZ\",36)`[:-1]\nfor i in\"0666666_!6__!5/!3\\\\!9\\n!844!422!211!1 \".split(\"!\"):a=a.replace(i[0],i[1:])\nprint a",
        "print'eNp10MEJAEEIA8C/VaSDNBTY/rtYlByci+aZER8BMqcnqiR6FG7/IPd87w0c/pQMYBrFJmxhQDstljJSQUrb5euhZzBe6PI3aQ=='.decode('base64').decode('zip')"
    ],
    "sort-the-unique-numbers-in-a-multiplication-table": [
        "r=range(1,n+1);print(sorted({i*j for i in r for j in r}))",
        "n=input()\nl=[1]\nfor i in range(1,n+1):\n for j in range(1,n+1):l.append(i*j)\nprint sorted(list(set(l)))",
        "lambda n:sorted({~(i%n)*~(i/n)for i in range(n*n)})"
    ],
    "incrementing-numbers-over-multiple-sessions": [
        "n=1;\nprint n\nopen(__file__,'r+').write(\"n=\"+`n+1`)",
        "open(__file__,'a').write(\"+1\");print 1"
    ],
    "interquine-two-programs-that-output-each-other-in-a-loop": [
        "a='a=%r;b=%r;print(b%%(b,a))';b='b=%r;a=%r;print(a%%(a,b))';print(b%(b,a))",
        "A='A=%r;print A[:23]%%A+A[29:35]23:29]';print A[:23]%A+A[23:29]",
        "a='a=%r,-%d;print a[0]%%a',-1;print a[0]%a    # Program 1: 42 bytes\na='a=%r,-%d;print a[0]%%a',--1;print a[0]%a   # Program 2: 43 bytes"
    ],
    "subsequence-substitution": [
        "def f(a,b,c,o=\"\"):\n for q in a:x=q==b[:1];o+=c[:x]or q;b=b[x:];c=c[x:]\n print[o,a][c>'']",
        "f=lambda a,b,c:a.replace(b[0],c[0],1)[:a.index(b[0])+1]+f(a[a.index(b[0])+1:],b[1:],c[1:])if b and all(x in a for x in b)else a"
    ],
    "simulate-rule-110": [
        "def r(s,m=range(40)):\n s=[int(i in s)for i in m]\n for g in m:print''.join([' X'[i]for i in s]);s=[int(not''.join(map(str,s[i-1:i+2]if i else s[:2]))in'111 100 000 00'.split())for i in m]",
        "i=input()\no=range(40)\nl=''.join(' X'[c in i]for c in o)\nfor r in o:print l;l=''.join('X '[l[c-1:c+2]in('XXX','   ','X  ','','  ')]for c in o)"
    ],
    "howdy-im-the-sheriff-of-code-golf": [
        "lambda h,w:sum(([''.join('# '[int(n)]*abs(w)for n in bin([62,120,224,238,438,750][int(l)])[2:])or'#']*abs(h)for l in'1211102455013333'),[])[::1-(h<0)*2]or['#'*9*abs(w)or'#']",
        "h,w=input();t=[];w=abs(w)\nfor i in range(16):c=bin(32+int('37333179HH134444'[i],26))[-5:];t+=[[''.join(abs(w)*' #'[d>'0']for d in c+c[3::-1]),'#'][w==0]]*abs(h)\nprint['\\n'.join(t[::[1,-1][h<0]]),'#'*(w*16or 1)][h==0]"
    ],
    "golf-the-smallest-circle": [
        "a=eval(input())\nb=lambda a,b: ((a[0]-b[0])**2+(a[1]-b[1])**2)**.5\nc=0\nd=1\nfor e in a:\n    for f in a:\n        g=b(e,f)\n        if g>c:\n            c=g\n            d=[e,f]\nprint(((d[0][0]+d[1][0])/2,(d[0][1]+d[1][1])/2,c/2))",
        "P={complex(*p)for p in input()}\nZ=9e999,\nfor p in P:\n for q in{p}^P:\n\tfor r in{p}^P:R,S=1j*(p-q),q-r;C=S.imag and S.real/S.imag-1jor 1;c=(p+q-(S and(C*(p-r)).real/(C*R).real*R))/2;Z=min(Z,(max(abs(c-t)for t in P),c.imag,c.real))\nprint Z[::-1]"
    ],
    "is-it-a-checkered-tiling": [
        "def f(a):\n m={a[0][0]:1}\n for R in a+zip(*a)+a:\n  p=0\n  for c in R:\n    P=m.get(p);Q=m.get(c,0)\n    if(c==p)*2<Q==P:return 1\n    if(P>0)>Q:m[c]=3-P\n    p=c",
        "lambda a:2in[len({i,l}^{k,j})for x,y in zip(a,a[1:])for i,j,k,l in zip(x,x[1:],y,y[1:])]"
    ],
    "output-the-nth-rational-number-according-to-the-stern-brocot-sequence": [
        "s,t=1,1;exec\"s,t=t,s+t-2*(s%t);\"*input();print'%d/%d'%(s,t)",
        "x,s=input(),[1,1]\nfor i in range(x):s+=s[i]+s[i+1],s[i+1]\nprint`s[x-1]`+\"/\"+`s[x]`",
        "f=lambda n:1/n or f(n/2)+n%2*f(-~n/2)\nlambda n:`f(n)`+'/'+`f(n+1)`"
    ],
    "custom-number-base-converter": [
        "n,s,t=input()\nk=0;w='';x=len(t)\nfor d in n:k=len(s)*k+s.find(d)\nwhile k:w=t[k%x]+w;k/=x\nprint w",
        "lambda n,a,b:g(sum(len(a)**i*a.find(j)for i,j in enumerate(n[::-1])),b)\ng=lambda n,c:c[n:n+1]or g(n/len(c),c)+c[n%len(c)]"
    ],
    "smallest-number-such-that-concatenation-is-a-square": [
        "f=lambda p,i=0:int(`p`+`i`)**.5%1and f(p,i+1)or i",
        "f=lambda n,i=0:int(f'{n}{i}')**.5%1and f(n,i+1)or i"
    ],
    "faro-shuffle-an-array": [
        "def f(n,L):exec\"l=len(L)/2;L=(L+L[1:]*~-l)[::l];\"*n;print L",
        "f=lambda n,x:n and f(n-1,sum(zip(x,x[len(x)/2:]),()))or x"
    ],
    "number-that-can-eat-itself": [
        "i,x=map(int,input()),1\nfor y in i[:0:-1]:\n if i[0]%10<y:x=0\n else:i[0]+=y\nprint x",
        "p,*s=map(int,input())\nprint(all(n<=sum(s[i+1:],p)%10for i,n in enumerate(s)))",
        "l=lambda n:n==n[0]or n[-1]<=n[0]*l(`int(n[0]+n[-1],11)%10`+n[1:-1])",
        "p,*s=map(int,input())\nwhile s:*s,k=s;p%10<k>q;p+=k"
    ],
    "return-the-integers-with-square-digit-sums": [
        "lambda x:[n for n in x if sum(map(int,`n`))**.5%1==0]",
        "lambda l:filter(lambda n:eval((\"sum(map(int,`n`))**.5==int(\"*2)[:-6]+\")\"),l)"
    ],
    "multiply-two-numbers-without-using-any-numbers": [
        "I,T,V,N,X,J=raw_input,dict,reversed,None,zip,''.join\nD='0123456789'\nz,o='01'\nA,B=I(),I()\nr=i=\"\"\nK=map(J,X('666622222222911111551111555884444447773333333','678945672389954132987698765898967457989837654'))\nP=T(X(K,map(J,X('344501110011800000440000332673322124652202211','628480244668154132507698505422648609367491852'))))\nS=T(X(K,'cdef678945abi65243ed87a9cbaghcdab89egfcb6a987'))\nfor d in D:P[z+d]=z;S[z+d]=d\ndef Z(A,B,R=r):\n for a,b in V(map(N,V(z+A),V(z+B))):c=(a or z)+(b or z);s=S[min(c)+max(c)];R=Z(R,o)+T(X('abcdefghi',D))[s]if s>\"?\"else R+s\n return R\nfor a in V(A):\n j=\"\"\n for b in V(B):r=Z(r,P[min(a+b)+max(a+b)]+i+j).lstrip(z);j+=z\n i+=z\nprint r if r else z",
        "9999999999x9999999999",
        "D='0123456789'\nR=reversed\nU=lambda x:[R for y in D if y<x]\nT=U(':')\ndef A(a,b,r='',c=[]):\n for x,y in map(None,R(a),R(b)):\n    d=U(x)+U(y)+c;t=T;c=[R]\n    if d<T:t=c=[]\n    r=min(k for k in D if U(k)+t>=d)+r\n if c:r='1'+r\n return r\na,b=input()\nm=''\nwhile b:\n if list(b).pop()in'13579':m=A(m,a)\n b=list(A(b,A(b,A(b,A(b,b)))));b.pop();a=A(a,a)\nprint m",
        "D={}\ne=t=\"\"\nN=[e]\nfor c in\"0123456789\":D[c]=t;D[t]=c;t+=\"I\";N+=N\nB=lambda s:[D[c]for c in reversed(s)]\nY=B(input())+N\nfor a in B(input())+N:\n for c in a:\n    s=[];o=e\n    for a,b in zip(N,Y):i=a+b+o;o=t<=i and\"I\"or e;s+=i.replace(t,e),;N=s\n Y=[e]+Y\nprint e.join(B(N)).lstrip(\"0\")"
    ],
    "n-dimensional-identity-matrix": [
        "f=lambda n,l=[]:[f(n,l+[i])for i in(len(l)<n)*range(n)]or+(l==l[:1]*n)",
        "n=input()\nr=eval(`eval('['*n+'0'+']*n'*n)`)\nfor i in range(n):exec'r'+`[i]`*n+'=1'\nprint r"
    ],
    "those-greedy-romans": [
        "f=lambda n,d=5,r='IVXLCD':r and f(n/d,7-d,r[1:])+n%d*r[0]or'M'*n",
        "lambda n,r=[1000,500,100,50,10,5,1]:''.join(n%a/b*c for a,b,c in zip([n+1]+r,r,'MDCLXVI'))"
    ],
    "show-the-top-five-comment-scores-on-a-se-post": [
        "def f(x):y=sorted(x)[-5:];return[z for z in x if z in y and not y.remove(z)]",
        "x=input()[::-1]\nwhile x[5:]:x.remove(min(x))\nprint x[::-1]",
        "f=lambda x,*h:x and x[:sum(t>x[0]for t in x+h)<5]+f(x[1:],*h,x[0]+1)",
        "lambda l,S=sorted:zip(*S(S(enumerate(l),key=lambda(i,x):-x)[:5]))[1]"
    ],
    "palindromic-numbers-with-a-binary-twist": [
        "lambda n:all(s==s[::-1]for s in(`n`,bin(n).strip(\"0b\")))",
        "lambda a:all(c==c[::-1]for c in[str(a),bin(a).strip('0b')])"
    ],
    "square-a-number-my-way": [
        "lambda n:sum(float(n)+int(_*sum(x>\"/\"for x in n))for _ in n if\"/\"<_)",
        "def f(i):l=[x for x in i if\"/\"<x];k=len(l);print(k*float(i)+sum(int(x*k)for x in l))"
    ],
    "frame-this-nice-ascii-art": [
        "def f(i):w='\u2550'*(i.find('\\n')+2);return'\u2554%s\u2557\\n\u2551 %s \u2551\\n\u255a%s\u255d'%(w,' \u2551\\n\u2551 '.join(i.split('\\n')),w)",
        "def f(x): \n n='\\n';s=\"\u2551 \";e=\" \u2551\";h=(x.find(n)+2)*\"\u2550\";return\"\u2554\"+h+\"\u2557\"+n+s+x.replace(n,e+n+s)+e+n+\"\u255a\"+h+\"\u255d\""
    ],
    "who-is-the-sleepiest-of-them-all": [
        "f=lambda s:s and max((s+' ')[:3],f(s[2:]),key=sorted)",
        "lambda x:\".\".join(max(zip(x[::2],x[2::2]),key=sorted))"
    ],
    "ascii-art-for-torrent-ui": [
        "e,l='.exe ',('+'+10*'-')*3+\"+\";print(l)\nfor i in zip(['|'+chr(z)+e+'    |'+\"#\"*10+'|seeding   |'if z%2or z>115else'|'+chr(z)+e+str((z-96)//2*10)+'% |'+(z-96)//2*\"#\"+(10-(z-96)//2)*\" \"+\"|leeching  |\"for z in range(97,123)],[l]*26):print(i[0],i[1],sep=\"\\n\")",
        "r=(\"+\"+10*\"-\")*3+\"+\"\nfor i in range(26):z=i/2+1;print r+\"\\n|\"+chr(97+i)+\".exe \"+[\"    |\"+10*\"#\"+\"|seeding \",`10*z`+\"% |\"+z*\"#\"+(10-z)*\" \"+\"|leeching\"][i%2and i<19]+\"  |\"\nprint r",
        "for i in range(2,28)+[id]:print('+'+'-'*10)*3+'+';a=i/2;b=i%2*(i<20);print('|'+'%-10s|'*3)%('%c.exe '%(95+i)+'%d0%%'%a*b,'#'*(a*b or 10),'sleeeedcihnign g'[b::2])"
    ],
    "build-a-semi-zigzag": [
        "m=input()\nn=m-1\nr=range(n+2)\nfor L in zip(*[' '*i+'O'+n*' 'for i in(r+[n,m]*~-n+r[-2::-1]+([m,0]*n)[:-1])*m][:1+3*m/2*n]):print''.join(L)",
        "n=input()\no,s=q='O '\ndef p(k,t=q*n+s*(4*n-6)):print(t*n)[k*~-n:][:n*3/2*~-n+1]\np(2)\nfor i in range(n-2):p(0,i*s+s+o+s*(4*n-7-2*i)+o+s*(2*n+i-2))\nn>1>p(5)",
        "def f(n,s=range):\n x=y=t=c=0;z=[]\n for i in s(n*n-n+2):c+=i%(n-(2<=n))<1;z+=[[x,y]];t=max(t,x);x+=2-c%2;y+=[-1,1][c%4<3]*(c%2)\n return'\\n'.join(''.join(' O'[[k,j]in z]for k in s(t))for j in s(n))"
    ],
    "hardcoding-the-cops-and-robbers-cops": [
        "f=lambda n,i=1,p=1:n and-~f(n-p%i,i+1,p*i*i)",
        "def f(n):x=n/10-2;return int(x*60-x**3*10+x**5/2-x**7/84)"
    ],
    "optimal-alphabet-stepping": [
        "*w,=map(ord,input())\na=[]\nfor i in range(26):\n n=1;p=w[0]\n for c in w:\n  while n<len(w)*26and p!=c:\n   n+=1;p+=i;\n   if p>122:p-=26\n a+=[n]\nprint(a.index(min(a)))",
        "def t(s,l,S=0):\n a=ord(s[0])\n for c in s[1:]:\n\twhile a-ord(c)and S<len(s)*26:S+=1;a=(a-65+l)%26+65\n return S\ndef f(s):T=[t(s,l)for l in range(26)];return T.index(min(T))"
    ],
    "which-wire-to-cut": [
        "def f(w,o):n=len(w);l=w[-1];s=''.join(w);return[2if not'R'in w else n if l=='W'else s.rindex('U')+1if'UU'in s else n,s.rindex('R')+1if w.count('R')>1and o else 1if l=='Y'and not'R'in w else 1if w.count('U')==1else n if w.count('Y')>1else 2,4if l=='B'and o else 1if w.count('R')==1and w.count('Y')>1else 2if not'B'in w else 1,3if not'Y'in w and o else 4if w.count('Y')==1and w.count('W')>1else n if not'R'in w else 4][n-3]",
        "def f(s,o):b,u,w,r,y=map(s.count,'BUWRY');l=s[-1];return+[2+(r>0<s!='UUR'),[r<1<l>'X'or u==1or y/2*2+2,1+s.rfind('R')][o*r>1],[r==1<y or-~0**b,4][l<'C'*o],[4+2*(1>r+(y==1<w)),3][y<o]][len(s)-3]",
        "def f(w,o):e=w[-1];r,u,y,x=map(w.count,'RUYW');g=r>0;return[2+(u<2or'R'<e)*g,[1+(e<'Y'or g)*(1+2*(y>1))*(u!=1),`w`.rfind('R')/5+1][(r>1)*o],[2-(y>r==1or'B'in w),4][(e<'C')*o],3*o*(y<1)or[6-2*g,4][x>y==1]][len(w)-3]"
    ],
    "golf-the-x%e1%b5%97%ca%b0-root-of-x": [
        "n=x=input();exec\"x-=(x**n-n)/(1.*n*x**-~n);\"*999;print x",
        "lambda x:x**(1/x)"
    ],
    "write-a-program-that-writes-a-function-but-in-a-different-language": [
        "print\"[](int x){return x+%d;}\"%input()",
        "print\"L+%db\"%input()",
        "print\"(lambda (x) (+ x %s))\"%input()",
        "\"v+x:x adbmal\no/?(3l\n;>~n",
        "print\"{%f+}\"%input()",
        ",\"lambda n:n+\"+",
        "lambda n:n+'+'"
    ],
    "integer-lists-of-noah": [
        "lambda x:set([x.count(i)for i in x])=={2}",
        "lambda l:{*map(l.count,l)}=={2}",
        "lambda l:all(l.count(i)==2for i in l)",
        "lambda x:{*[y.count(C)for C\tin\t(y:=x)]}!={*[2.]}##!2bcdfilmrtu"
    ],
    "swap-the-parity": [
        "def f(n):return n+(-1)**(n%2+1)",
        "lambda x:-(-x^1)",
        "lambda n:n-1+n%2*2",
        "lambda n:n+(n%2or-1)",
        "lambda n:n+(n&1)*2-1",
        "lambda n:n+n%2*2-1"
    ],
    "find-in-given-n": [
        "print[1,'i',-1,'-i'][input()%4]",
        "lambda n:'1i--'[n%4::-2]",
        "lambda n:n%4/2*'-'+'1i'[n%2]"
    ],
    "how-many-petals-around-the-rose": [
        "lambda d:sum(i%2*~-i for i in d)",
        "lambda l:sum(n**3&6for n in l)",
        "lambda d:sum(r%2*~-r for r in d)",
        "lambda l:sum(n%-2%n for n in l)"
    ],
    "when-i-grow-up-i-want-to-be-ascii": [
        "o='';i=input()\nfor x in'A\u00c1\u00c0\u00c3\u00c2 C\u00c7 E\u00c9\u00ca I\u00cd O\u00d5\u00d3\u00d4 U\u00da a\u00e1\u00e0\u00e3\u00e2 c\u00e7 e\u00e9\u00ea i\u00ed o\u00f5\u00f3\u00f4 u\u00fa'.split():\n if i in x:o=x[0]\nprint(o,i)[o=='']",
        "lambda s:s[s>'z':]or'EIOOUaaceioou_AAC'[ord(s)*17%67%17]"
    ],
    "you-had-me-at-hello": [
        "s=c='_';I=open(0)\nwhile'olleh'!=s>''<c:c=I.read(1);s=c+s[print(end=c):4]",
        "def c():\n b=yield\n while b!='hello':\n  b+=yield b[-1]\n  if len(b)==6:\n   b=b[1:]\ni=c()\ni.next()"
    ],
    "determine-if-strings-are-equal": [
        ">>> a = 'ss'\n>>> b = 's'\n>>> a in b in a\nFalse",
        "print{a:0,b:1}[a]",
        "a=list(a)\nb=list(b)\nfor i in range(len(a)):\n if ord(a[i])-ord(b[i])<0:\n  print 'n'",
        "def is_equal(a,b):\n    i=0\n    a,b=list(a),list(b)\n    if len(a)>len(b):\n        c=a\n        lst=b\n    else:\n        c=b\n        lst=a\n    try:\n        while i<len(c):\n            for j in c:\n                if j not in lst[i]:\n                    return False\n                i+=1\n    except IndexError:\n        return False\n    return True",
        "a='string'\nb='string'\nnot(len(''.join(set(a+b)))-len(a))",
        "b in a in b",
        "a is b",
        "a = \"string\"\nb = \"string\"\n\nnot any(ord(x)*len(a)-ord(y)*len(b) for x,y in zip(a,b))",
        "not({a}-{b})",
        ">>> s = 'string'\n>>> t = 'string'\n>>> 1 is len({s,t})\nTrue\n>>> s = 'string1'\n>>> t = 'string2'\n>>> 1 is len({s,t})\nFalse"
    ],
    "script-that-outputs-a-script-that-prints-a-given-input": [
        "print'print%r'%input()",
        "'print%r'.__mod__"
    ],
    "find-the-closest-fibonacci-number": [
        "f=lambda x,a=1,b=1:[a,b][b-x<x-a]*(b>x)or f(x,b,a+b)",
        "lambda k:min(map(f,range(2*k)),key=lambda n:abs(n-k))\nf=lambda i:i<3or f(i-1)+f(i-2)",
        "f=lambda n,a=0,b=1:a*(2*n<a+b)or f(n,b,a+b)"
    ],
    "find-the-missing-letter": [
        "f=lambda a,*r:r[0]-a>1and chr(a+1)or f(*r)",
        "def f(s,i=0):a=chr(ord(s[0])+i);return a==s[i]and f(s,i+1)or a",
        "lambda s:chr(*{*range(s[0],s[-1])}-{*s})",
        "lambda a:chr((ord(a[0])+ord(a[-1]))*-~len(a)/2-sum(ord(x)for x in a))",
        "lambda c:[chr(x)for x in range(ord(c[0]),ord(c[0]+26)if chr(x)not in c][0]"
    ],
    "square-pyramidal-numbers": [
        "g=lambda x:x*x+g(x-1) if x else 0",
        "lambda n:n*~n*~(n*2)/6"
    ],
    "setting-the-time": [
        "o,i=[0,0],0\nfor s in list(input()):i=(i+(s=='r')-(s=='l')>=1);o[i]+=(s=='u')-(s=='d')\nprint'%02d:%02d'%(o[0]%24,o[1]%60)",
        "h=m=p=0\nfor c in map(' ^<>'.find,input()):w=1/c;m+=w*p;h+=w-w*p;p=[c-2,p][w]\nprint'%02d:%02d'%(h%24,m%60)"
    ],
    "modulus-summation": [
        "lambda n:sum(map(lambda x:x%(n-x),range(n)))",
        "lambda a:sum(a%k for k in range(1,a))"
    ],
    "program-your-favorite-phrase": [
        "# 55 bytes, H(X)=3.72, Based on bitpwner's 66. \"Mix dog and cat fur.\"\ni=0;print(\"Mdacfionauxgdtr\"[i::5],end=\" .\"[i>3]);i+=1;i\n\n# 67 bytes, H(X)=4.28. \"Thanks for supporting Python development.\"\nq=b\"qx!%%0077C\";a,b,*q=q;print((str(credits)*2)[49:][a:b],end='');q\n\n# 60 bytes, H(X) = 3.51. \"Fix the bed old pal\"\ns=\"Fixthebedoldpal\";a,b,c,*s=s;print(a+b+c,end='. '[s>[]]);s",
        "i=4;print\"mniIMeosQy!t\"[i::5],;i-=1;i",
        "i='i'in dir()and i+1;print(\"Tfpcfhaialetgny\"[i::5],end=\" .\"[i>3]);"
    ],
    "which-side-has-more": [
        "lambda x:y.index(max(y))+1if len({*(y:=x.split(\",\"))})>1else 0",
        "def f(x):a,b=x.split(',');return(1,0,2)[((a<b)-(a>b))+1]",
        "lambda s:cmp(s[::-1],s)%3",
        "lambda s:((r:=s[::-1])!=s)+(r<s)"
    ],
    "output-all-the-white-or-black-squares-of-a-chessboard": [
        "(i+j)%2",
        "lambda s:[chr(x/8+97)+`x%8+1`for x in range(64)if x+x/8&1^ord(s[0])%3]"
    ],
    "chunky-vs-smooth-strings": [
        "lambda s:sum(map(str.__ne__,s,s[1:]))/(len(s)-1or 1)",
        "lambda n:~-len(n)and sum(x!=y for x,y in zip(n,n[1:]))/~-len(n)",
        "f=lambda s: sum(a!=b for a,b in zip(s,s[1:]))/max(len(s)-1,1)"
    ],
    "making-an-acronym": [
        "lambda s:''.join(c[0]for c in s.upper().split()if c not in'AND OF OR BY'.split())",
        "lambda x:\"\".join([x[0]for y in x.split(\" \") if y.lower() not in ['and','or','of','by']]).upper()"
    ],
    "whats-my-telephone-number": [
        "def f(n):\n a=b=i=1\n while i<n:a,b=a+i*b,a;i+=1\n return a",
        "f=lambda n:n<2or~-n*f(n-2)+f(n-1)"
    ],
    "rotate-a-number": [
        "lambda n,m:int(((n*m)[-m:]+n)[:len(n)])",
        "i=input\nn=i()\nk=int(i())%len(n)\nprint(int(n[-k:]+n[:-k]))",
        "f=lambda n,m:m and f(n[-1]+n[:-1],m-1)or int(n)",
        "lambda x,r:int(x[(a:=-r%len(x)):]+x[:a])"
    ],
    "print-an-arch-of-ascending-descending-numbers": [
        "s=12345678\nwhile s:r='%-8d'%s;print r+r[::-1];s/=10",
        "c=1;s='87654321'\nwhile c<9:print s[::-1]+s;s=' '*c+s[c:];c+=1",
        "bytearray"
    ],
    "convert-a-32-bit-binary-ipv4-address-to-its-quad-dotted-notation": [
        "to_bytes",
        "f=lambda n,k=-2:k*`n`or f(n>>8,k+1)+'.'+`n%256`",
        "def f(x):\n    y=''\n    for j in range(4):\n        y+=str(int(x[j*8:j*8+8],2))\n        if j<4:\n            y+=\".\"\n    return y",
        "lambda s:'.'.join(`int(s[i:i+8],2)`for i in(0,8,16,24))",
        "lambda n:\".\".join(map(str,n.to_bytes(4,\"big\")))"
    ],
    "is-it-a-sphenic-number": [
        "lambda x:(lambda t:len(t)>2and t[0]*t[1]*t[2]==x)([i for i in range(2,x)if x%i<1and i>1and all(i%j for j in range(2,i))])",
        "def s(n):a,k=2,0;exec('k+=1-bool(n%a)\\nwhile not n%a:n/=a;k+=10**9\\na+=1\\n'*n);return k==3*10**9+3",
        "lambda n:sum(1>>n%k|7>>k*k%n*3for k in range(2,n))==6",
        "lambda x:6==sum(5*(x/a%a+x%a<1)+(x%a<1)for a in range(2,x))"
    ],
    "first-sequence-with-no-square-differences": [
        "f=lambda n,a=[],x=0:n and f(*[n,n-1,a,a+[x]][all((x-k)**.5%1for k in a)::2],x+1)or a",
        "f=lambda n,l=[],a=0:n and(any((a-b)**.5%1==0for b in l)and f(n,l,a+1)or f(n-1,l+[a],a+1))or l",
        "n,*a=0,\nwhile 1:a+=n*(all((n-i)**.5%1for i in a)>0!=print(n)),;n+=1"
    ],
    "should-we-be-friends": [
        "l={}\ndef f(*r):l[r]=l[r[::-1]]=1\nk=lambda a,b:a==b or(a,b)in l\ns=lambda a,b:1-k(a,b)and any(k(a,z)&k(b,z)for z,_ in l)",
        "l=[]\ndef f(a,b):l.extend([(a,b),(b,a)])\nk=lambda a,b:a==b or(a,b)in l\ns=lambda a,b:k(a,b)-1and{c for c,d in l if d==a}&{c for c,d in l if d==b}",
        "F=[]\ndef s(f,c):c=set(c);r=c in F;return F.append(c)if f%2 else not r^(4 in[len(x|c)for x in F])if f else 2>len(c)or r"
    ],
    "atbash-self-palindromes": [
        "lambda x:(a:=[*map(ord,x.upper())])==[[c,155-c][64<c<91]for c in a][::-1]",
        "a=map(chr,range(65,91))\ns=raw_input().upper()\nprint ''.join([dict(zip(a,a[::-1])).get(i,i) for i in s])==s[::-1]",
        "s=input().upper()\nprint(s[::-1]==''.join(chr([o,155-o][64<o<91])for o in map(ord,s)))"
    ],
    "to-be-or-not-to-be": [
        "def e(a, b):\n        c, d = \"\"\"2,too,to,t0,two\"\"\",\"\"\"be,b,bee,b3\"\"\"\n        return a.lower() in c and b.lower() in d\n\nprint e('2', 'bee')",
        "lambda a,b:a.lower()in'2 to too two t0'.split()and b.lower()in['b','be','bee','b3']"
    ],
    "javascript-left-pad-golf": [
        "lambda a,b,x=\" \":a.rjust(b,x)",
        "lambda a,b,x=' ':str(a).rjust(b,str(x))"
    ],
    "binary-numbers-magic-trick": [
        "i=1 \nexec\"print zip(*zip(*[(n for n in range(61)+[-1]if n&i)]*5));i*=2;\"*6",
        "k=32\nwhile k:print zip(*zip(*[(i for i in range(61)+[-1]if i&k)]*5));k/=2",
        "r=range;print[[[i for i in r(61)if i&2**k][j::5]for j in r(5)]for k in r(6)]"
    ],
    "egg-sausage-bacon-and-spam-lovely-spam": [
        "lambda S,e,s,b:269454360636>>8*S+4*e+2*s+b&1",
        "\"001111020114001410120110\".count",
        "oct(0x20a00924204c00c048).count",
        "lambda e,s,b,S:206163194016>>8*S+e*4+s*2+b&1"
    ],
    "implement-intercals-binary-operators": [
        "a,x,y=input().split()\ni=int\nb=bin\nprint(i(''.join(([c for c,d in zip(b(i(a)),b(i(y)))if d=='1'],[c+d for c,d in zip(b(i(a))[2:],b(i(y))[2:])])['\u00a2'==x]),2))",
        "a,o,b=input().split()\nprint(int(''.join([(i+j,i[:j>'0'])[o>'~']for i,j in zip(*[bin(int(j))[2:].zfill(99)for j in(a,b)])]),2))",
        "x,y,z=input().split()\nd=y<\"\"\nf=lambda a,b:a+b and(b%2+5&4-d)*f(a/2,b/2)+(a%2*2+b%2)/3**d\nprint f(int(x),int(z))"
    ],
    "pristine-bit-checking": [
        "lambda a,b:(a^b)&-(a^b)in[a^b or[]]",
        "lambda a,b:sum(map(int,'{:b}'.format(a^b)))is+True"
    ],
    "print-a-letter-fibonacci": [
        "def f(n):m='a','b';exec'print m[-2];m+=m[-2]+m[-1],;'*n",
        "a,b=\"ab\";exec\"print a;a,b=b,a+b;\"*input()"
    ],
    "how-many-towers-can-you-see": [
        "def T(m):o=[];exec'm=zip(*m)[::-1]\\nfor r in m[::-1]:\\n n=k=0\\n for x in r:k+=x>n;n=max(x,n)\\n o+=[k]\\n'*4;return o",
        "def f(l):n=len(l);k=[l[c]for c in range(n)if l[c]>([0]+list(l))[c]];return f(k)if k!=l else n\nr=lambda m:(l[::-1]for l in m)\nm=input();z=zip(*m);n=0\nfor t in z,r(m),r(z),m:print map(f,t)[::1-(n>1)*2];n+=1"
    ],
    "evaluate-an-expression-of-ternary-operators": [
        "def f(s):z=s.pop;r=z(0);return s and':'<z(0)and(f(s),f(s))[r<'1']or r",
        "s=input()\nwhile'?'<=s[1:]:\n n=s<'1'\n while n:s=s[2:];n+=-(s[1]<'?')|1\n s=s[2:]\nprint s[0]",
        "a=`id`\nfor c in input()[::-1]:a=(c+a,a[ord(c)*7%9]+a[4:])[a>'?']\nprint a"
    ],
    "fundamental-solution-of-the-pell-equation": [
        "lambda i:next((x,y)for x in range(2,i**i)for y in range(x)if~-x**2==i*y**2)",
        "f=lambda n,x=2,y=1:x*x-n*y*y-1and f(n,x+(x==y),y*(y<x)+1)or(x,y)",
        "a=input()**.5\nx=2\nwhile x%a*x>1:x+=1\nprint x,x//a"
    ],
    "robot-on-a-ladder": [
        "def f(a,n):\n i=c=0\n while i<n:i={'U':lambda x:x+1,'D':lambda x:0 if x==0 else x-1,'R':lambda x:0}[a[c]](i);c+=1\n return c",
        "f=lambda n,s,h=0:h^n and-~f(n,s[1:],-[2%~h,~h,0][ord(s[0])%4])",
        "def f(c,n):\n f=t=0\n for x in c:\n  f+=1|-(x<'E');f*=(x!='R')&(f>=0);t+=1\n  if f>=n:return t"
    ],
    "fridge-magnet-substitution": [
        "lambda*a:all(len({sum(map(w.count,x))for w in a})<2for x in'A4 B8 CU EMW3 G69 I1 L7 NZ O0 R2 S5'.split()+list('DFHJKPQTVXY'))",
        "lambda a,b:X(a)==X(b)\nX=lambda s:sorted((\"ABCEEEGGILNORS\"+c)[\"48UMW36917Z025\".find(c)]for c in s if' '<c)",
        "lambda*t:2>len({`sorted(s.translate(dict(map(None,map(ord,'48UMW36917Z025 '),u'ABCEEEGGILNORS'))))`for s in t})",
        "lambda a,b:g(a)==g(b)\ng=lambda s:sorted('85930A4614012B3C4D5EF6378GH9AI2J3KL7'[int(c,36)]for c in s if'!'<c)"
    ],
    "determine-if-4-points-form-a-square": [
        "S=lambda A:len(set(A))-1==len(set([abs(K-J)for K in A for J in A]))",
        "lambda A: len(set(A))==4 and len(set(abs(i-j)for i in A for j in A))==3",
        "def U(A):c=sum(A)/4;d=A[0]-c;return{d+c,c-d,d*1j+c,c-d*1j}==set(A)",
        "def S(A):c=sum(A)/4.0;return set(A)==set((A[0]-c)\\*1j\\*\\*i+c for i in range(4))",
        "lambda l:all(1j*z+(1-1j)*sum(l)/4in l for z in l)",
        "len(set(abs(x-y)for x in A for y in A))==3"
    ],
    "20-cards-with-no-set": [
        "print eval('[[a,b,c,d]'+'for %s in 0,1,2'*4%tuple('abcd')+'if(a*a+b*b+c*d)%3<1]')[1:]",
        "for c in\"P\u0014}n\u0019F-Z\u0011>a\u00169*)V=.Q\u0006\":n=ord(c);print n/50,n%3,n%4,n%5"
    ],
    "north-by-north-by-north-by-south-east": [
        "d={\"N\":0,\"E\":.5,\"S\":1,\"W\":1.5}\ndef B(s):\n b=d[s[-1]]\n for c in s[::-1]:b=(b+d[c])/2+(abs(b-d[c])>1)\n return b*180",
        "f(s):u='NESW'.find(s[0])*90;return(u+f(s[1:]))/2+180*(abs(u-\u200c\u200bf(s[1:]))>180)if s[1:]else u"
    ],
    "print-rotation-safe-numbers": [
        "def f(n):S=`n`;n and f(n-1);print S+\".\"*all([n%10,set(S)<=set(\"0689\"),(u\"\"+S[::-1]).translate({54:57,57:54})!=S])",
        "for i in range(input()+1):print`i`+(\".\"*all([j in\"0689\"for j in`i`])and`i`[-1]!=\"0\"and`i`!=`i`.replace(\"9\",\"x\").replace(\"6\",\"9\").replace(\"x\",\"6\")[::-1])"
    ],
    "verify-a-tower-of-hanoi-solution": [
        "n,m=input()\nx=[range(n),[],[]]\nfor a,b in m:p=x[a].pop();e=x[b];e and 1/(p>e[-1]);e+=p,\nif x[0]+x[1]:_",
        "r=range;a,b=input();U=[r(a,0,-1),[],[]]\nfor K,J in b:U[J]+=[U[K].pop()]if U[J]<[1]or U[K]<U[J]else Y\nprint U[-1]==r(a,0,-1)"
    ],
    "lets-draw-the-triforce": [
        "w,s=input()\nn=2*-~w+s\nwhile n:n-=1;I=w-n+(n>w)*(w-~s);print' '*n+('  '*(n+s)).join(['/'+I*2*' _'[I>=w]+'\\\\'][I>w:]*-~(n<=w))",
        "w,s=input()\nl=['']*(2*-~w+s)\nfor i in range(-~w):W=w-i;b='/'+'_ '[i<w]*2*i+'\\\\';l[i::w-~s]=' '*(w+s-~W)+b,' '*W+b+'  '*(W+s)+b\nprint'\\n'.join(l)",
        "f,b,o='/\\ '\nO=o*2\nw,s=input()\nl=f+'__'*w+b\na=l+O*s+l\nm=n=[]\np=lambda g:(len(a)-len(g))/2*o+g\nfor i in range(w):m=m+[p(f+O*i+b)];t=f+O*i+b;n+=p(t+O*(w-i+s)+t),\nprint'\\n'.join(m+[p(l)]+[o]*s+n+[a])"
    ],
    "the-rule-of-thumb-for-title-capitalization": [
        "for w in`input()`.split():print[w.title(),w][`w`in\"'a'an'and'as'at'the'by'but'for'nor'in'of'on'or'to'up'\"].strip(\"'\"),",
        "repr()"
    ],
    "inverse-colombian-function": [
        "f=lambda n,a=[]:n in a and a.index(n)or f(n,[k+sum(map(int,`k`))for k in a]+[len(a)])",
        "n=input();k=K=1\nwhile n-k:K+=k>n;k=[k+sum(map(int,`k`)),K][k>n]\nprint K"
    ],
    "unslice-a-string": [
        "lambda l:`map(max,*[' '*n+s for n,s in l])`[2::5]",
        "def f(x,s=\"\"):\n x.sort()\n for e in x:\n  a=e[0];b=e[1]\n  for i,c in enumerate(b):\n   if len(s)<=(i+a):s+=c\n return s",
        "def f(x):r={j+i:q for(i,s)in x for j,q in enumerate(s)};return\"\".join(map(r.get,sorted(r)))"
    ],
    "asterisk-spiral": [
        "n,k=input()\ni=0;d=1\nl=(' '*n+'\\n')*n\nexec\"l=l[:i]+'*'+l[i+1:];d=[~n/d*cmp(d*d,2),d][' '<l[i+d:]<'*'];i+=d;\"*k\nprint l",
        "S,N=input()\nX=y=n=0\nY=x=c=-1\ns=eval(`[[' ']*S]*S`)\nexec\"if n%S<1:S-=c%2<1;X,Y=-Y,X;c+=1;n=0\\nx+=X;y+=Y;s[y][x]='*';n+=1\\n\"*N\nfor i in s:print`i`[2::5]"
    ],
    "fire-propagation-simulator": [
        "s,m=input()\nt={s}\nr=0\nwhile max(sum(m,[]))>0:\n r+=1\n for a,b in t|t:\n\ttry:a<0<x;b<0<x;m[a][b]-=1;t|=m[a][b]==0and{(a+1,b),(a-1,b),(a,b+1),(a,b-1)}or t^t\n\texcept:0\nprint r",
        "def f(m,s):\n p={s};w=len(m);t=0\n while sum(sum(m,[])):\n  t+=1;i=0\n  for x,y in p:\n   try:m[x][y]=max(0,m[x][y]-1)\n   except:0\n  for v in sum(m,[]):\n   if v<1:\n    for l in[(1,0),(-1,0),(0,1),(0,-1)]:a,b=max(0,i%w+l[0]),max(0,i//w+l[1]);p.add((a,b))\n   i+=1\n print(t)",
        "def f(m,y,x):t,m[y][x]=m[y][x],0;g(m,t)\ndef g(m,t):\n\tn,h,w=map(lambda r:r[:],m),len(m),len(m[0])\n\tfor l in range(h*w):r,c=l/h,l%h;n[r][c]-=m[r][c]and not all(m[r][max(c-1,0):min(c+2,w+1)]+[m[max(r-1,0)][c],m[min(r+1,h-1)][c]])\n\tif sum(sum(m,[])):g(n,t+1)\n\telse:print t"
    ],
    "build-a-nest": [
        "def f(n,k=0):\n while~n:\n  k+=1\n  try:r=eval(bin(k).translate({48:'],',49:'['})[3:-1])+[];n-=1\n  except:0\n print(r)",
        "x=input();y=\"\";z=0\nfor b in bin(x)[2+(x<1):]:y+=\"[]\"[b<\"1\"];z+=b>\"0\"or-1;z+=99*(z<0)\nprint\"[\"+(y,\"[]\"*(x+16))[z>0]+\"]\"",
        "s=l=0;r=\"\";n=input()\nfor d in bin(n)[2:]*(n>0):c=d<\"1\";l=[l,s>1][c];r+=\"]\"*c+(1-l*c)*\"[\";s+=1-c-l*c\nprint\"[\"+r+\"[\"*l+\"]\"*(s+l+1)"
    ],
    "swap-indices-and-values": [
        "lambda s:[[j for j,x in enumerate(s)if x==i]for i in range(max(s)+1)]",
        "def f(a):\n r=[[]for i in range(max(a)+1)]\n for i,j in enumerate(a):r[j]+=[i]\n print r"
    ],
    "billiard-balls-collision": [
        "m,n,o,p,q,r,s,t=input()\nq-=m\nr-=n\na=o*q+p*r-s*q-t*r\na/=q*q+r*r\nprint o-a*q,p-a*r,s+a*q,t+a*r",
        "def f(p,v,q,w):p-=q;d=((v-w)/p).real*p;return v-d,w+d"
    ],
    "pascals-column-sums": [
        "def f(n):x,z,m=[1],[0],n-1;l=[z*m+x+z*m];exec(\"x=[*map(sum,zip(z+x,x+z))];l.append(z*(n-len(x))+[b for a in zip(x,z*len(x))for b in a][:-1]+z*(n-len(x)));\"*m);return[*map(sum,zip(*l))]",
        "n=input()\nx=[]\na=[0]*n+[1]+n*[0]\nz=n%2\nexec'x+=[a];a=[(i%2^z)*sum(a[i-1:i+2])for i in range(2*n+1)];z^=1;'*n\nprint map(sum,zip(*x))[1:-1]",
        "f=lambda n:[sum(map(lambda n,k:k<1or (2*k+n)*f(2*k+n-1,k-1)/k,[abs(x)]*n,range(n))[:(n+1-abs(x))/2]) for x in range(-n+1,n)]"
    ],
    "word-search-puzzle": [
        "w,s=input()\nr=range\nd='\\n'\nI=''.join\nw=w.split(d)\nt,u=len(w),len(w[0])\nv=d.join([I(x)for x in zip(*w)]+[d]+[I([w[i+j][i]for i in r(min(u,t-j))])+d+I([w[i][i+j]for i in r(min(t,u-j))])for j in r(max(t,u))]+[d]+w)\nprint s in v or s[::-1]in v",
        "def s(h,n):\n l=h.find('\\n')+2;h+='\\n'*l;L=i=len(h)\n while i>0:\n  i-=1\n  for d in[-l,1-l,2-l,-1,1,l-2,l-1,l]:\n    j=i;m=len(n)\n    for c in n:m-=c==h[j%L];j+=d\n    if m<1:i=-1\n return-i"
    ],
    "where-should-i-put-my-mirror": [
        "R,L,s=range,len,input()\nt=max([s[i:j/2+i/2]for i in R(L(s))for j in R(L(s)+1)if s[i:j]==s[i:j][::-1]and(j-i)%2<1],key=L)\nprint t+'|'*(L(t)>0)+t[::-1]",
        "f=lambda s,p='':s and max((''<p<=s<p+'\\x7f')*(p[::-1]+'|'+p),f(s[1:]),f(s[1:],s[0]+p),key=len)",
        "def f(s):h=len(s)/2;r=s[:h]+'|'+s[h:];return s and max(r*(r==r[::-1]),f(s[1:]),f(s[:-1]),key=len)"
    ],
    "find-the-powertrain": [
        "def f(s):\n o=[['1',s]['-'in s]]\n while s not in o:\n  o+=[s];s+='1'*(len(s)%2==1);r=1;\n  for i,j in zip(s[::2],s[1::2]):r*=int(i)**int(j);s=str(r);\n return o[-1]",
        "def p(n,b=0,o=''):\n if n<1:return n\n for c in str(n):o+=c+'**'[b:];b=~b\n j=eval(o+'1');return p(j)if j-n else j"
    ],
    "are-you-in-the-biggest-room": [
        "def t(l,x,y,m,c=' '):\n if l[y][x]==c:l[y][x]=m;l=t(l,x-1,y,m);l=t(l,x+1,y,m);l=t(l,x,y-1,m);l=t(l,x,y+1,m)\n return l\ndef f(s):\n l=s.split('\\n');r=range(int(l.pop(0)));l=map(list,l);n=1\n for y in r:\n    for x in r:l=t(l,x,y,*'0X')\n for y in r:\n  for x in r:\n    if l[y][x]==' ':l=t(l,x,y,`n`);n+=1\n u=sum(l,[]).count;o=sorted(map(u,map(str,range(n))));return n<2or u('0')==o[-1]!=o[-2]",
        "r=range;h=input();m=\"\".join(raw_input()for x in r(h))\nw=len(m)/h;n=0;f=[x!='.'for x in m]\nfor i in r(w*h):\n if f[i]:\n    a=[i];M=s=0\n    while a:\n     i=a.pop();s+=1;M|=m[i]=='X';f[i]=0\n     for j in(i-1,i+1,i-w,i+w):a+=[[],[j]][f[j]]\n    n=max(s,n)\n    if M:A=s\nprint A==n"
    ],
    "you-must-construct-additional-pylons": [
        "s='5N 8O5P bDbHeM7P6S7S9W6Z 6O 6A8I7T7V . 7C8C . aM'.split()\nm=M=n=o=0\np,*u=input().split()\nfor v in u:\n S=0\n while'%x'%len(v)+v[0]not in s[S]:S+=1\n n+=S or-11;M+=S>7;m+='pC'in v;o+=m>1or M>1or m<1<=M\nq=int(p)+n//-8\nprint([1,'You must construct %d additional pylon'%-q+'s!'[q>-2:]][q<0]*(o<1))",
        "x,*l=input().split()\nd=-((int(x)*8-sum((('vexuobcl'+2*'clsuie'+4*'Ratahoiesuhihi').count(q[-3:-1])*(1-12*(q[0]>'w'))or 2)for q in l))//8)\nprint((1,\"You must construct %s additional pylon\"%d+'s!'[d<2:])[d>0])",
        "a,*l=input().split(' ');p=int(a)*8;for i in l:p-={\"Ne\":-11,\"Pr\":1,\"Ze\":2,\"Se\":2,\"St\":2,\"Hi\":2,\"Da\":2,\"Im\":4,\"Co\":6,\"Ar\":4,\"Ob\":1,\"Wa\":2,\"Ph\":2,\"MoC\":2,\"Vo\":4,\"Or\":3,\"Te\":4,\"Ca\":6,\"Mo\":8}[i[:2]+(\"C\"if i[-4:]==\"Core\")]\ne=int(.9+p/8)+1;print[1,\"You must construct \"+`e`+\" additional pylon\"+\"s!\"[e>1:]][p>=0]"
    ],
    "solve-the-halting-problem-for-befinge": [
        "m,v,d,x,y=input(),[],'>',0,0\ntry:\n while 1:\n  if[x,y]in v:print 0;break\n  c=m[y][x]\n  if c!='.':d=c;v+=[[x,y]]\n  if d in'><':x+=[-1,1][d=='>']\n  else:y+=[-1,1][d=='v']\nexcept:print 1",
        "def f(x):\n X=Y=b=0;a=1;D={}\n while len(x)>Y>-1<X<len(x[Y]):\n  try:\n   a,b={'>':(1,0),'^':(0,-1),'<':(-1,0),'v':(0,1)}[x[Y][X]]\n   if(X,Y)in D:return 0\n  except:0\n  D[X,Y]=0;X+=a;Y+=b\n return 1",
        "x=1\nX=Y=y=0\nH=[]\nG=input()\nwhile(X,Y,x,y)not in H:H+=[(X,Y,x,y)];C=ord(G[Y][X]);x=C%3-1;y=C%5-1;X+=x;Y+=y"
    ],
    "print-a-christmas-tree": [
        "print' '*9+'*'\nfor i in range(9):print' '*(9-i)+'0'*(i*2+1)",
        "def f(i,c='0'):print' '*(9-i)+c*(i*2+1)\nf(0,'*')\nmap(f,range(9))",
        "print(' '*9+'*',*('\\n'+' '*(9-i)+'0'*(i*2+1)for i in range(9)))",
        "n=-1\nexec\"print' '*(8-n/2%n),n*'0'or'*';n+=2;\"*10",
        "def a(s):\n print s\n if s<\"0\":a(s[1:]+\"00\")\nprint\" \"*8+\"*\"\na(\" \"*8+\"0\")",
        "s,h=1,10;print \" \"*(h-s/2)+\"*\"\nfor x in range(h):print \" \"*(h-s/2)+\"0\"*s;s=s+2"
    ],
    "converting-a-string-to-lower-case-without-built-in-to-lower-functions": [
        "raw_input().upper().swapcase()",
        "print(\"\".join(chr(ord(c)+32) if 64<ord(c)<91 else c for c in input()))",
        "t=input()\nfor c in t:\n x=ord(c)\n if 64<x<91:t=t.replace(c,chr(x+32))\nprint(t)",
        "input().translate({c:c|32for c in range(65,91)})",
        "for c in input():print(chr(ord(c)-65+97),end=\"\")if c.isupper()else print(c,end=\"\")"
    ],
    "mode-most-common-element-of-a-list": [
        "max((x.count(i),i)for i in x)[1]",
        "max(d,key=d.count)"
    ],
    "triangular-code-triangular-output": [
        "#\n##\n###\ni=1;\nexec\\\n\"prin\\\nt i;i*\\\n=10;\"*8\\",
        "#\n##\n###\nfor\\\ni in\\\nrange(\n9):####\n print(#\n10**i)###",
        "#\n##\n###\nfor\\\ni in\\\nrange\\\n(1, 9):\n print(\\\n'.' *i )#"
    ],
    "the-squiggly-sequence": [
        "n=int(input())\na='\\\\'*n\nif n%2:a='/'*n\nprint(a)",
        "lambda n:'\\/'[n%2]*n"
    ],
    "triangle-a-number": [
        "f=lambda a:a and sum(map(int,a))+f(a[:-1])or 0",
        "a=input()\nc=[]\nd=0\nb=[int(g) for g in a]\nfor i in range(1,len(a)+1):\n    c+=b[0:i]\nfor t in c:\n    d+=t\nprint(d)",
        "lambda n:sum(int(v)*(len(n)-i)for i,v in enumerate(n))",
        "lambda n:sum(-~i*int(c)for i,c in enumerate(str(n)[::-1]))",
        "lambda a:sum((i+1)*int(a[-i-1])for i in range(0,len(a)))",
        "f=lambda n:len(n)and sum(n)+f(n[:-1])",
        "lambda n:sum(-~i*n[~i]for i in range(len(n)))",
        "f=lambda a:a>[]and sum(a)+f(a[:-1])",
        "lambda x:sum(i*int(`x`[-i])for i in range(1,1+len(`x`)))"
    ],
    "range-reverse-sum": [
        "def f(n):\n s=0\n for i in range(1,n+1):\n  r=\"\"\n  k=str(i)\n  for j in range(0,len(k)):\n   r=r+k[len(k)-1-j]\n  s+=int(r)\n return s",
        "lambda n:sum(int(str(n)[::-1])for n in range(n))",
        "f=lambda x:x and int(`x`[::-1])+f(x-1)",
        "lambda n:sum(int(`i+1`[::-1])for i in range(n))"
    ],
    "this-code-errors-on-this-and-that-is-it-really-written-in-them": [
        "print(\"This program errors out in Python %d :P\"%(3/2*2))*1;a",
        "#[]#var s=\"\"\ns=(\"This program errors out in \"#[\n\"Python\"#]#&\"Nim\"&\n\" :P\")#[\nprint s#]#\ns.echo\ns[42].echo",
        "NameError: name 'console' is not defined",
        "print(\"\\\"}\\\"This program errors out in Python :P\\\"\"[3:-1]);'\")\u043d\u201d\u00b1\u00b8 :P\\\u201d\"05AB1E :P\":,\u00f5\u03b9';a",
        "j=1\ny=\"This program errors out in \"\n--j//1;Error=print\n--j;Error(y+\"Python :P\");eval(\"console.log(y+`JavaScript :P`);e\");j//2;\"\"\"\n1//0=do print (y++\"Haskell :P\");putChar$\"\"!!1\nmain=1//0\n--j //\"\"\"",
        "#1/*\n-print(\"This program errors out in Python :P\")\n'''*/\nmain(c){c=puts(\"This program errors out in C :P\")/0;}//'''",
        "x=\"This program errors out in \",#[[\nprint(x[0]+\"Python :P\")\na#]]z=#print(x..\"Lua :P\")",
        "~print(\"This program errors out in\",[\" Julia \",\"Python\"][1],\":P\")",
        "1#DEFSTR S\ns=\"QB64\"\n'';s=\"Python\"\nprint\"This program errors out in \"+s+\" :P\"\nCLS-1",
        "r='=,k1'\"This program errors out in Befunge :P\"\n-print(r[4:31]+\"Python :P\")",
        "#[cold]fn main(){panic!(print!(\"This program errors out in Rust :P\"))}/*\nprint\"This program errors out in Python 2 :P\";k#*/"
    ],
    "lithp-tranthlator": [
        "lambda s:s.translate({115:'th',83:'Th'})",
        "lambda s:s.replace(\"s\",\"th\").replace(\"S\",\"Th\")",
        "def l(s):return s.replace(\"s\",\"th\").replace(\"S\",\"Th\")"
    ],
    "ip-address-or-not": [
        "[i==`int(i)&255`for i in input().split('.')]!=[1]*4>_",
        "['%d.%d.%d.%d'%(*x.to_bytes(4,'big'),)for x in range(16**8)].count"
    ],
    "is-this-a-permutation-of-1-n": [
        "lambda a:{*a}=={*range(len(a))}",
        "lambda x:max(*x,len(x))^len({*x})"
    ],
    "horizontal-graph-of-word-length": [
        "for w in input().split():print('*'*len(w))",
        "print(''.join(map(lambda x:\"*\"*len(x)+\"\\n\"*int(x!=\"\"),input().split())))"
    ],
    "is-it-an-odd-word": [
        "lambda s:sum(map(s.count,\"aAeEiIoOuU\"))%2",
        "lambda s:sum(c in\"aeiouAEIOU\"for c in s)%2",
        "lambda n:[x in 'aeiou' for x in n.lower()].count(1)&1",
        "lambda s:sum(map(s.count,\"aeiouAEIOU\"))%2"
    ],
    "implement-an-over-function": [
        "lambda f,g,a,b:reduce(g,map(f,[a,b]))",
        "lambda f,g,x:g(*map(f,x))"
    ],
    "fizz-buzz-to-text": [
        "lambda x:''.join(chr(int(`[+(l<'D')for l in b[::4]]`[1::3],2))for b in x.split())",
        "lambda s,j=\"\".join:j(chr(int(j('01'[b<\"C\"])for b in c[::4]),2))for c in s.split())"
    ],
    "leap-for-leap-seconds": [
        "e,g,h=0,1972,0\nfor i in range(1,27):e,g,h={2:1,9:2,10:1,12:2,15:1,16:2,17:1,20:2,21:1,22:7,23:3,24:4,25:3}.get(i,e),g+e,(h,1-h)[i in[2,10,14,17,20,21,22,25]];print`g`+(\"-06-30\",\"-12-31\")[h]+\" 23:59:60\"",
        "for n in b'()+-/1357:<>BGKMPRTWZ]kqx~':print('%d-%02d-3%d 23:59:60'%(1952+n/2,n%2*6+6,n%2))",
        "n=0x6697f252225354422533333330;y=1972\nwhile n:print'%d-%02d-3%d 23:59:60'%(y,n%2*6+6,n%2);y+=n/2%8;n/=16",
        "def d(x):\n q=x%10\n if x%2==0:\n  p,r=q/2,\"06-30\"\n else:\n  p,r=(q-1)/2,\"12-31\"\n return\"%d%d-%s 23:59:60\"%(p+197,x/10,r)\nfor x in [20,21,31,41,51,61,71,81,91,12,22,32,52,73,93,5,24,34,44,55,74,85,57,87,28,58]:print(d(x))"
    ],
    "draw-an-s-chain": [
        "lambda k:'  ^\\n / %s/\\n  v'%('\\\\\\n| | |\\n \\ '*k)",
        "lambda k:'  ^\\n / '+'\\\\\\n| | |\\n \\ '*k+'/\\n  v'"
    ],
    "substring-chainification": [
        "f=lambda s,a:f(s[a[0]:print(s[:a.pop(0)])],a)",
        "s,a=input()\nfor n in a:print s[:n];s=s[n:]",
        "f=lambda a,s:a and[s[:a[0]]]+f(a[1:],s[a[0]:])"
    ],
    "mr-binary-counterman": [
        "b=[2,1]\nfor e in input():print b[e];b[e]+=2",
        "v = [2,1]\nfor i in map(int,input()):print(v[i]);v[i]+=2"
    ],
    "diamond-creator": [
        "def f(n):x=[('++'*i+'+').center(n*2)for i in range(n)];return[n*'+']+x+x[::-1]",
        "def d(s):print(\"+\"*s);t=[(\"+\"*i).center(2*s-1)for i in range(1,2*s,2)];print(\"\\n\".join(t+t[::-1]))",
        "def f(n):a=[' '*(n+~i)+'+'*(i-~i)for i in range(n)];return['+'*n]+a+a[::-1]",
        "lambda n:['+'*n]+[' '*(n+~i)+'+'*(i-~i)for i in[*range(n),*range(n)[::-1]]]"
    ],
    "number-chaining-predicate": [
        "f=lambda x:x==x[:1]or{*x[0]}&{*x[1]}and f(x[1:])",
        "lambda x:reduce(lambda a,b:set(a)&set(b)and b,x)"
    ],
    "lengthen-letter-runs": [
        "f=lambda s:s and-~(s[0]*2!=s[:2])*s[0]+f(s[1:])",
        "for c in input():print(c,end=c[id==c:]);id=c"
    ],
    "calculate-a190810": [
        "t={1}\nexec'm=min(t);t=t-{m}|{2*m+1,3*m-1};'*input()\nprint m",
        "L=1,;exec'L+=2*L[0]+1,3*L[0]-1;L=sorted(set(L))[1:];'*input()\nprint L[0]",
        "g=lambda k:g(k%2*k/2)|g(k%3/2*-~k/3)if k>1else k\nf=lambda n,k=1:n and-~f(n-g(k),k+1)"
    ],
    "create-a-checkerboard-matrix": [
        "lambda n:[[i-~j&1for i in range(n)]for j in range(n)]",
        "lambda n:[('10'*n)[i:i+n]for i in range(n)]",
        "r=range(input());print[''.join([`(x+y+1)%2`for x in r])for y in r]"
    ],
    "check-whether-an-integer-is-a-power-of-2-without-using-operations": [
        "print int(bin(input())[3:]or 0)<1",
        "x=input();print x&x*~0==x",
        "p=lambda n:n>0and(n<2or n%2<1and p(n/2))",
        "int(bin(input())[3:])<1",
        "x=input();print x&x/3<1",
        "print 3>bin(input()).rfind('1')"
    ],
    "print-the-capitals-without-the-capitals": [
        "t=\"labaton rouge,inindianapolis,ohcolumbus,almontgomery,mthelena,codenver,idboise,txaustin,maboston,nyalbany,fltallahassee,nmsanta fe,tnnashville,njtrenton,mojefferson,varichmond,sdpierre,paharrisburg,meaugusta,riprovidence,dedover,nhconcord,vtmontpelier,cthartford,kstopeka,mnsaint paul,akjuneau,nelincoln,ncraleigh,wimadison,waolympia,azphoenix,milansing,hihonolulu,msjackson,ilspringfield,sccolumbia,mdannapolis,wycheyenne,utsalt lake city,gaatlanta,ndbismarck,kyfrankfurt,orsalem,arlittle rock,iades moines,casacramento,okoklahoma city,wvcharleston,nvcarson city\".split(\",\");print[(t[n][:2].upper(),t[n][2:].title())for n in range(50)]",
        "zopfli --deflate",
        "print zip([c.title()for c in\"baton rouge.indianapolis.columbus.montgomery.helena.denver.boise.austin.boston.albany.tallahassee.santa fe.nashville.trenton.jefferson.richmond.pierre.harrisburg.augusta.providence.dover.concord.montpelier.hartford.topeka.saint paul.juneau.lincoln.raleigh.madison.olympia.phoenix.lansing.honolulu.jackson.springfield.columbia.annapolis.cheyenne.salt lake city.atlanta.bismarck.frankfurt.salem.little rock.des moines.sacramento.oklahoma city.charleston.carson city\".split('.')],[s.upper()for s in map(''.join,zip(*[iter(\"lainohalmtcoidtxmanyflnmtnnjmovasdpameridenhvtctksmnaknencwiwaazmihimsilscmdwyutgandkyorariacaokwvnv\")]*2))])"
    ],
    "print-the-sequence": [
        "f=lambda n:n[-1]%1and n[:-1]or f(n+[eval(f\"n[-1]{'/*+-'[len(n)%4]}len(n)\")])",
        "f=lambda n,i=1:[]if n%1else[n]+f([n/i,n*i,n+i,n-i][i%4],i+1)"
    ],
    "carve-some-ascii-jewels": [
        "n=int(input());print(\" \"+\"__\"*n+\"\\n/\"+\"  \"*n+\"\\\\\")\nfor i in range(n+1):print(\" \"*i+\"\\\\\"+\"  \"*(n-i)+\"/\")",
        "lambda n:'\\n'.join([' '+'__'*n,'/'+'  '*n+'\\\\']+[' '*i+'\\\\'+'  '*(n-i)+'/'for i in range(n+1)])",
        "n,s=int(input()),\" \"\nprint(s+n*\"__\",\"/\"+n*2*s+\"\\\\\",*[i*s+\"\\\\\"+2*(n-i)*s+\"/\"for i in range(n+1)],sep=\"\\n\")"
    ],
    "determine-the-sharpness-of-a-word": [
        "lambda s:sum(3-\"MWCUNZS_AVO\".find(c)/2*4%7for c in s)",
        "lambda s:sum(3-\"MCNSAO_WUZ_V\".find(c)*4%7for c in s)",
        "lambda w:sum('AVNZMW'.find(c)/2-'CUS_O'.find(c)/2for c in w)",
        "lambda s:sum(b'\u0005\u0004\u0003\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0007\u0006\u0001\u0004\u0004\u0004\u0002\u0004\u0003\u0005\u0007\u0004\u0004\u0006'[c-65]-4for c in s)"
    ],
    "obfuscating-text-by-cycling-ternary-digits": [
        "s=input()\nr=y=''\nfor c in s+s[0]:x=(ord(c)-97)%91;r+=y and chr((y%9*3+x/9-26)%91+32);y=x\nprint r",
        "b=lambda k:k and b(k/3)*10+k%3\ns=''.join('%03d'%b(ord(x)-6-91*(x>' '))for x in input())\nprint`[chr(int((s[1:]+s[0])[i:i+3],3)+97)for i in range(0,len(s),3)]`[2::5].replace('{',' ')"
    ],
    "the-floating-horde": [
        "s=[0]\nfor v in raw_input().split()[::-1]:s=[int(v)+s[0]/2,s[0]%2]+s[1:4]\nprint' '.join(map(str,s))",
        "n=map(int,raw_input().split())\nx=4\nwhile x:n[x-1]+=n[x]/2;n[x]%=2;x-=1\nprint' '.join(map(str,n))",
        "l=map(int,raw_input().split())\nfor i in range(4):l[3-i]+=l[4-i]/2;l[4-i]%=2\nprint' '.join(map(str,l))"
    ],
    "enumerate-each-series-of-identical-numbers-in-place": [
        "a=[]\nfor x in input():print a.count(x);a+=x,",
        "f=lambda a:a and f(a[:-1])+[a.count(a[-1])]",
        "lambda a:[a[:i].count(v)for i,v in enumerate(a)]"
    ],
    "the-magical-piper": [
        "lambda s:map(s.replace('_','')[::2].count,'~o')",
        "lambda s:((v:=s.replace(\"_\",\"\")[::2]).count(\"o\"),v.count(\"~\"))",
        "m=input()\nn=m.index('P')\nc=count\nt=m[:n].c('~o')+m[n:].c('o~')\na=m.c('~')-t\nprint(t,a)",
        "def f(s):\n r=[0,0];i=0\n for c in s:\n\tif'_'!=c:r[c>'o']+=i;i^=1\n return r"
    ],
    "generate-a-password": [
        "s=input()\nt=s.upper()\nfor n,c in sorted((t.count(i),i)for i in{*t}if'@'<i<'['):print(n,end=s[t.rfind(c)])",
        "def f(s):a=s.lower();return''.join(`n`+s[a.rfind(c)] for n,c in sorted((a.count(c),c)for c in set(a)if c.isalpha()))"
    ],
    "can-we-spell-a-third-number": [
        "lambda s:sum(max(c in p for c in s)for p in'e to for si'.split())<4",
        "def f(x):w=\"oe two tre for fie si se eit ie te e twe tire\".split();return[[(w:=[*filter(lambda a:c not in a,w)])for c in i]for i in x][-1][-1]!=[]",
        "lambda s:all(set(x)&set(s)for x in\"e to for si\".split())"
    ],
    "rgs-3-5-help-me-write-portuguese": [
        "(*a,v),(p,*b)=map(str.split,input().split('-'))\nfor c in[v+p,p+' '+v+'s'*(v[-1]in'aeiou')]:print(*a,\"nao\",c,*b)",
        "(*a,v),(p,*b)=map(str.split,input().split('-'))\na+='nao',\nprint(*a,v+p,*b)\nprint(*a,p,v+'s'*(v[-1]in'aeiou'),*b)"
    ],
    "find-ranges-of-true-values-in-a-list": [
        "l=input();l+=[0];o=[];s=k=0\nfor i,j in enumerate(l):s=j*~k*i or s;~j*l[i-1]and o.append([s,i-1]);k=j\nprint o",
        "p=i=0\nfor x in input()+[0]:\n if x-p:b=x<p;print`i-b`+';'*b,\n p=x;i+=1"
    ],
    "smallest-zeroless-base": [
        "n=x=input()\nb=2\nwhile x:z=x%b<1;b+=z;x=[x/b,n][z]\nprint b",
        "n=m=input()\nb=2\nwhile m:c=m%b<1;b+=c;m=(m/b,n)[c]\nprint b"
    ],
    "calculate-the-progressive-mean": [
        "lambda l:(m:=sum(l)/(n:=len(l)),(p:=sum(l[-i]/2**i for i in range(1,n))+l[0]/2**(n-1)),p-m)",
        "def f(l):\n m=sum(l)/len(l);p=l[0]\n for n in l:p=(p+n)/2\n return m,p,p-m",
        "(mean, p_mean, trend)"
    ],
    "a-sequence-of-sums-of-integers-that-arent-in-the-sequence": [
        "f=lambda n:n>2and(f(n-1)-~f(n-2))*(f(n-1)-f(n-2))/2or(5-n)*n",
        "def g(n):\n if n<2:return n*4\n s=set(map(g,range(n)));return sum(set(range(max(s)))-s)",
        "r=t=0\nexec'r,t=t+r*~-r/2or 4,t-r;'*input()\nprint r"
    ],
    "armistice-day-challenge": [
        "n=input()\nk='||  ||'\nfor i in range(n):print k,(n-i)*' '+'//'+' '*-~i,k",
        "a=\"||  ||\"\ndef m(n):\n    for e in range(n):print(a,\" \"*(n-e),\"//\",\" \"*(e+1),a)"
    ],
    "the-red-nosed-reindeer": [
        "lambda a,b:'youknowdasheranddancerandprancerandvixencometandcupidanddonnerandblitzenbutdoyourecallthemostfamousreindeerofallrudolphtherednosedreindeerhadaveryshinynoseandifyoueversawityouwouldevensayitglowsalloftheotherreindeerusedtolaughandcallhimnamestheyneverletpoorrudolphjoininanyreindeergamesthenonefoggychristmasevesantacametosayrudolphwithyournosesobrightwontyouguidemysleightonightthenhowthereindeerlovedhimastheyshoutedoutwithgleerudolphtherednosedreindeeryoullgodowninhistory'",
        "#coding=L1\ni=int.from_bytes('\u00d5\u00aa\u00be\u00b8%(\u00a6#?\u00aa\u00c6*\\n\u00ec\u00c9^;R2\u00b4\u00c39;I\u00aa\u00c6nj\u00f1\u00bf\u00aa\u00da\u00d1c%&\u00fe\u00acd\u00c8Z    KU[\u00fe\u00aa\u00ac8\u00c72_\u00de^\"\u00a0\u00a3#;\u00da\u00b8vL\u00ba\u00ab\u00a3+\u00d9Ju\u00ee6x%(\u00a6#?\u00aa\u00f7\u00a0\u00aa\\\u00a4\u00cfr\u00aeL~XZ{M\u00e5nX\u00d69\u00a9\u00ab'.encode('L1'),'big')\nI=open(0);m=I.readline().split()\nwhile i:print(end=chr(97+m.index(I.read(i%4+1))));i//=4",
        "lambda a,b:''.join([chr(96+int(''.join([f'{ord(c):07b}'for c in'''ezVsw\u0010\u0019P,A8B\u0002peH\u0017\t\u0004A82d\u000bDY\u001c\npo4Z\u0002q\u0003V\u0004H\u000bD\u0011w\u001c,A8A\u0018M\u001a\u0015a+!\u000fezd(a1J\u0010+/NC\u0002kuN\"Rq\u0005\u0016'L\u000b\fJR\u001ed\bQ\u0002d)\u000e>2I\u0011)8BK\u0012\u0001\u0010\u001b\u000b\u00163!\u00172ss\u0014\u0017\bIY>Rl,S\u0006tiKu]zX!6\u0015iCJ4\u001dGo\u0018,1s(A/Q\u0002e\u0011)8BK\u00153\u0014J\u001e`5\u001d\\0\\ a1D\u0012kA4YhA98[\u000b\u0013\u0005R\u0007_\u0014U\u0011v BO%d\\\u000bYHT\\!%HpZ,t W\u001eq&<sr\u001a\u0012&:\u001a\feXYBu\u0001\f\u0016K#s\u0007\u0019*#lA\u000bS\"\u0019>Y\u001c|eMq$IhRw]&/TzR!-f6\nIhQw\u0012:\u0014Q\u0002\\CwQ\u0002d*.\u0010Rdcv\u0014D\u0012h3Q\u0002s\u001a\u000fVBH}4]\u001a\u0010;\u0005\u0016*H{\u0010\"D\u000b\u0011$9yJ$E%b\n,Y>V\u0018;d>w\u0012r\tN'''])[i:i+5],2))for i in range(0,2346,5)])+'tory'"
    ],
    "fold-a-list-in-half": [
        "lambda l:[l[i]+l[~i]for i in range(len(l)//2)]+len(l)%2*[l[len(l)//2]]",
        "lambda l:[sum(x)for x in zip(l[:len(l)//2],l[int(len(l)/2+.5):][::-1])]+[[],[l[len(l)//2]]][len(l)%2]",
        "f=lambda l:l[1:]and[l[0]+l[-1]]+f(l[1:-1])or l"
    ],
    "implement-the-max-pooling-operation-from-convolutional-neural-networks": [
        "def f(m,w):r=range(0,len(m),w);return[[max(sum([x[i:i+w]for x in m[j:j+w]],[]))for i in r]for j in r]",
        "lambda M,k:eval(\"map(lambda*l:map(max,zip(*[iter(l)]*k)),*\"*2+\"M))\")",
        "def f(s,m):r=range(len(m)//s);return[[max(b for k in range(s)for b in m[i*s+k][j*s:][:s])for j in r]for i in r]"
    ],
    "draw-an-asciirisk": [
        "s='%c';print(('\\n'.join(['%10c%c']*9+[s*21]*2+[' '*(8-i)+s*2+'  '*i+s*2for i in range(9)]))%(*range(32,128),))",
        "k,l,c,s,r=8,0,chr,' ',range;o=''.join(map(chr,r(32,127)))\nfor i in r(0,18,2):print s*9+o[i:i+2]\nprint o[18:39]+'\\n'+o[39:60]\nfor i in r(60,95,4):print s*k+o[i:i+2]+s*l+o[i+2:i+4];k-=1;l+=2",
        "i=b=0\nfor x in range(32,127):a=x%2<1;c=x>90;d=x<50;print(end=[' '*9*d,['\\n'+' '*(8-i),'  '*~-i][b]][c]*a+chr(x)+'\\n'*(x==70or d*x%2));b^=a;i+=b*c*a"
    ],
    "when-integers-join-the-queue": [
        "def f(x,r=[]):\n for i in x:r=i and[i]+r or r[:-1]\n print r",
        "q=[]\nfor i in input():q=[[i]+q,q[:i]][i<0]\nprint q",
        "def f(x):q=[];[*map(lambda s:exec((\"q.pop(0)\"if q else\"\",\"q+=[s]\")[s!=\"X\"]),x)];print(q[::-1])"
    ],
    "first-they-came": [
        "print('First',*[f'the {s}s, and I did not speak out-\\nBecause I was not a {s}.\\n\\nThen'for s in['Socialist','Trade Unionist','Jew']],'me-and there was no one left to speak for me.',sep=' they came for ')",
        "print(' they came for '.join([\"First\"]+[f\"the {i}s, and I did not speak out-\\nBecause I was not a {i}.\\n\\nThen\"for i in['Socialist','Trade Unionist','Jew']]+['me-and there was no one left to speak for me.']))",
        "t='they came for '\ns='First '\nfor i in'Socialist','Trade Unionist','Jew':s+=t+f'the {i}s, and I did not speak out-\\nBecause I was not a {i}.\\n\\nThen '\nprint(s+t+'me-and there was no one left to speak for me.')"
    ],
    "pairable-strings": [
        "f=lambda s,n=1:s==2*s[:n]or''<s[n:]>-f(s,n+1)<f(s[n:])*f(s[:n])",
        "f=lambda x,s=1:x>x[:s]and(x==2*x[:s])|f(x[:s])&f(x[s:])|f(x,s+1)",
        "f=lambda s,t='':''<s>f(s[1:],t+s[0])|f(t and s)*f(t)>-(s==t)",
        "f=lambda s,p='':s>''and(f(p)>-(s==p)<f(s))|f(s[1:],p+s[0])"
    ],
    "string-distance": [
        "d=input()\nprint(sum([min(abs(x-y),x+26-y)for x,y in[map(lambda x:(ord(x)-97),sorted(d[i:i+2]))for i in range(len(d))][:-1]]))",
        "lambda s:sum([13-abs(13-abs(ord(a)-ord(b)))for a,b in zip(s,s[1:])])"
    ],
    "densely-packed-decimal-dpd-to-decimal": [
        "lambda a:[[a&6,a>>4&6,a>>7&6,8][b\"  eW7B]Oys\"[~a&8or~a&6or~6|a>>4]%x&3]|a>>x%9&1for x in[7,4,9]]",
        "lambda a,b,c,d,e,f,g,h,i,j:[c+[a*4+b*2,8][g*h*~(d*~e*i)],f+[d*4+e*2,8,a*4+b*2][g*i+(d<e)*g*i*h],j+[h*4+i*2,[8,[a*4+b*2,d*4+e*2][h<i]][h^i or(h&i-(d|e))]][g]]"
    ],
    "find-the-largest-number-n-positions-away-from-n": [
        "lambda n:max([n[i+v]for i,v in enumerate(n)if i+v<len(n)])",
        "lambda l,e=enumerate:max(i for p,i in e(l)for s,j in e(l)if j==abs(s-p))"
    ],
    "solve-an-equation-with-almost-any-numbers-you-like": [
        "a=['1'+(n and('1'.join(n)+'1'))for n in input().split('=')]\nprint'='.join(`max(map(eval,a))-eval(c)+1`+c[1:]for c in a)",
        "lambda e:sum([[len(e+s)-2*s.count('+')]+[1]*len(s)for s in e.split('=')],[])"
    ],
    "find-the-smallest-number-bigger-than-the-input-whose-digital-sum-is-the-input": [
        "lambda n:[n+9,(1+n%9)*10**(n/9)-1][n>9]",
        "lambda n:[n+9,`n%9`+n/9*'9'][n>9]",
        "def r(n):\n m=n\n while 1:\n  m+=1\n  if sum(map(int,str(m)))==n:return(m)"
    ],
    "swap-capitalization-of-two-strings": [
        "def j(s,g):p=lambda s,g:''.join(i.upper()if j.istitle()else i.lower()if j.islower()else i for i,j in zip(s,g));return p(s,g),p(g,s)",
        "lambda a,b:''.join([x,chr(ord(x)&95|ord(y)&32)][(x+y).isalpha()]for x,y in zip(a+'\\n'+b,b+' '+a))",
        "t=\"\".join;s=\"low\",\"upp\";y=lambda a,b:eval(\"a\"+\".%ser()\"%s[b.isupper()]*b.isalpha());f=lambda a,b:(t(map(y,a,b)),t(map(y,b,a)))",
        "lambda*I:[\"\".join([a.upper(),a.lower(),a][~-b.isalpha()or\"Z\"<b]for a,b in zip(*X))for X in I,I[::-1]]"
    ],
    "find-the-sortable-years": [
        "f=lambda n:-~n*(`sorted(`n+1`)`[2::5]in'0123456789')or f(n+1)",
        "x,s=input()+1,sorted\nwhile[j for i,j in enumerate(s(str(x))[1:])if int(s(str(x))[i])+1!=int(j)]:x+=1\nprint x",
        "n=input()+1\nwhile''.join(sorted(`n`))not in'0123456789':n+=1\nprint n"
    ],
    "how-many-atoms-in-the-hydrocarbon": [
        "def f(s):n='mePbpHhond'.find(s[0]);return-~n,2*(n+ord(s[-3])%50%3)",
        "x=input();n=list('_mepbPhHond').index(x[0]);print(n,2*n+{'a':2,'e':0,'y':-2}[x[-3]])"
    ],
    "letter-boxed-validator": [
        "lambda l,w,J=''.join:(set(J(w))==set(J(l)))*all((v<1or u[-1]==v[0])*u[2:]*(2>(x in p)+(y in p))for u,v in zip(w,w[1:]+[0])for x,y in zip(u,u[1:])for p in l)",
        "lambda l,w:(set(sum(l,[]))==set(''.join(w)))*all(a[-1]==b[0]for a,b in zip(w,w[1:]))*all((a in g)+(b in g)<2for x in w for a,b in zip(x,x[1:])for g in l)*min(map(len,w))>2"
    ],
    "find-number-of-ones-to-get-a-number-using-and": [
        "f=lambda n:min([n]+[f(j)+min(n%j*n+f(n/j),f(n-j))for j in range(2,n)])",
        "def F(N,n,s=\"\",r=\"\"):\n try:\n\tif n<1:return(eval(s)==N)*0**(`11`in s or\"**\"in s)*s\n\tfor c in\"()+*1\":r=F(N,~-n,s+c)or r\n except:r\n return r\nf=lambda N,n=1:F(N,n).count(`1`)or f(N,-~n)"
    ],
    "terra-mystica-cycling-power": [
        "def f(i,d,t,g):\n x=min(i,g);i-=x;q=g>0;g-=x\n if q:d+=x;x=min(d,g);g-=x;d-=x;t+=x\n else:t+=x\n print i,d,t",
        "def f(i,d,t,g):\n x=min(i,g);i-=x\n if g>0:y=min(d+x,g-x);d+=x-y;t+=y\n else:t+=x\n print i,d,t"
    ],
    "compare-version-numbers": [
        "lambda*l:cmp(*map(lambda v:map(int,v.split('.')+[0]*len(`l`))[:len(`l`)],l))",
        "lambda*p:cmp(*zip(*map(lambda x,y:(x or 0,y or 0),*[map(int,u.split('.'))for u in p])))"
    ],
    "vampire-compatibility": [
        "def D(a,b):X=lambda c:c in a and 1-(c in b);return(X('A')+X('B')+X('+'))<1\nT=\"O- O+ A- A+ B- B+ AB- AB+\".split()\nX=lambda t:(0,([u for u in T if D(t,u)],[u for u in T if D(u,t)]))[t in T]",
        "def f(t):l='A+ O+ B+ AB+ A- O- B- AB-'.split();c=[9,15,12,8,153,255,204,136];i=l.index(t);print[s for s in l if c[i]&1<<l.index(s)],[s for s in l if c[l.index(s)]&1<<i]"
    ],
    "mutant-pangolin": [
        "t=[\"a pangolin\"];c='''p=print;i=input;a=lambda q:i(q)[0]in\"Yy\"\ndef q(t):\n  if len(t)<2:\n    g=t[0]\n    if a(f\"Is it {g}?\"):p(\"Good. That was soooo easy.\")\n    else:s=i(\"Oh. Well you win then -- What were you thinking of?\");n=i(f\"Please give me a question about {s}, so I can tell the difference between {s} and {g}.\");t[0]=n;t+=[[g],[s]][::1-2*a(f\"What is the answer for {s}?\")];p(\"Thanks\")\n  else:q(t[2-a(t[0])])\np(\"Ok, please think of something\");q(t);p(f\"t={t};c=''{c!r}'';exec(c)\")''';exec(c)",
        "q=\"\"\"\nd=['a pangolin'];i=input;p=print\np(\"OK, Please think of something\")\nwhile len(d)!=1:\n    d=d[1+(i(d[0])[0]==\"n\")]\nx=i(\"Is it \"+d[0]+\"?\")\nif x[0]==\"n\":\n    m=i(\"Oh. Well you win then -- What were you thinking of?\")\n    n=[i(\"Please give me a question about \"+m+\", so I can tell the difference between \"+d[0]+\" and \"+m),*[[d[0]],[m]][::(i(\"What is the answer for \"+m+\"?\")[0]==\"n\")*2-1]]\n    p(\"Thanks\")\n    q=repr(n).join(q.split(repr(d)))\nelse:\n    p(\"Good. That was soooo easy.\")\nq='q=\"\"'+'\"'+q+'\"\"'+'\"'+chr(10)+'exec(q)'\np(q)\n\"\"\"\nexec(q)"
    ],
    "sums-of-consecutive-integers": [
        "def x(n):\n r=[n]\n for i in range(2,n):\n  t=[]\n  if i%2*(n%i<1):t=[j+n//i-i//2for j in range(i)]\n  elif i%2<1and n%i==i//2:t=[j+n//i-i//2+1for j in range(i)]\n  if t[:1]>[0]*(sum(t)==n):r+=t,\n return r[-1]",
        "f=lambda n,R=[1]:n-sum(R)and f(n,[R+[R[-1]+1],R[1:]][sum(R)>n])or R",
        "n=input()\nr=int((2*n)**.5)\nwhile r:\n if~r%2*r/2==n%r:print range(n/r-~-r/2,n/r-~r/2);r=1\n r-=1"
    ],
    "double-rotation": [
        "x=input()\ny=lambda i:'`'<i.lower()<'n'\nz=lambda i:'m'<i.lower()<'{'\nu=filter(y,x)\nd=filter(z,x)\nr=l=\"\"\nfor i in x:\n if y(i):r+=u[-1];u=[i]\n else:r+=i\nfor i in r[::-1]:\n if z(i):l=d[0]+l;d=[i]\n else:l=i+l\nprint l",
        "s=input();g=lambda(a,b):lambda c:a<c.lower()<b\nfor f in g('`n'),g('m{'):\n t='';u=filter(f,s)[-1:]\n for c in s:\n  if f(c):c,u=u,c\n  t=c+t\n s=t\nprint s"
    ],
    "help-the-architects-visualize-the-skyline": [
        "def s(l):\n d=len(l)+1;l=[0]+l+[0];h=(max(l)+3)/2;o=''\n for i in range(d*h):\n  a=l[i%d+1];c=l[i%d];b=2*(h-1-i/d);o+=\"|\"if(a>b+1)+(c>b+1)else\" \"*(a+c>0);o+=\" _/__  _\\\\\"[a-b+1::3]if b*(1>=abs(a-b))else\" \"*(1+2*(a>0))\n  if b==0:o=o.replace(\" \",\"_\")\n  if i%d==d-1:print o[:-1];o=''",
        "a=map(int,raw_input().split())\nl=max(a)+1|1\nwhile~l:print''.join((x%2*'/  _\\\\ '[x<l::2]*(x<=l<x+4)or'_ '[x|1!=l>1]*3)[x<1:x+2]+'| '[x<=l>=y]*(x+y>0)for x,y in zip([0]+a,a+[0]))[1:];l-=2"
    ],
    "prime-divisor-table": [
        "n=input()\np=[]\nt=\"%%%ss \"%len(`n[-1]`)*-~len(n)\nprint t%(('',)+n)\ni=2\nwhile n[-1]/i:\n if all(i%j for j in p):\n\tp+=[i];s=['*'[m%i:]for m in n]\n\tif'*'in s:print t%tuple([i]+s)\n i+=1",
        "def p(*t):print'%%%ds '%len(`x[-1]`)*len(t)%t\ndef f(x):k=m=1;p(' ',*x);exec\"r=[n%k and' 'for n in x]\\nif 0in m%k*r:p(k,*r)\\nm*=k*k;k+=1;\"*x[-1]"
    ],
    "make-me-a-square": [
        "lambda s:s+s.join(s+'\\n \\n'+s)+s",
        "lambda s:s*3+\"\\n\"+s+\" \"+s+\"\\n\"+s*3",
        "lambda n:3*n+'\\n'+n+\" \"+n+'\\n'+3*n",
        "lambda s:3*s+f'\\n{s} {s}\\n'+3*s",
        "lambda c:f'{3*c}\\n{c} {c}\\n{3*c}'"
    ],
    "simple-integer-operation-calculator": [
        "i=0\nfor c in input():i+=[1,-i//2,-1,i][ord(c)%23%4]\nprint(i)",
        "i=0\nfor c in input():exec\"i=i\"+c+`~ord(c)%5%3`\nprint i",
        "i=0\nfor c in input():exec\"i=i%s2&-2\"%c\nprint i/2",
        "r=0\nfor c in input():exec'r=r'+c+`2-ord(c)%11%3`\nprint r",
        "C=lambda s,n:s and C(s[1:],{3:n+1,5:n-1,2:n*2,7:n/2}[ord(s[0])%10])or n//1"
    ],
    "write-a-deadfish-interpreter": [
        "a=0\nfor x in input():\n a=[a-1,a+1,a,a*a][x/6%4];a*=a^256>0\n if x%5:print a",
        "n=0\nfor x in input():\n\tif n in(-1,256):n=0\n\tif\"o\"==x:print(n)\n\telse:n=[n+1,n-1,n*n][ord(x)%4^1]"
    ],
    "index-of-a-multidimensional-array": [
        "f=lambda x,y:x>[]and y.pop()+x.pop()*f(x,y)",
        "lambda a,b:sum(b[i]*eval('*'.join(str(n)for n in a[i+1:])or'1')for i in range(len(a)))",
        "lambda d,i:sum(eval(\"*\".join(map(str,[z,*d])))for z in i if d.pop(0))"
    ],
    "count-all-possible-tweets": [
        "print((x:=17<<16)**281//~-x-1)",
        "print 1114112**281/1114111-1"
    ],
    "golf-a-custom-fibonacci-sequence": [
        "n,a,b=input()\nexec'a,b=b,a+b;'*n\nprint a",
        "f=lambda x,y,n:n and f(y,x+y,n-1)or x"
    ],
    "convert-singular-to-plural": [
        "lambda s,v=\"aeiou\":(s[-2:]==\"fe\"and s[:-2]+\"ve\"or s[:-1]+((s[-1]==\"y\"and s[-2]not in v)*\"ie\"or s[-1]==\"f\"and\"ve\"or s[-1]+((s[-1]in\"sxz\"or s[-2:]in[\"ch\",\"sh\"])+(s[-1]==\"o\"and s[-2]not in v))*\"e\"))+\"s\"",
        "lambda s:s+'\\bve'*(s[-1]=='f')+'\\b\\bve'*(s[-2:]=='fe')+'e'*(s[-1]in'sxz'or s[-2:]in('ch','sh')or s[-1]=='o'and s[-2]not in'aiueo')+'\\bie'*(s[-1]=='y'and s[-2]not in'aiueo')+'s'"
    ],
    "reverse-a-string-while-maintaining-the-capitalization-in-the-same-places": [
        "lambda s:''.join([z.lower,z.upper]['@'<c<'[']()for c,z in zip(s,s[::-1]))",
        "f=lambda s,i=0:s[i:]and(s[~i]*2).title()[~('@'<s[i]<'[')]+f(s,i+1)",
        "lambda s:''.join((z*2).title()[c.isupper()-1]for c,z in zip(s,s[::-1]))"
    ],
    "up-go-the-bits": [
        "lambda n:int(''.join('12'[c>'0']for c in bin(n)[2:]),3)",
        "f=lambda n:n and 3*f(n/2)+n%2+1",
        "lambda i:int(''.join(`int(x)+1`for x in bin(i)[2:]),3)"
    ],
    "is-it-a-semiprime": [
        "primeomega",
        "def g(x,i=2):\n while x%i:i+=1\n return i\ndef f(n,l=0):\n while 1%n:l+=1;n/=g(n)\n return l==2",
        "lambda n:g(n)==2\ng=lambda n,i=2:n/i and[g(n,i+1),1+g(n/i)][n%i<1]",
        "lambda n:0<sum((n%x<1)+(x**3==n)for x in range(2,n))<3",
        "lambda k:f(k)==2\nf=lambda n,k=2:n/k and(f(n,k+1),1+f(n/k,k))[n%k<1]"
    ],
    "make-me-an-easter-egg": [
        "lambda n:r'''  __\n /a\\\n/aa\\\n|aa|\n\\____/'''.replace('a',n*2)",
        "lambda x:fr'''  __\n /{2*x}\\\n/{4*x}\\\n|{4*x}|\n\\____/'''",
        "print r'''  __\n /~\\\n/~~\\\n|~~|\n\\____/'''.replace('~',input()*2)"
    ],
    "output-a-sudoku-board": [
        "r='147258369'\nfor i in r:print(r*4)[int(i):][:9]",
        "l=range(1,10)\nfor x in l:print(l*9)[x*8/3:][:9]",
        "l=*range(10),\nfor i in b\"\u0001\u0004\u0007\u0002\u0005\b\u0003\u0006\t\":print(l[i:]+l[1:i])",
        "r=range(9)\nfor i in r:print[1+(j*10/3+i)%9for j in r]",
        "l=list(range(1,10))\nfor i in range(1,10):print(l);l=l[3+(i%3==0):]+l[:3+(i%3==0)]",
        "r='147258369';print([(r*4)[int(i):][:9]for i in r])"
    ],
    "print-a-block-diagonal-matrix": [
        "def f(a,p=0):n=a.pop(0);exec(\"print(*'0'*p+'1'*n+'0'*sum(a));\"*n);f(a,p+n)",
        "h=input()\nr=range\nl=len(h)\nfor i in r(l):\n for k in r(h[i]):print\" \".join(\"01\"[i==j]for j in r(l)for x in r(h[j]))",
        "def f(l,s=0):\n for x in l:r=[0]*sum(l);r[s:s+x]=[1]*x;s+=x;exec(\"print(*r);\"*x)",
        "def P(L,n=0):k,*L=L;exec(\"print(*[0]*n+[1]*k+[0]*sum(L));\"*k);L and P(L,n+k)"
    ],
    "give-me-odd-even-square-cube-prime-and-composite-3-digit-numbers": [
        "lambda x:628*x[2]%831",
        "lambda x:497+int(x,33)%37",
        "lambda s:hash(s)%853^702",
        "lambda s:hash(s)%591^1",
        "lambda s:sum(s[:-1])-2+6*(81in s)+(77in s)"
    ],
    "deranged-combinatorics-compute-the-subfactorial": [
        "f=lambda n:n<1or f(n-1)*n^1",
        "f=lambda n:n<1or(-1)**n+n*f(n-1)"
    ],
    "invalid-invali-inval": [
        "c=\"\".join\nlambda s:c([c([s[:l]+`i`for i in range(10)])for l in range(len(s),0,-1)])",
        "s=input()\nfor i in range(len(s),0,-1):\n for j in range(10):print(s[:i],j)",
        "lambda x:[(x+\" \")[:~i//10]+str(i%10)for i in range(len(x)*10)]",
        "f=lambda s:s and[s+`n`for n in range(10)]+f(s[:-1])or[]"
    ],
    "remove-spaces-maintaining-capitalization": [
        "s=input()\nprint''.join(map(lambda(c,u):[c.lower,c.upper][u](),zip(s.replace(' ',''),map(str.isupper,s))))",
        "s=input()\nfor c in s:s=s[c>' '!=print(end=(c+c).title()[s<'@'or'['<s]):]",
        "s=input()\ny=list(s.replace(' ','').lower())\ni=0\nfor c in y:\n if s[i].isupper():y[i]=c.upper()\n i+=1\nprint(''.join(y))",
        "s=input()\nprint\"\".join([c.lower(),c.upper()][s[i].isupper()]for i,c in enumerate(s.replace(\" \",\"\")))",
        "lambda s:''.join(c.upper()if i in(s.find(q)for q in s if q.isupper())else c for i,c in enumerate(s.replace(' ','').lower()))",
        "x=input()\nX=x.replace(' ','')\nprint''.join([X[i].upper()if x[i].isupper()else X[i].lower()for i in range(len(X))])"
    ],
    "which-day-of-christmas-is-it": [
        "f=lambda x,i=1:f(x,i+1)if(i+3)*i+2<x/i*6else i",
        "f=lambda n,i=0:n*6>-~i*i*(i+2)and-~f(n,i+1)",
        "lambda n:n**.3335//.55",
        "lambda n:int((n*6)**.33359)"
    ],
    "legendres-unsolved-conjecture": [
        "n=2\nwhile n:n+=0<sum(min(i%j for j in range(2,i))for i in range(n*n,~n*~n))or-n",
        "i=k=P=1\nwhile~i*~i-k:P*=k;k+=1;i+=i*i<k>0<P%k"
    ],
    "a-scene-of-jimmy-diversity": [
        "lambda s:((c:=s.count)('o')-c('/'),c('/o'),c('/-'))",
        "x,y,z=map(input().count,'o/-')\nprint x-y,y-z/2,z/2",
        "g=input().count\nb,c=g('/'),g('/-')\nprint(g('o')-b,b-c,c)"
    ],
    "print-a-cube-net-of-the-specified-size": [
        "def f(i,c=1):\n print(' '*i*4,'')[c>i]+'# '*i*3\n if i*2>c:f(i,c+1)",
        "n=input()\nfor c in 1,4,1:exec\"print'# '*c*n;\"*n"
    ],
    "rotation-summation": [
        "def f(a):l=len(a)-1;r=range(l+1);return[[a[i][j]+a[l-j][i]+a[l-i][l-j]+a[j][l-i]for j in r]for i in r]",
        "f=lambda x,k=-2:k*x or[map(sum,zip(*r))for r in zip(x,f(zip(*x)[::-1],k+1))]",
        "f=lambda*l:l[3:]and[map(sum,zip(*d))for d in zip(*l)]or f(zip(*l[0][::-1]),*l)"
    ],
    "shortest-power-set-implementation": [
        "P=[[]]\nfor i in input():P+=[s+[i]for s in P]\nfor s in P:print s",
        "def p(a,*v):\n i=0;print v\n for n in a:i+=1;p(a[i:],n,*v)\np(input())",
        "1,2,'hello'",
        "S=lambda A:A and[u+[A[0]]for u in S(A[1:])]+S(A[1:])or[[]]",
        "def f(s,p=[[]]):\n for e in s:\n  for u in p:p=p+[u+[e]]\n print p",
        "def f(x):\n    for i in reduce(lambda s,e:s+[i+[e] for i in s],x,[[]]):print i",
        "def p(a,v):\n if a:i,*a=a;p(a,v);p(a,v+[i])\n else:print v\np(input(),[])"
    ],
    "do-i-have-a-prime-twin": [
        "lambda n:sum((n+n%6-3)*n%k<1for k in range(2,4*n))==2",
        "lambda x:p(x)*(p(x-2)|p(x+2))\np=lambda z:(z>1)*all(z%i for i in range(2,z))"
    ],
    "it-almost-works-cops-thread": [
        "x=int(input())\nprint(x>1 and next(d for d in range(2,x+1)if x/d==x//d)==x)",
        "lambda x:next(d for d,_ in enumerate(iter(int,1),2)if x%d<1)==x",
        "I=int(input())\nL=I<2\nl=int('1ecvme02wjate5lzjhukn4elhetiycct0crct68uhrtiafbxxfcmvqjvz',36)\nwhile l:\n i=I;j=J=l&131071;_=1\n while j:\n  while~j%2:j>>=1;_*=1|-(i&7in(3,5))\n  j,i=i,j;_*=1|-(j&3==i&3>2);j%=i\n L+=pow(J,~-I>>1,I)!=(i<2)*_%I\n l>>=17\nprint(L<1)",
        "while 1:\n i=input()\n if 1583454170589139748634332997977758356543730781438558028881854463983253%ord((i+'e')[0]):print(i)",
        "lambda s:\" JFMAMJJASONDAEAPAUUUECOENBRRYNLGRTVC\"[int(s[4:])::12]+s[2:4]"
    ],
    "decode-the-chmod": [
        "i=0\ndef a(b):\n for d in 4,2,1:\n    if b&d:yield('Execute','Write','Read')[d/2]\nfor k in raw_input():\n b,q=list(a(int(k))),' and';e=len(b)\n if e:b[~e/2]+=(' only',q,q)[e-1]\n print'UGOsrteohrue:pr :s  :'[i::3],' '.join(b)or None;i+=1",
        "def f(i):\n r,w,a,x,o,g=\"Read \",\"Write \",\"and \",\"Execute \",\"only\",[\"User:  \",\"Group: \",\"Others:\"];p=[\"None\",x+o,w+o,w+a+x,r+o,r+a+x,r+a+w,r+w+a+x]\n for z in 0,1,2:print g[z],p[int(i[z])]",
        "a=input()\nr=range\nfor i in r(3):\n p=int(a[i]);x=[[\"Read\",\"Write\",\"Execute\"][j]for j in r(3)if 4>>j&p]\n if x[1:]:x[-1:-1]=\"and\",\n if len(x)==1:x+=\"only\",\n print([\"User:  \",\"Group: \",\"Others:\"][i],\" \".join(x)or\"None\")",
        "def d(n):a,b,c,d,e=' and ',' only',\"Execute\",\"Write\",\"Read\";l=[\"None\",c+b,d+b,d+a+c,e+b,e+a+c,e+a+d,e+\" \"+d+a+c];y,u,i=map(int,n);return\"User:   %s\\nGroup:  %s\\nOthers: %s\\n\"%(l[y],l[u],l[i])"
    ],
    "ascii-art-reflection": [
        "lambda s,r:'\\n'.join(s[::2*bool(r)-1].split('\\n')[::-1])",
        "lambda f,j:[print(r[::-1])for r in j[::[1,-1][f]].split('\\n')]"
    ],
    "find-the-next-1-sparse-binary-number": [
        "n=input()+1\nwhile'11'in bin(n):n+=1\nprint n",
        "f=input()+1\nwhile f&2*f:f+=1\nprint f",
        "f=lambda x:1+x&x/2and f(x+1)or-~x"
    ],
    "display-a-number-in-toki-pona": [
        "f=lambda n,b=1,l={1:'wan',2:'tu',5:'luka',20:'mute',100:'ale'}:n and(l[(a:=max(b for b in l if b<=n))]+' '+f(n-a,0))or'ala'*b",
        "def c(s):\n d,x={100:'ale',20:'mute',5:'luka',2:'tu',1:'wan'},''\n if s==0:x+='ala'\n else:\n  for i in d:\n   x+=s//i*(d[i]+' ')\n   s%=i\n print(x)",
        "def f(x):\n\tk=[[]]+[0]*x\n\tfor i in range(1,1+x):\n\t\tfor j,q in[[1,\"wan\"],[2,\"tu\"],[5,\"luka\"],[20,\"mute\"],[100,\"ale\"]]:\n\t\t\tif j<=i:p=k[i-j]+[q];k[i]=min(k[i]or p,p,key=len)\n\treturn k[x]or[\"ala\"]",
        "lambda n:n/100*'ale '+n/20%5*'mute '+n/5%4*'luka '+n%5/2*'tu '+n%5%2*'wan'or'ala'",
        "def f(n,p={100:'ale',20:'mute',5:'luka',2:'tu',1:'wan'},o=''):\n\twhile n:t=[i for i in p if i<=n][0];n-=t;o+=p[t]+' '\n\treturn o[:-1]or'ala'"
    ],
    "basic-sort-with-annoying-bug": [
        "lambda l:sorted(l,reverse=l[-9:]==[])",
        "lambda l:l[9:]and l.sort()"
    ],
    "row-row-row-your-boat": [
        "w=' '\ns=['-'*35]\nt=['Row, row, row your boat,'+w*11,'Gently down the stream.'+w*12,'Merrily,'+' merrily,'*3,'Life is but a dream.'+w*15]\nprint'\\n'.join(map('|'.join,zip(t+s*3,s+t+s+s,s+s+t+s,s*3+t)))",
        "w=[[\"-\"*35]*7for _ in[0]*4]\nfor i in [0]*4:w[i][i:i+4]=[a.ljust(35)for a in[\"Row, row, row your boat,\",\"Gently down the stream.\",\"Merrily,\"+\" merrily,\"*3,\"Life is but a dream.\"]]\nprint \"\\n\".join([\"|\".join(i)for i in zip(*w)])",
        "w=' '*11\nt=[\"Row, row, row your boat,\"+w,\"Gently down the stream. \"+w,\"Merrily,\"+\" merrily,\"*3,\"Life is but a dream.    \"+w,*['-'*35]*3]\nfor a in zip(*[t[z:]+t[:z]for z in range(7,3,-1)]):print(*a,sep='|')"
    ],
    "element-wise-string-multiplication": [
        "lambda*t:''.join(map(lambda x,y:chr((ord(x)-32)*(ord(y)-32)%95+32),*t))",
        "lambda x,y:''.join(chr((ord(i)-32)*(ord(j)-32)%95+32)for i,j in zip(x,y))",
        "lambda*l:''.join(chr((ord(i)-32)*(ord(j)-32)%95+32)for i,j in zip(*l))"
    ],
    "calculate-average-characters-of-string": [
        "a=[.0]+[ord(i)for i in raw_input()]\nprint\"\".join([chr(int(.5+(sum(a[:i+1])/i)))for i in range(1,len(a))])",
        "i=s=0\nr=''\nfor c in input():s+=ord(c);i+=1.;r+=chr(int(s/i+.5))\nprint r",
        "f=lambda s:s and f(s[:-1])+chr(int(sum(map(ord,s))*1./len(s)+.5))",
        "n=t=0\nfor c in input():n+=1;t+=ord(c);print(end=chr(int(.5+t/n)))"
    ],
    "convert-to-bibi-binary": [
        "f=lambda n:(n>15and f(n/16)or\"\")+\"HBKD\"[n/4%4]+\"OAEI\"[n%4]",
        "lambda n:''.join('HBKD'[int(x,16)/4]+'OAEI'[int(x,16)%4]for x in hex(n)[2:])"
    ],
    "consecutive-distance-rating": [
        "lambda l:sum(abs(l.index(x)-l.index(x+(x+1in l)))for x in l)",
        "def f(l):c=sorted(l);return sum(abs(l.index(x)-l.index(y))for x,y in zip(c,c[1:])if y-x==1)"
    ],
    "the-ultimate-inequality-challenge": [
        "a<b <=> a\u2271b",
        "lambda a,o,b:o%83*45%555%16%6+1>>cmp(a,b)+1&1",
        "lambda a,o,b:[a==b,a>b,a<=b,a>=b,a<=b,a>b,a<b,a!=b][o%61%9]",
        "lambda a,c,b:(cmp(a,b)+63)*c%1895%57&1"
    ],
    "counting-and-spelling-up": [
        "s=''\nfor c in raw_input():\n b=ord(c);e=b+1\n if c.isalnum():\n  b=max(b&96,47)+1\n for i in range(b,e):s+=chr(i)\nprint s",
        "lambda k:''.join([c,`map(chr,range(48+17*(c>'@')+32*(c>'`'),ord(c)+1))`[2::5]][c.isalnum()]for c in k)",
        "lambda s:''.join(map(chr,sum(map(lambda a,r=range:r(65,a+1)if 64<a<97else r(97,a+1)if 96<a<123else r(48,a+1)if 47<a<58else[a],map(ord,s)),[])))",
        "a=[]\nfor c in raw_input():d=ord(c);a+=range(max(d&96|1,48),d)*c.isalnum()+[d]\nprint bytearray(a)"
    ],
    "show-tree-rings-age": [
        "I=n=input()\nwhile I+n-1:I-=1;i=abs(I);w=(\"O*+\"*n)[i:n];print w[::-1]+w[0]*2*i+w[1:]",
        "n=input()\nR=range(1-n,n)\nfor i in R:print''.join('0*+'[max(i,-i,j,-j)%3]for j in R)",
        "def l(x,c=1):\n p=\"\\n\\x1b[%d\"%c;d=p+\";%dH\"%c\n if x:s=x*2-1;d+=(p+\"G\").join([\"0*+\"[(x+1)%3]*s]*s)+l(x-1,c+1)\n return d\nprint l(input())"
    ],
    "quineoid-triple-ab-c": [
        "lambda x:x.replace(x[-4],`int(x[-4])^1`)#\nlambda x:x.replace(x[-4],`int(x[-4])^2`)#\nlambda x:x.replace(x[-4],`int(x[-4])^3`)#",
        "x=raw_input();print x.replace(x[48],`int(x[48])^1`)\nx=raw_input();print x.replace(x[48],`int(x[48])^2`)\nx=raw_input();print x.replace(x[48],`int(x[48])^3`)",
        "a=3-2-1//True;a=str(a);alert,eval,prompt=print,exec,input;String=JSON=__builtins__;JSON.stringify=repr;JSON.fromCharCode=chr\ns=String.fromCharCode;j=JSON.stringify;r=\"t='tr '+s(48)+s(49)+' '+s(49)+s(48)\";eval(r);d=\"alert([t,'a=3-2-'+a+'//True;a=str(a);alert,eval,prompt=print,exec,input;String=JSON=__builtins__;JSON.stringify=repr;JSON.fromCharCode=chr\\\\ns=String.fromCharCode;j=JSON.stringify;r='+j(r)+';eval(r);d='+j(d)+';eval(d)'][+(prompt()[2]<s(33))])\";eval(d)"
    ],
    "coat-of-many-colours": [
        "lambda r:sorted(r,key=lambda s:'iV^ZzwnFM@pYuOobXGAKyf[tUR]E'.find(chr(int(s,36)%127%60+64)))",
        "lambda a:[y for x,y in sorted((max(\" y gree br sc bla oc pe rub ol v f li go ch m cre cri si ro a le rus grey pu w pi or blu \".find(\" %s \"%c[:i+1])for i,j in enumerate(c)),c)for c in a)]",
        "lambda*a:sorted(a,key=lambda c:(\"r,ylgebwsrtbcorpcryovvlfnlagdccamvca cmnsvrearlorsgyppwtpkonbe\".find(c[::3]+\" \"*(c==\"cream\")),c))"
    ],
    "bit-reversal-permutations": [
        "lambda n:[int(bin(i+2**n)[:1:-1],2)//2for i in range(2**n)]",
        "f=lambda n:[0][n:]or[i+j*2for i in 0,1for j in f(n-1)]"
    ],
    "sum-or-difference-of-two-powers-of-two": [
        "def f(k):b=bin(k)[::-1];return len(b)-2-(b.count('1')==2),b.find('1')",
        "lambda n:[len(bin((n&-n)+k))-3for k in n,0]"
    ],
    "this-highway-needs-rain-across-both-of-its-lanes": [
        "def g(x):\n for _ in x[0]:x=[''.join([q,'\\\\'][q<'!'and(x[a-1][b]>'['or'\\\\'in r[b-1]+r[-~b%len(r)])]for(b,q)in enumerate(x[a]))for(a,r)in enumerate(x)]\n return x",
        "lambda r:reduce(lambda r,c:[''.join(l[::-1]).replace(c+' ',c+'\\\\')for l in zip(*r)],r'|\\|\\\\\\\\:'*len(`r`),r)"
    ],
    "is-it-an-ovsf-code": [
        "f=lambda l:[]<l[1::2]==[x*l[1]for x in l[::2]]*f(l[::2])or[1]==l",
        "def f(x):l=len(x)/2;return[n*x[l]*f(x[:l])for n in x[l:]]==x[:l]>[]or[1]==x"
    ],
    "does-the-sum-of-2-numbers-in-the-list-equal-the-desired-sum": [
        "lambda a,b:any(b-a.pop()in a for x in a*1)",
        "f=lambda a,b,*c:a-b in c or c and f(a,*c)"
    ],
    "right-align-text": [
        "s,n=input();N='\\n'\nfor w in[i.lstrip()if i.replace(' ','').isalpha()else i for i in s.replace(N,'\\n ').split(N)]:\n while w:print w[:n].rjust(n);w=w[n:]",
        "s,n=input()\nfor w in s.split('\\n'):\n w=w or' '\n while w:print w[:n].rjust(n);w=w[n:]"
    ],
    "how-many-carries-do-i-need-to-add-these-two-numbers": [
        "f=lambda a,b,m=1:m<1e99and(~a%m<b%m)+f(a,b,m*10)",
        "f=lambda a,b,c=0:c+a+b and c+f(a/10,b/10,a%10+b%10+c>9)"
    ],
    "how-many-peaks-in-my-mountain-range": [
        "f=lambda a,*b,p=0:(p<a>[*b,0][0])+(len(b)and f(*b,p=[p,a][a!=b[0]]))",
        "def m(t):\n a=p=d=0\n for n in t+[0]:a+=(n<p)&d;d=((n==p)&d)+(n>p);p=n\n return a"
    ],
    "find-the-sum-of-all-possible-base-representations": [
        "def f(s):\n t=0\n for x in range(37):\n  n=0\n  for i in s:\n   try:m=int(i)\n   except:m=ord(i)-55\n   if x<=m:n=0;break\n   n=n*x+m\n  t+=n\n return t",
        "N=x=0\ny=input()\nwhile N<36:\n N+=1\n try:x+=int(y,N)\n except:0\nprint(x)"
    ],
    "ascii-rhombic-grid": [
        "m,n,s,r=input()\nl=~-s*' '+'/'*(r-~r)+~-s*' '\nfor x in range(n*2):print'\\n'.join(m*(l[i:i+s+r]+l.replace(*'/\\\\')[i:i+s+r][::-1])for i in range(r+s))[::1-x%2*2]",
        "def f(m,n,s,r):Z=range(s+r);R=[r-~min(i,s+~i+r,min(s-1,r))for i in Z];L=[m*(' '*(s+~i)+'/'*R[i]+'  '*(i-r)+'\\\\'*R[i]+' '*(s+~i))for i in Z];print'\\n'.join((L+[l[s+r:]+l[:s+r]for l in L])*n)"
    ],
    "the-solar-eclipse-through-a-pinhole-camera": [
        "def f(x,k=0):exec'print\"\".join(ord(i)*\" *\"[j%2]for j,i in enumerate([\"\u0003\u0005\u0004\u0002\u0005\u0002\u0001\u0001\t\u0002\t\u0003\u0007\u0002\u0002\u0007\u0002\",\"\u0003\u0005\u0004\u0002\u0002\u0005\u0001\u0001\u0003\b\u0003\t\u0003\u0006\u0002\u0007\u0002\",\"\u0003\u0005\u0004\t\u0001!\u0002\u0007\u0002\",\"\u0003\u0005\u0004\u0005\u0002\u0002\u0001\u0007\u0003\b\u0003\u0007\u0003\u0002\u0002\u0007\u0002\"][x%4]))[11*k:][:11];k+=1;'*6",
        "lambda n,u=u' *':u'''   *****\n **\u0003\u0003\u0002\u0001\u0001**\n*\u0003\u0003\u0003\u0002\u0002\u0002\u0001\u0001\u0001*\n*\u0003\u0003\u0003\u0002\u0002\u0002\u0001\u0001\u0001*\n**\u0003\u0003\u0003\u0002\u0001\u0001\u0001**\n  *******'''.translate({1:u[0<n<3],2:u[0<n<4],3:u[1<n<4]})",
        "lambda n,s=' ',a='*':\"\"\"   *****\n **%s**\n*%s*\n*%s*\n**%s**\n  *******\"\"\"%[(s*5,s*9,s*9,s*7),(s*2+a*3,s*3+a*6,s*3+a*6,s*3+a*4),(a*5,a*9,a*9,a*7),(a*3+s*2,a*6+s*3,a*6+s*3,a*4+s*3)][n%4]"
    ],
    "somewhere-on-the-tube-but-on-which-lines": [
        "lambda I,p=\"Woods|Woodf|Wood L|Wo|Wimbledon |Wim|Willesden J|Wi|Whitec|Wh|Westm|Westb|West R|West K|West Har|West Hamp|West H|West F|West B|Wes|Wembley P|We|Watf|Wat|Warw|War|Wan|W|Vi|V|Ux|Upt|Upn|Upminster |U|Turnp|Tur|Tu|Tow|Totter|Tottenham H|Tot|Tooting Br|To|Th|T|Sw|Sudbury T|Su|Str|Ston|Sto|Ste|Stan|Sta|St. P|St. Jo|St|Southw|Southg|Southf|South Wo|South W|South R|South Kent|South K|South H|So|Sn|Sl|Shepherd's Bush |Sh|S|Rus|Ruislip M|Ruislip |Ru|Roy|Ro|Rick|Ri|Reg|Re|Ray|R|Queensw|Queens|Q|Pu|Pr|Pl|Pin|Pim|Pi|Pe|Pars|Par|P|Ox|Ov|Os|Ol|O|Not|Northwood |Northwo|Northw|Northo|Northf|North W|North H|North G|North E|No|New|N|Morn|Mor|Moorg|Moo|Mo|Mill|Mi|Mary|Mar|Mans|Man|M|Lou|Lo|Li|Leytons|Ley|Le|Lat|Lan|Lam|L|Kn|Kings|Kin|Kilburn |Ki|Kew|Kento|Kent|Kensi|Kens|K|I|Hy|Hounslow W|Hounslow E|Hou|Hor|Hollo|Holl|Ho|Hil|Highg|Highb|High S|Hi|Hen|Heathrow Terminals|Heathrow Terminal 5|He|Hat|Harrow-|Harr|Har|Han|Hamp|Ham|H|Gu|Greenf|Gree|Gre|Gr|Goo|Goldh|Go|Gl|G|Fu|Fins|Finchley R|Fi|Far|F|Euston |Eu|Ep|Em|Elm|El|Edgware |Ed|Eastc|East P|East H|East F|Eas|Ear|Ealing C|E|Do|De|Dagenham H|D|Cr|Cov|Coll|Col|Co|Clapham S|Clapham N|Cl|Cho|Chis|Chi|Che|Char|Chan|Chalk|Ch|Cano|Canno|Cann|Canar|Can|Cam|C|Bur|Bu|Bro|Bri|Br|Bow|Bou|Bos|Bor|Bo|Blackh|Bl|Bet|Ber|Bel|Be|Bay|Baro|Barkings|Bark|Bar|Ban|Bal|B|Ars|Arn|Ar|An|Am|Alp|Aldgate |Al|\".split('|'):[j for i,j in enumerate('District|Piccadilly|Northern|Central|Circle|Metropolitan|Hammersmith & City|Jubilee|Bakerloo|Victoria|Waterloo & City'.split('|'))if[int(x,35)for x in'4 8 2A 2 1 1 7B 3N 1U 8 45 2A 8 1 W 3N 5I 4 1 8 4K 7B W 15C 7B EQ 8 EM F4 EM Y 1U 1 1 1 2 3 4 H 4 EM C 4 4 8 H 3N 2 2 3V 7B EQ 1U 3N 1 8 3N H 3N 2 1 8 4 8 7B J 2 2 8 H 2A 8 EM 2 Y 8 Y 2A 8 W 1 7B 8 Y 1 8 3N 7B 1 W 1U W EM 7D 8 1 2 9M M6 4 2 4 2 P W W W 8 2 7B W 3N 2 8 8 3N 4 4 3B W H 4 23 7B 8 H 2 7B 8 3R 3F 8 8 6 2A 8 7B 2A 2 3N I0 7B 3N 1 7B 4 1 7B 4 Y 2 2 2 2 1 2 8 A Y 4 EM H 4 4 2 2 2 2 W 7B 7B 8 4 2D 8 1 8 IC 37 8 4 2A 4 J 8 1 EO 4K 4 37 8 37 EQ 8 7W 1 7F 9M 4 Y 1 1U 4 8 3 3 9 3N 8 1 1 W 2 4 4 2 4 4 4 W 1 8 W 7F 8 4 W 3N H 3N 3N 3N 4 2 4 8 1U EM 4 1U 2 2 4 3V EM H 8 3N 4 1 H 3 8 1U 37 TL 4 E6 2 2 4 4 W 2 1U 1D 3'.split()][p.index([x for x in p if I.find(x)==0][0])]&2**i]",
        "n=i=0\nfor e in(input()+' '*26)[:26]:n=n*256+ord(e)\nw=bin(n)[2:]\nfor j in'Bakerloo,Central,Circle,District,Hammersmith & City,Jubilee,Metropolitan,Northern,Piccadilly,Victoria,Waterloo & City'.split(','):\n for z,o in eval('eJxNVclxAzEMa4gPHdRVi8f9txEApOQ8MhNrtSQAgtjP5/Op3fq0cWw3O8dqbV/7TLfVbO8v/v/UZq3ZWrbdTsEJ7k+PR3jZbU471WpZeHvguLZyn9ZtbVpb7w7fr25joUFcOtaOebOx8ZhXHMej23gt0B2/J8/7V4dqvKxvmzVQT6udFxzYju6gbbG1o5+jZbIpxpbVvJNyLQenq9gu+RYu9IIiqCsuLNO7+bbVdQVscAGNTqdUkGZEZSdXMEFl9cUP/0EZ1UYDC3YCTr9oSIJykzWg6XioUqcmGyK2GSzYFtBGitApLMXDxaK7w47H1day0CCSTgGTIeF7wtwsTH5v0n3YXHb4EmrmmHsOEe/RK5tXFnoR8xuSHtNHnUapnSwhM6Wrt9DxS6bfylIKXTkhzA4qr0vPOWMyOxzHTsEHFfMA3GbYBn+NxOfATB/LRZZS+x9FcYlZQK54VSqswCl5hYxjpIO4B3iO2T1Ne0Jp18WEWDVymksOGi3rEG4Tj5r8VM1jHHyEzQOMMHjnFqQCmO0I7y8ZUgY3wJ/xKv7FGKC2ELJnumoSXf1NLxasSsPKLeXGRDeQxjLOcplgJbTv0IOOkqq5znoFvicVRMG8groALmftMwPJ2ncMbecAL3GWS/+iGCUGnFY02hH+hxnW0AEclIsLEtzLTRLiu8o9X6TFvuv1nXeJNdtjcljIMeQMDVeKDo1KiMAB9qVE8oTa03rlrgdlJJlgAmqpDVXpAtdieUDALxKwSaLzmm1bfw7gD9yQrYbIRAjDSWlz7nPleiyZOTTqsfIz1jAn6T91YyEx2LkiElAPVrwpwGiukhQ9q1O+X8R1OiLC7TSltkyuQELiYto7gt4YxP0G+ZiRelnEiS4+CVOJO/6FOgNI2wvNl8SuP2CYEVdUejDhuRRK8nPJTSVVfXmH2oSfHi4ZiG9W+67jYIJxaUaOYd3ATTyRRuOXIjGaFnPxcHdOLhQFChoQctYSEdBfPvFrcnaiR535vqr6JlDnmt8gD5/9kt31WZ47I6w9rE1T3fk1Zcaul01dqSb/NIFLINVif7Q5ir/bauccZuwCv93f7x8/H97i'.decode('base64').decode('zip'))[i]:\n\tif all([w[k]<'1'for k in z]+[w[k]>'0'for k in o]):print j\n i+=1"
    ],
    "thanksgiving-feast": [
        "lambda w,d,n:[min(e)+-min(-w/3,-d/4,-(w+d+n)/7)*e.center(18)for e in\"  .---.   _\",\" .'     './ )\",\"/   _   _/ /\\\\\",\"=(_____) (__/_/==\",\"=\"*18]",
        "a,b,c=input()\nfor i in range(5):print'='[i<4:]+(' '+\"   =   (  /_ . _ ' _.  _- __-  )-   .  ( '__ ./_ / /_ /_ )\\\\/   =   =\"[i::4],'='*18)[i>3]*max((6+c+a+b)/7,a+3>>2,(b+2)/3)"
    ],
    "convert-to-and-from-the-factorial-number-system": [
        "i=raw_input()\nexec(\"b='';a=362880;j=int(i);x=9;\"+'b+=`j//a`;j%=a;a/=x;x-=1;'*9,\"a=x=1;b=0;\"+'b+=a*int(i[-x]);x+=1;a*=x;'*~-len(i))['!'in i]\nprint int(b)",
        "A=[`x`for x in xrange(10**9)if all(x/10**d%10<d+2 for d in range(9))]\ni=raw_input()\nprint A.index(i[1:])if'!'in i else A[int(i)]"
    ],
    "valid-badminton-score": [
        "lambda a,b:[61>60-a>b<3+max(19,a)for b in-~b,b]",
        "lambda a,b:(b-61<~a<a>b/22*b-3)*~(19<b-(b<30)>a)"
    ],
    "hook-length-product": [
        "f=lambda z:z==[]or(z[0]+len(z)-1)*f([i-1for i in z if~-i])\np=lambda z:z==[]or f(z)*p(z[1:])",
        "p=j=-1;d={}\nfor n in input():j+=1;i=0;exec\"a=d[i]=d.get(i,j);p*=n-i+j-a;i+=1;\"*n\nprint-p",
        "r=input()\nc=[-1]*r[0]\nfor a in r:\n for b in range(a):c[b]+=1\ns=1\ny=0\nfor a in r:\n for x in range(a):s*=a-x+c[x]-y\n y+=1\nprint s"
    ],
    "spell-out-numbers-in-french": [
        "z\u00e9ro\nun\ndeux\ntrois\nquatre\ncinq\n...\ncent",
        "r=range\ndef f(a):b=a/60*10+10;d[a]=d[a-a%b]+(' et ','-')[a%10!=1or a>80]+d[a%b]\nd=dict(zip(r(17)+r(20,70,10)+[80,100],'z\u00e9ro un deux trois quatre cinq six sept huit neuf dix onze douze treize quatorze quinze seize vingt trente quarante cinquante soixante quatre-vingt cent'.split()))\n[f(v)for v in r(100)if(v in d)<1]\nd[80]+='s'\nprint d[input()]",
        "a='_un_deux_trois_quatre_cinq_six_sept_huit_neuf_dix_onze_douze_treize_quatorze_quinze_seize_dix-sept_dix-huit_dix-neut'.split('_')\na+=[[['vingt','trente'],['quarante','cinquante'],['soixante']*2,[a[4]+'-vingt']*2][b][c>9]+['','-',' et '][(c%[10,20][b>1]>0)+(c%10==1)*(b<3)]+a[c%[10,20][b>1]]for b in[0,1,2,3]for c in range(20)]\na[0]='z\u00e9ro'\na[80]+='s'\na+=['cent']\nprint(a[int(input())])"
    ],
    "primenary-strings": [
        "r=range\nn=[format(ord(c),\"08b\")for c in input()]\nn=map(lambda s:s.count(\"1\"),n+[\"\".join([f[1]for f in filter(lambda e:e[0]%8<1,enumerate(\"X\"*-~i+\"\".join(n)))][1:])for i in r(8)])\nprint(all(all(s%d for d in r(2,s))for s in n))",
        "def p(s):n=s.count('1');return(n>1)*all(n%i for i in range(2,n))\ndef f(s):t=[f'{ord(c):07b}'for c in s];return all(map(p,t+[[u[j]for u in t]for j in range(7)]))"
    ],
    "unfurl-a-string": [
        "a=input()\nwhile 1:print'\\n'.join(a);b=map(''.join,zip(*map(str.strip,a[-2::-1])));a[-1]+=b.pop();a[:-1]=[len(a[0])*' '+x for x in b]",
        "s=input();l=len;k=''.join;exec\"print s;s=[x for x in[' '*l(s[0])+k(x[:-1]for x in s[-2::-1])[t::l(s[0])-1]for t in range(l(s[0]))][:-1]+[s[-1]+k(x[-1]for x in s)[-2::-1]]if x.strip()];\"*(2*l(s)-1)"
    ],
    "scale-up-a-diamond-tiling": [
        "b,f,s='\\/ '\nR=str.replace\ndef m(g,n,z=1):\n for d in g.split('\\n'):\n    for i in range(z):a=z+~i;print[i,a][d[-1]>f]*s+R(R(R(R(d,s,s*n),'_','_ '[i<z-1]*(z+n-1)),f+b,f+s*2*i+b),b+f,b+s*2*a+f);z=n",
        "def g(s,n,j=1):\n for W in s.split(\"\\n\"):exec\"O=p='';d=0\\nfor c in W:q=' _'[j*'_'in p+c];e=[n-j,j-1][c=='/'];O+=q*(e+d)+[c,q][c>'^'];p=c;d=n+~e\\nprint O;j-=1;\"*j;j=n",
        "s,u,f,b=' _/\\\\'\nr=str.replace\ndef d(t,n,j=1):\n for p in t.split('\\n'):\n  for k in range(n-j,n):m,v=n+~k,'_ '[k<n-1];print r(r(r(r(r(r(r(r(p,f+u,'(_'),u+b,'_)'),s,s*n),u,v*n),f,s*m+f+s*k),'(',v*m+f+v*k),b,s*k+b+s*m),')',v*k+b+v*m).rstrip();j=n"
    ],
    "seqindignot-sequence": [
        "a=()\ni=0\nexec\"x=0\\nwhile set(`x`)&set(`i`)or x in a:x+=1\\na+=x,;i+=1;\"*-~input()\nprint a",
        "o=1,\nfor i in range(int(input())):\n x=0\n while{*str(x),x}&{*str(~i),*o}:x+=1\n o+=x,\nprint(o)"
    ],
    "triangular-manhattan-distance": [
        "lambda c,a,d,b:abs(a-b)+abs(a+(-c-a)/2-b-(-d-b)/2)+abs((c+a)/2-(d+b)/2)",
        "lambda x,y,X,Y:abs(y-Y)+max(x-X,X-x,abs(y-Y)+((x+y+X+Y)%-2)**(x^y^(Y>=y)))"
    ],
    "collapse-the-antistring": [
        "def f(s):\n L=len(s)\n for x,y in[(i,i+j)for j in range(L,1,-1)for i in range(L-j)]:\n\tt=s[x:y];T=t.swapcase()\n\tif T in s[y:]:return f(s.replace(t,t[0],1).replace(T,T[0],1))\n return s",
        "f=lambda s,x=set():any(u in s[j+i:]and(x.add(s[:j+1]+s[j+i:].replace(u,u[0],1))or 1)for i in range(len(s),1,-1)for j in range(len(s))for u in[s[j:j+i].swapcase()])and f(x.pop())or s"
    ],
    "help-pannenkoek-count-a-presses": [
        "lambda a:sum(1/y|x/3for x,y in zip([3]+a,a))",
        "f=lambda a,*l:l==()or(a>l[0]or l[0]==a!=1)+f(*l)"
    ],
    "mad-libs-number-sequences": [
        "a,b,c,n=input();\ni=0;x=k=1\nwhile[n,i<n,i<=n][a]|1-x:i,k=[k,k+i,i+3][b],k+(b or i);s=`i`;x=[s[0]==s[-1],sorted(s)==list(s),not'1'in s][c];n-=x>a\nprint[i,i==n][a%2]",
        "def f(a,b,c,n):\n u=i=l=0;v=b&2|1\n while(i<n,l<n,l<=n)[a]:\n  u,v=v,[u+v,2*v-u+1,v+3][b];s=str(u)\n  if(s[0]==s[-1],[*s]==sorted(s),not'1'in s)[c]:l=u;i+=1\n return(l,l==n)[a%2]",
        "def f(a,b,c,n):\n j=i=l=x=0;y=1\n while(i<n,l<n,l<=n)[a]:\n  j+=1;x,y=y,x+y;p=(x,j*-~j//2,3*j)[b];s=str(p)\n  if(s[0]==s[-1],[*s]==sorted(s),not'1'in s)[c]:l=p;i+=1\n return(l,l==n)[a%2]"
    ],
    "four-steps-to-the-left-vipers-four-steps-to-the-right-a-cliff-dont-die": [
        "n=0\nfor x in\"eJytVU2LwyAQPWzTvZjjspcsxFYTBdNuQSEF+///1jp+p5o0hYVSBl9nfOObNz1MlAgqzMcEEwQkDyIkFpDYCW0UnChbyZJiK2sfhDcYmu9hT0GdIPQvLduAmoCvvqEssvq84CVCpLzrNcOOspLhY6/KswB6FmoSxGPBcWts7lsMp/0q83da1hgC6k7GoqBir1ruAFIVvWIdTi++oGIAyZw8mkuG03uDDc+rEsSWTmFBwbLgtTF8hl1e/lpCigR7+pM5V9lIqVJBjStzKNRRQDp6UOrvwga6VFrGcWz6YHwLNYWUYeZfWO/DQTq7i4dAxixeszmtFEw7Cr5v9R3lRVF55TDzY6QRrSfzF9NLE7lAZ+vLnGgYLZ/FlCuoRcOugeFduHTqRWmyh1J91XpIndIbEk8jifL8hs8qQ8vjAVoGqhK5Tm/O5svpXd82QH4Azq05kYnhj93PzLbcTisFzXWfDqIC5zsq3jU7UUhSh1R3L4+i4HCXKlrGyywSBttPr2zpL4gCDPtk2HPN5tgZFomzSDPfGAlASus+e4KlLcjS0vPQ0f5/mR/r1s4PcxsgMLRSMp617AveCuup2OCAPBT6yltWrPO9azsbp6fphR87Lc7VzcbEt5F4Ydg/NzhXTA==\".decode(\"base64\").decode(\"zip\"):n=n*64+ord(x)\nprint bin(n)[2:input()+2]",
        "n=input();r=len;u=[(\"\",[0]*(n//4))]\nwhile n>r(u[-1][0]):\n y,t=u.pop()\n for c in 0,1:\n  s=t[:];u+=(y+\"LR\"[c],s),\n  for i in range(r(s)):\n   if-~r(y)//-~i*-~i==-~r(y):s[i]+=2*c-1;\n   if abs(s[i])>3:u.pop();break;\nprint(u[-1][0])"
    ],
    "reciprocal-of-a-number-1-x": [
        "lambda x:1/x",
        "print'%.4f'%(1.0/input())",
        "1..__div__"
    ],
    "multiply-two-numbers": [
        "lambda x,y:x*y",
        "int.__mul__",
        "lambda a,b:a*b"
    ],
    "write-a-hello-interpreter": [
        "lambda x:(x=='h'*len(x))*len(x)*'Hello World'or'err'",
        "lambda a:a=='h'*len(a)and'Hello World'*len(a)or'err'",
        "lambda s:s and s==\"h\"*len(s)and\"Hello World\"*len(s)or\"err\"",
        "lambda s:{*s}-{'h'}and'err'or'Hello World'*len(s)"
    ],
    "is-it-a-whole-number": [
        "print(\"1\")if float(input())%1==0else print(\"0\")",
        "lambda n:n%1==0<=n",
        "lambda n:n>=0==n%1",
        "_=_%(_==_)==(_!=_)<=_"
    ],
    "rotate-brackets-until-theyre-balanced": [
        "f=lambda s,t=1:s*all((t:=t+n)for n in s)or f(s[1:]+s[:1])",
        "[n:=range(l:=len(s)),next(r for i in n if [r:=(2*s)[i:i+l],min(sum(\"]-[\".index(c)-1 for c in r[:p]) for p in n)][1]>=0)][1]",
        "f=lambda a:min(sum(a[:i])for i in range(len(a)))<0and f([a.pop()]+a)or a",
        "def f(s):\n try:exec s.replace(')','),');print s\n except:f(s[1:]+s[0])",
        "lambda a:min((sum(a[:i]),a[i:]+a[:i])for i in range(len(a)))[1]"
    ],
    "codegolf-heads-or-tails": [
        "print'-1'['t'>i:]",
        "print(i<'t')*2-1",
        "print(('h'in i)*2-1)"
    ],
    "the-non-zero-digital-product-challenge": [
        "lambda n:eval('*'.join(`n`.replace(*'01')))",
        "f=lambda n,v=1:n and f(n/10,n%10*v or v)or v",
        "f=lambda n:n<1or(n%10or 1)*f(n/10)"
    ],
    "implement-lazy-drop-sort": [
        "lambda a:[v for v,w in zip(a,[1]+a)if v/w]",
        "f=lambda h,*t:t and h+f(*t)[h>t[0]:]or h",
        "f=lambda s:s and f(s[:-1])+s[-1]*(s[-2:]<s[-1]*3)"
    ],
    "iterated-partial-sums": [
        "f=lambda l,n:f([sum(l[:i+1])for i in range(len(l))],n-1)if n else l",
        "f=lambda l,n:n*l and f(f(l[:-1],1)+[sum(l)],n-1)or l",
        "def f(n,i):\n p=0;c=[]\n for m in n:p+=m;c+=[p]\n f(c,i-1)if i else print(n)",
        "def f(l,n):\n for i in[0]*n:l=[sum(l[:j+1])for j in range(len(l))];\n print(l)"
    ],
    "as-programmers-say-strive-to-be-lazy": [
        "w,i=input(),0\nwhile~i:m=w.split();m[i]='\"%s\"'%m[i];print(*m);i+=1",
        "def f(s):\n W=s.split();n=len(W)\n for x in range(n*n):print[W[x%n],'\"'+W[x%n]+'\"'][x%-~n==0]+'\\n'*(x%n==n-1),"
    ],
    "remove-all-occurrences-of-the-first-letter-of-a-string-from-the-entire-string": [
        "lambda x:\"\".join(map(lambda y:(y.lower()!=x[0].lower())*y,x))",
        "lambda s:s.translate(None,(s[0]*2).title())",
        "a=raw_input()\nprint a.replace(a[0],'').replace(a[0].swapcase(),'')"
    ],
    "ordering-a-list": [
        "def f(x):x=zip(x,range(len(x)));print map(sorted(x).index,x)",
        "a=input()\np=[]\nfor x in a:print sorted(a).index(x)+p.count(x);p+=x,"
    ],
    "sort-and-table-a-sentence-by-word-lengths": [
        "lambda s:dict(sorted((len(x),list(filter(lambda y:len(y)==len(x),s)))for x in s))",
        "lambda a:sorted((l,[d for d in a if len(d)==l])for l in set(map(len,a)))"
    ],
    "alphabet-to-number-and-number-to-alphabet": [
        "lambda x:x>''and 64^ord(x)or chr(64^x)",
        "lambda x:x!=str(x)and chr(64|x)or ord(x)^64",
        "lambda x:chr(x+64)if`x`[0]>\"(\"else ord(x)-64",
        "i=raw_input()\ntry:o=chr(int(i)+64)\nexcept:o=ord(i)-64\nprint o",
        "isalpha"
    ],
    "mirror-mirror-in-the-code": [
        "lambda d,m,x='NESW'*2:x[x.find(d)+2*(m=='/\\\\'[d in'NS'])-1]",
        "lambda c,m,k=\"NWES\":k[k.find(c)^(m>k)+1]",
        "(ord(d)+ord(m))%8"
    ],
    "keep-nonzeros-and-their-neighbours": [
        "f=lambda l,*p:l and l[:any(l[:2]+p)]+f(l[1:],l[0])",
        "lambda s:[t[1]for t in zip([0]+s,s,s[1:]+[0])if any(t)]"
    ],
    "is-my-name-official": [
        "lambda s:s.isalpha()*s.istitle()*len(s)>1",
        "lambda s:len(s)>1==s.isalpha()<s==s.title()"
    ],
    "primes-with-prime-bit-counts": [
        "p=lambda n:all(n%m for m in range(2,n))*n>1\nlambda n:[i for i in range(n+1)if p(i)*all(p(bin(i)[2:].count(x))for x in'01')]",
        "k=m=1;p={0}\nexec\"p^={m%k*k,0};c=bin(k).count\\nif{k,c('1'),c('0')-1}<p:print k\\nm*=k*k;k+=1;\"*input()",
        "def f(n,k=2,m=1,p={0}):f(n-1,k+1,m*k*k,p^{m%k*k,{*map(bin(m%k%n*k)[2:].count,'01')}<p==print(k)})",
        "p=lambda n:[i for i in range(1,n)if n%i==0]==[1]\nlambda n:[i for i in range(n+1)if p(i)*all(p(bin(i)[2:].count(x))for x in'10')]"
    ],
    "euro-coins-and-notes": [
        "print[('%.2f'%(10**(x/3-2)*(5>>~x%3))).replace(*'.,')for x in range(15)]",
        "print[('%.2f'%(v*m)).replace(*'.,')for m in.01,.1,1,10,100for v in 1,2,5]"
    ],
    "the-dragon-curve-sequence": [
        "lambda n:n&-n&n/2<1",
        "lambda n:n&2*(n&-n)<1"
    ],
    "substring-sum-set": [
        "lambda X:[sum(X[i:i+k])for i,k in enumerate(X)]",
        "f=lambda x:x and[sum(x[:x[0]])]+f(x[1:])"
    ],
    "is-it-a-super-prime": [
        "p=lambda m:(m>1)*all(m%x for x in range(2,m))\nf=lambda n:p(n)*p(len([*filter(p,range(n+1))]))",
        "n=input()\ns={2};p=i=1\nwhile i<n:\n p*=i;i+=1\n if p*p%i:s|={i}\nprint{n,len(s)}<=s",
        "def a(n):\n r=[2];x=2\n while x<n:x+=1;r+=[x]*all(x%i for i in r)\n return{n,len(r)}<=set(r)"
    ],
    "triangular-dependencies": [
        "lambda n:min(x for x in i(n)if n+x in i(n))\ni=lambda n:[i*-~i/2for i in range(n)]",
        "lambda n:min((r-2*n/r)**2/8for r in range(1,2*n,2)if n%r<1)",
        "f=lambda n,k=1:(8*n+1)**.5%1and f(n+k,k+1)+k",
        "f=lambda n,R=[1]:n-sum(R)and f(n,[R+[R[-1]+1],R[1:]][sum(R)>n])or sum(range(R[0]))"
    ],
    "converting-0xusernames": [
        "a=input()\ntry:exec'a=0x1'+a\nexcept:1\nprint a",
        "n=input()\ntry:n=int(\"1\"+n,16)\nexcept:1\nprint n"
    ],
    "help-me-pair-my-socks": [
        "lambda s:{*((c,(d:=s.count)(c)//2)for c in s),*(c for c in s if d(c)%2)}",
        "(<pairs of socks>, <1 if a sock remains; 0 otherwise>)",
        "lambda A:({v:A.count(v)/2for v in A},{v for v in A if A.count(v)%2})",
        "lambda s:sum([[(c,(d:=s.count(c))//2)]+d%2*[c]for c in{*s}],[])"
    ],
    "make-a-somewhat-self-referential-string": [
        "def f(n):i=l=len(`n`);s='';exec n/l*\"s+=`i`.zfill(l);i+=l;\";print s",
        "def f(n):l=len(`n`);print'%%0%dd'%l*(n/l)%tuple(range(l,n+1,l))"
    ],
    "file-permissions": [
        "lambda a,*b:[a,'-'][a=='f']+''.join('-r'[x/4]+'-w-w'[x/2]+'-x'[x%2]for x in b)",
        "lambda a,*b,k='-xw-r':f'{a}-'[a=='f']+''.join(k[x&4]+k[x&2]+k[x&1]for x in b)",
        "lambda m,r=str.replace,s=str.split,j=\"\".join,b=bin,i=int,z=str.zfill,g=lambda h,y:y if int(h)else \"-\":r(m[0],\"f\",\"-\")+j(j([g(z(s(b(i(x)),\"b\")[1],3)[0],\"r\"),g(z(s(b(i(x)),\"b\")[1],3)[1],\"w\"),g(z(s(b(i(x)),\"b\")[1],3)[2],\"x\")])for x in m[1:])"
    ],
    "mandoline-quine": [
        "00;\"#\";print(open(__file__).read())\n0#;XpXrXiXnXtX(XoXpXeXnX(X_X_XfXiXlXeX_X_X)X.XrXeXaXdX(X)X)",
        "s =\"'psr=i%nrt;(p'rsi n=t%(rs;%e%xse)c;(xsc[s11:::22  ']; p)r'i%nst)(#s#%#s#)\";exec(s[1:: 2] )"
    ],
    "logo-pack-lapack": [
        "s,a,i=\"0\"*19+bin(0x208200090824009002402)[2:],list(\"L  A  P  A  C  K\\n\"*6),0\nfor c in s:\n\tif(int(c)):a[i]=\"-\"\n\ti+=1\nprint \"\".join(a)",
        "print\"L %sA %sP %sA %sC %sK\\n\"*6%tuple('     - - -   --- -'+'-  -'*3)",
        "i=0\nfor c in'LAPACK'*6:print' -'[chr(i+33)in'(*,12467;<@AD']*(c!='L')+c+'\\n'*(c=='K'),;i+=1",
        "s='LAPACK';e=enumerate\nfor i,_ in e(s):print(*[' -'[(j%2+i%2==2)^(i//2+j//2==3)]*(j!=0)+k for j,k in e(s)])"
    ],
    "write-a-domino-effect": [
        "def k(n,p,d):c,r='\\/'[d],n-p;return[c*p+'|'*r,'|'*p+c*r][d]",
        "def d(a,b,c):print \"|\"*(b-1)+\"/\"*((a+1)-b) if c else \"\\\\\"*b+\"|\"*(a-b)"
    ],
    "make-me-some-curry": [
        "c=lambda f,*a:f.func_code.co_argcount>len(a)and(lambda x:c(f,*a+(x,)))or f(*a)",
        "c=lambda n,f,*x:lambda y:(f,c)[n>1](*1%n*(n-1,f)+x,y)",
        "c=lambda f,n,l=[]:lambda a:n-1and c(f,n-1,l+[a])or f(*l+[a])"
    ],
    "404-unique-404-page-not-found": [
        "print('404')",
        "int main(){printf(\"404\");}"
    ],
    "cleaning-up-decimal-numbers": [
        "z=i=1\ndef f(x,y):exec\"r=round(x*i);q=abs(r/i-x)\\nif q<z:z=q;t=r;u=i\\ni+=1;\"*y;print t,u",
        "lambda x,n:min([abs(x-(a:=round(x*b))/b),a,b]for b in range(1,n+1))[1:]",
        "def f(e,n,g,j):\n\tif n==0:return e,1\n\tx=[(0,1),(1,1)]\n\twhile True:\n\t\t(a,b),(c,d)=x\n\t\tif b+d>j:break\n\t\tm,k=a+c,b+d\n\t\tx[m*g>n*k]=(m,k)\n\tm,k=x[2*n/g-a/b>c/d]\n\treturn m+e*k,k"
    ],
    "dizzy-integer-enumeration": [
        "lambda x:-x/2*~-(x&2)",
        "lambda n:-~n//2*(-1)**(n%4>1)",
        "lambda x:-~x/2/(1-(x&2))"
    ],
    "recreate-the-ascii-table-as-an-ascii-table": [
        "print(\"Dec  Chr   | \"*3)[:-2]+\"\\n\"+\"-\"*34+\"\\n32   Space | 64   @     | 96   `\"\nfor n in range(33,63):print\"| \".join([str(n+x).ljust(5)+chr(n+x).ljust(6)for x in [0,32,64]])\nprint\"63   ?     | 95   _     | 127  DEL\"",
        "for l in[['Dec  Chr  ']*3,['-'*35]]+[[f\"{x:<5}{['Space',chr(x),'DEL'][(x>32)+(x>126)]:5}\"for x in(c,c+32,c+64)]for c in range(32,64)]:print(' | '.join(l))",
        "for a in[\"Dec  Chr   | \"*3,\"-\"*39]+[\"\".join(f\"{l:<5}{('Space',chr(l),'DEL')[(l>32)+(l>126)]:<6}| \"for l in(i,32+i,64+i))for i in range(32,64)]:print(a[:-5])"
    ],
    "diagonal-alphabet-to-the-input": [
        "lambda k:[(i*\" \")[:k-1]+chr(i+97)for i in range(26)]",
        "def f(i,j=0):exec\"print(' '*~-i)[:j]+chr(97+j);j+=1;\"*26",
        "lambda n:['%*c'%(min(i+1,n),i+97)for i in range(26)]",
        "x=input();n=m=1\nexec\"print'%*c'%(m,n+96);n+=1;m+=x>m;\"*26",
        "lambda n:[('%*c'%(i,i+96))[-n:]for i in range(1,27)]"
    ],
    "the-plus-minus-sequence": [
        "a,b=input()\nwhile 1:print a,b;a,b=a+b,a-b",
        "def q(a,b):\n while 1:print(a,b);a,b=a+b,a-b",
        "def f(a,b):\n while 1:yield a,b;a,b=a+b,a-b",
        "def f(a,b):print a,b;f(a+b,a-b)"
    ],
    "is-it-a-weak-prime": [
        "f=lambda n,k=1,P=1:n*[0]and P%k*[k]+f(n-P%k,k+1,P*k*k)\ndef a(n):p=f(n);return p.index(n)in filter(lambda i:p[i]-p[i-1]<p[i+1]-p[i],range(1,len(p)-1))",
        "def a(n):\n r=[2];x=2\n while r[-1]<=n:x+=1;r+=[x]*all(x%i for i in r)\n return sum(r[-3:])>3*n",
        "n=input()\na=b=c=i=2;p=1\nwhile b<n:\n p*=i;i+=1\n if p*p%i:a,b,c=b,c,i\nprint a+c>2*b"
    ],
    "split-a-number-in-every-possible-way": [
        "f=lambda s:{(int(s),)}|{a+b for i in range(1,len(s))for a in f(s[:i])for b in f(s[i:])}",
        "f=lambda g:{(int(g),)}|{b+(int(g[i:]),)for i in range(1,len(g))for b in f(g[:i])}"
    ],
    "index-of-the-row-with-most-non-zero-elements": [
        "lambda a:a.index(min(a,key=lambda r:r.count(0)))",
        "lambda m:max(range(len(m)),key=lambda n:len(filter(abs,m[n])))",
        "def f(x,i=0):print i;x[i].remove(0);f(x,-~i%len(x))",
        "def f(x):\n    for e in x:\n        e.sort()\n    y=x[:]\n    y.sort()\n    return x.index(y[-1])"
    ],
    "home-on-the-range-of-lists": [
        "f=lambda n,i=0:i<n and[i]+[f(n,i+1)]*(i<n-1)or[]",
        "f=lambda x,y=[]:y if x<1 else f(x-1,[x-2]+[y or[x-1]])if x>1 else y or[x-1]",
        "f=lambda n,i=0:i<n-1and[i,f(n,i+1)]or[i][:n]",
        "f=lambda n,i=0:[i,f(n,i+1)]if i<n-1 else[i]if n>0 else[]"
    ],
    "adding-up-the-digits-and-the-digits-reversed": [
        "lambda x:sum(int(''.join(list(map(str,range(1,x+1)))[::i]))for i in(1,-1))",
        "a=''.join([str(i+1) for i in range(int(input()))])\nprint(int(a)+(int(a[::-1])))"
    ],
    "create-a-list-of-snaking-numbers-under-50-000": [
        "print[n for n in range(1,50000)if all(`n`[i:i+2]in`0x20b33ec8bc49a10589e76b15`for i in range(4))],670",
        "f=lambda s:''==s[1:]or s[1]in'10021234562216565878 43 749 9   5  8'[int(s[0])::10]and f(s[1:])\nprint(*filter(f,map(str,range(1,50000))),670)"
    ],
    "construct-a-ladder": [
        "lambda*A:sum(abs(x-y+1j)for x,y in zip(*[[i for i,x in enumerate(l)if x]for l in A]))",
        "f=lambda a,b,i=1j:a>[]<b and a[0]*b[0]*abs(i)+f(a[a[:1]<=b:],b[b[:1]<=a:],i+a[0]-b[0])",
        "index()",
        "i=lambda l:(i for i,h in enumerate(l)if h)\nl=lambda*a:sum(((a-b)**2+1)**.5for a,b in zip(*map(i,a)))"
    ],
    "is-it-better-to-walk-or-run-in-the-rain": [
        "f=lambda N,a:N>0and min(f(N-x,a[1:])+x*a[0]for x in[1,2])",
        "f=lambda h=0,*t:t and h+min(f(*t),h+f(*t[:-1]))or h",
        "f=lambda n,h=0,*t:n>0and h+min(f(n-1,*t),h+f(n-2,*t))"
    ],
    "the-digit-triangles": [
        "n=input()\ns=''.join(map(str,range(1,n+1)));L=len(s)\np=-~n/2%2;i=~-L*p+1\nexec'print s[:i].rjust(n/2%2*L);i+=1-2*p;'*L",
        "n=0;s=''\nexec\"n+=1;s+=`n`;\"*input()\nK=k=len(s)\nwhile k:k-=1;print s[k^n/-2%-2:].rjust(n%4/2*K)"
    ],
    "expand-compressed-brain-flak": [
        "s=input()\nB='([{<'\nC=')]}>'\nZ=zip(B,C)\nP=sum(map(s.count,B))-s.count('|')\nfor i,j in Z:s=s.replace(j,i+j)\ns+=P*'|'\nb=[0]\nfor i in s:[b.pop()for j,k in Z if j==b[-1]<k==i];b+=[i][:i in B];s=i=='|'and s.replace(i,C[B.find(b.pop())],1)or s\nprint s",
        "D='()<>[]{} '\ndef f(x):\n a=s=''\n for c in x:i=D.find(c);a+=i<0and s[0]or D[i-(i&1):i+1];s=D[i+1][i&1:]+s[i<0:]\n return a+s",
        "p,q='([{<',')]}>'\nd,s,a=dict(zip(p,q)),[],''\nfor c in input():\n if c in d:a+=c;s+=[c]\n elif'|'==c:a+=d[s.pop()]\n else:a+=dict(zip(q,p))[c]+c\nfor c in s[::-1]:a+=d[c]\nprint a"
    ],
    "get-thee-behind-me-satan-prime": [
        "O(n^2)",
        "lambda k:max(x for x in range(k+1)if\"666\"in str(x)*all(x%i for i in range(2,x)))"
    ],
    "ascii-bookshelves": [
        "X,Y=input()\nk='|'+'---'*X+'|'\nwhile Y:g=Y%X or X;print k+'\\n'+('|'+'|X|'*g+'   '*(X-g)+'|'+'\\n')*3+k;Y-=g",
        "i,j=input()\na=j%i\nn='|\\n'\nx='|'+'---'*i+n\nprint(x+('|'+'|x|'*a+' '*(i-a)*3+n)*3,'')[a<1]+(x+('|'+'|x|'*i+n)*3)*(j/i)+x"
    ],
    "which-ghosts-are-missing": [
        "lambda i:[g for g in\"Blinky Inky Pinky Clyde\".split()if g not in i or\"-\"in i]",
        "o=['Blinky','Clyde','Inky','Pinky']\np=lambda x:[l for l in reduce(lambda z,x:z+[y+[x]for y in z],o,[[]])if sorted(l+x)==o][0]if'Pac-Man'not in x else o",
        "g={\"Blinky\",\"Inky\",\"Pinky\",\"Clyde\"};i=set(input());print\",\".join(g-i if not\"Pac-Man\"in i else g)",
        "lambda s:[x for x in['Blinky','Inky','Pinky','Clyde']if(x in s)<1or'-'in s]"
    ],
    "crown-hundred-crownty-crown": [
        "lambda n:['%03d'%n,'%3s'%`n`.lstrip('1')[1:]][n>999]",
        "lambda n:'%3s'%`10000+n`.lstrip('1')[1:]"
    ],
    "post-determined-array-sorting": [
        "lambda s,k:`sorted(s,key=lambda c:`k.index(3-ord(c)/32)`+c)`[2::5]",
        "lambda l,s:`sorted(s,key=lambda c:[[c<'a',c<'A'or'Z'<c,c>'9'][l[i]]for i in 0,1,2]+[ord(c)])`[2::5]",
        "lambda a,s:\"\".join(sum([[sorted(filter(eval(u),s))for u in[\"str.islower\",\"str.isupper\",\"str.isdigit\"]][i]for i in a],[]))"
    ],
    "draw-an-ascii-checkerboard": [
        "N=3*input()+1\nfor i in range(N):print('+||- #- #+||-# -# '*N)[3**i%7/2%3:3*N:3]",
        "def f(n):\n for i in range(3*n+1):print((\"|##|  \"*n+\"|\")[::i//3%2*2-1][:3*n+1]if i%3 else\"+--\"*n+\"+\")",
        "n=input()\nf=lambda a,b,s:s+s.join(([a*2,b*2]*n)[:n])+s+'\\n'\nprint f(f(*' #|'),f(*'# |'),f(*'--+'))"
    ],
    "balance-the-uppercase": [
        "re.sub",
        "s=input()+'_'\no=''\ni=0\nfor j in range(len(s)):\n p=s[j]\n if p<'A'or'a'<p<'Z'or p>'z':u=[c<'a'for c in s[i:j]];b=[x|y for(x,y)in zip(u,u[::-1])];o+=''.join([c,c.upper()][x]for(c,x)in zip(s[i:j],b))+p;i=j+1\nprint(o[:-1])"
    ],
    "how-many-balloons-do-i-need-in-each-corner": [
        "lambda l:[2*(2*l[i]+l[i%2]+l[i/2])-~l[8]for i in 4,5,6,7]",
        "lambda b:[[4*b[i][j]+2*b[1][j]+2*b[i][1]-~b[1][1]for j in(0,2)]for i in(0,2)]",
        "lambda a,b,c,d,e,f,g,h,i:(4*a+2*b+2*d-~e,2*b+2*f+4*c-~e,2*d+4*g+2*h-~e,2*f+2*h+4*i-~e)",
        "lambda c,*b:[b[~i]*4-~c+b[i]*2+b[i-2]*2for i in 0,2,4,6]"
    ],
    "diluted-integer-sums": [
        "f=lambda n,i=2:n/i and n*2-n%i+f(n,i*2)",
        "def b(x):x=f'{x:b}';return sum(int(x[:i]+'0'+x[i:],2)for i in range(1,len(x)))"
    ],
    "simulate-my-stupid-old-alarm-clock": [
        "def a(m,f):\n for b,c in f:\n  if b&c:m=[0,0]\n  elif b:m[0]=-~m[0]*(m[0]<23)\n  elif c:m[1]=-~m[1]*(m[1]<59)\n return m",
        "lambda c,a:reduce(lambda(h,m),(d,e):(d&e)and(0,0)or((h+d)%24,(m+e)%60),a,c)"
    ],
    "bifurcated-text": [
        "f=lambda s:s and s[0]+(s[1:]and'_{0}^{0}'.format(s[2:]and'{'+f(s[1:])+'}'or s[1]))",
        "def b(s):q=s and(s[2:]and'{%s}'or'%s')%b(s[1:]);return s[1:]and s[0]+'^%s_'%q+q or s"
    ],
    "raise-a-single-number": [
        "def f(x):\n for i,a in enumerate(x):\n  m=max(x[i+1:])\n  if m>a:x[i]=m;break",
        "a=input()\nfor i in range(len(a)):\n for j in a[i+1:]:\n    if a[i]<j:a[i]=j;print a;exit()\nprint a",
        "def F(A):\n for i in range(len(A)):\n    r=[y for y in A[i+1:]if y>A[i]]\n    if r:A[i]=r[0];break",
        "lambda a:([a[:i]+[max(a[i:])]+a[i+1:]for i in range(len(a))if-~i==len(a)or max(a[i+1:])>a[i]]+[[]])[0]",
        "f=lambda x:x and[x[:1]+f(x[1:]),[max(x)]+x[1:]][x[0]<max(x)]"
    ],
    "digital-hardness-of-integers": [
        "s=bin(input())[2:].split('0')\nprint len(min(s[-1],s[0]))<<1%len(s)",
        "f=lambda n,k=0:n>>k&(n&n>>k>n>>k+1)and(n&n+1>0)-~f(n,k+1)",
        "def f(n):b=bin(n)[2:];x=min(b.find('0'),b[::-1].find('0'));print(x<0)*len(b)or x*2"
    ],
    "write-a-pluralization-function-for-russian": [
        "lambda n:'5521'[n%~9/-3>>n/10%~9/-9]",
        "lambda n,s='5122255555':(s+'5'*10+s*8)[n%100]"
    ],
    "7-segment-differences": [
        "f=lambda n:26523308-0**n*2>>n%10*3&7or f(n/10)+2",
        "f=lambda n:(2+f(n/10)if n%10==9else 26523308>>n%10*3&7)if n else 2"
    ],
    "simple-string-reflection": [
        "lambda x:[x.insert(len(x)+~x.index(i),x.remove(i)or i)for i in sorted(x)]",
        "def f(t):\n for c in sorted(t):i=t.index(c);l=len(t)+~i;t[l:l]=t.pop(i)"
    ],
    "convert-salesforce-15-character-id-to-18-character": [
        "i=input();n='';c=l=15;\nwhile c:c-=1;n+=('0','1')[i[c].isupper()]\nwhile l:v=int(n[l-5:l],2);l-=5;i+=(chr(v+65),str(v-26))[v>25]\nprint(i)",
        "lambda s:s+bytes(48+(17+sum((~s[i+j]&32)>>(5-i)for i in range(5)))%43 for j in(0,5,10))",
        "lambda i:i+''.join(chr(48+(17+sum((2**j)*i[x+j].isupper()for j in range(5)))%43)for x in[0,5,10])"
    ],
    "is-it-an-ordered-word": [
        "n=[min(int((ord(i)-58)/3.13),9)for i in input()]\nprint sorted(n)in[n,n[::-1]]",
        "a=[3681/ord(c)for c in input()]\nprint sorted(a)in[a,a[::-1]]",
        "lower()",
        "def g(s,f=lambda c:min(int((ord(c)-58)/3.13),9)):x=[f(a)-f(b)for a,b in zip(s,s[1:])];return any(t<0for t in x)*any(t>0for t in x)"
    ],
    "two-roads-diverged-in-a-yellow-wood-part-2": [
        "f=lambda x,i:sum(sum(map(int,y))for y in x.split()[i::2]if\"#\"<y)\nlambda x:f(x,1)>f(x,0)",
        "def F(S,r=0):\n for c in S.split():\n    if'#'<c:r+=sum(map(int,c));r=-r\n print r>0",
        "x=0\ntry:\n while 1:\n  for n in input().split():x=-x+sum(map(int,n))\nexcept:print(x>0)"
    ],
    "build-ascii-podiums": [
        "n=input()\nw=max([3]+map(len,n))\nw+=~w%2;W=w+2\nS=('{:^%d}'%w).format\nx,y,s='@| '\na,b,c=map(S,n);A,B,C=x+'-'*w+x,y+S(x)+y,y+S(y)+y\nfor l in-~W*s+a,s*W+A,s+b+s+B,A+C,B+C+s+c,C+C+A,C+C+B:print l",
        "a=input()\ni=7\nwhile i:print''.join(([a[k/2]]+list('-@||||    '))[7-i-k].center(max(map(len,a))|1,'- '[i+k!=6]).join('@ |'[cmp(i+k,6)]*2)for k in(2,0,4));i-=1",
        "a,b,c=l=input()\ns=max(map(len,l))/2or 1\nA='@'+'--'*s+'-@'\nD=(' '*s).join\nC=D('|@|')\nD=D('|||')\nd=str.center\nS=s*2+3\nfor l in' '*S+d(a,S),' '*S+A,d(b,S)+C,A+D,C+D+d(c,S),D+D+A,D+D+C:print l"
    ],
    "transpile-into-your-language": [
        "for y in input('print').split(\"#\")[:-1]:print`chr(y.count(\";\")%127)`,",
        "lambda s:\"print\"+`''.join(chr(x.count(';')%127)for x in s.split('#')[:-1])`"
    ],
    "next-shared-totient": [
        "lambda x,n=1:[n>x*x,x+n][t(x+n)==t(x)]or s(x,n+1)\nt=lambda n:sum(k//n*k%n>n-2for k in range(n*n))",
        "lambda N:next((j for j in range(N+1,max(6,t(N)**2))if t(j)==t(N)),0)\nt=lambda n:sum(k/n*k%n>n-2for k in range(n*n))"
    ],
    "de-parenthesizing-a-string": [
        "p=lambda s:filter(None,sum([''.join([s[i]for i in range(len(s))if s[:i+1].count('(')-s[:i+1].count(')')==d and s[i]!=')']).split('(')for d in range(len(s))],[]))",
        "def f(s):\n d=0;r=[['']for c in s]\n for c in s:\n  if c=='(':d+=1;r[d]+=['']\n  elif c==')':d-=1\n  else:r[d][-1]+=c\n return[i for i in sum(r,[])if i]"
    ],
    "am-i-a-redivosite-number": [
        "def f(N):\n\tn=N;s=[0]*-~N\n\tfor p in range(2,N):\n\t\tif s[p]<1:\n\t\t\tfor q in range(p*p,N+1,p):s[q]=s[q]or p\n\twhile s[n]:n=n//s[n]-~s[n]\n\treturn s[N]>1>N%n",
        "r=0;e=d=i=input()\nwhile r-e:e=i;r=[j for j in range(2,i+1)if i%j<1][0];i=i/r-~r\nd%e<1<d/e<q"
    ],
    "4-way-intersection-generator": [
        "t,s,r,i=[],[],range(5),raw_input()\nfor n in r:t+=[\" \"*5*(\"W\"in i)+\"|  \"+(\"|\",\" \")[n%2]+\"  |\"]\nexec\"s+=['-'*5];s[:1]+=' '*5,;\"*2;s[:2]+=\"- - -\",\nif\"N\"in i:print'\\n'.join(t)\nprint'\\n'.join([s[n]*(\"W\"in i)+(\"|     |\",\"+-----+\")[`n`in\"04\"]+s[n]*(\"E\"in i)for n in r])\nif\"S\"in i:print'\\n'.join(t)",
        "S=' -- -  -- -  --'\nlambda d:'\\n'.join(S[r//4:15*('W'in d):3]+'||+  -  -| -  -  -||+'[r%4::3]+S[r//4:15*('E'in d):3]for r in[0,1,0,1,0,6,1,9,1,6,0,1,0,1,0][5-5*('N'in d):10+5*('S'in d)])"
    ],
    "draw-a-path-made-by-direction-changers": [
        "def f(G,e=enumerate):\n for i,k in e(G):\n\tfor j,l in e(k):\n\t v=X=x=y=m,=l,\n\t while(m in'-X|')<(l in'DLRU')>(X in v):v+=X,;y,x=zip((1,0,0,-1,y),(0,-1,1,0,x))['DLRU dlru'.find(m)%5];G[i][j]=(m,'.*'[G[i+y][j+x]in'-X|'])[m<'!'];i+=y;j+=x;X=x,i,j;m=G[i][j]",
        "e=enumerate\ndef f(M):\n s=[(x,y,c)for y,l in e(M)for x,c in e(l)if'A'<c<'X'];v=set(s)\n for x,y,C in s:\n\td=ord(C)%87%5;q=d>1;X,Y=x-d+q*3,y+~-d-q;c=M[Y][X];N=(X,Y,[C,c]['a'<c<'x'])\n\tif'!'>c:M[Y][X]='.'\n\tif(c in'-|X')*('/'>M[y][x]):M[y][x]='*'\n\tif(c in'udlr. *')>({N}<v):v|={N};s+=N,"
    ],
    "find-arsonists-lullaby": [
        "def f(x):\n r=c=0\n while-1<r:d=x[r][c];r,c=len(x)-c+~d,r;x=[*zip(*x)][::-1]\n return d",
        "a=input();x=y=e=0;d=1\nwhile-1<y<len(a)>x>=0:v=a[y][x];x+=v*d;y+=e*v;d,e=-e,d\nprint v"
    ],
    "determine-tic-tac-toe-winner-round-based": [
        "lambda a,i=0:i<9and(any(set(a[i%2:i+1:2])>=set(map(int,t))for t in'123 456 789 147 258 369 159 357'.split())and(i%2+1,i+1)or f(a,i+1))",
        "n=m=c=z=0\nfor a in input():m+=1<<~-int(a);c+=1;z=z or f'{c&1}:{c}'*any(m&t==t for t in[7,56,448,73,146,292,273,84]);n,m=m,n\nprint(z or-1)",
        "q=map(input().index,range(1,10))\nz=zip(*[iter(q)]*3)\no='',\nfor l in[q[2:7:2],q[::4]]+z+zip(*z):\n r=[n%2for n in l];y=all(r)*2+1-any(r)\n if y:o+=[max(l)+1,y],\nprint min(o)"
    ],
    "highlight-the-bounding-box-part-ii-hexagonal-grid": [
        "def f(a):i=range(len(a[0]));j=range(len(a));b,c,d=map(sorted,zip(*[[x,x+y,x-y]for y in i for x in j if\"?\"<a[x][y]]));return[[[a[x][y],\"#\"][(a[x][y]>\" \")*(b[0]<=x<=b[-1])*(c[0]<=x+y<=c[-1])*(d[0]<=x-y<=d[-1])]for y in i]for x in j]",
        "def s(i):\n    L=i.splitlines();E=enumerate;A=lambda x,y:(y,x+y,x-y);N=(2**64,)*3;X=(-2**64,)*3\n    for y,l in E(L):\n        for x,c in E(l):\n            if c=='#':p=A(x,y);X=tuple(map(max,X,p));N=tuple(map(min,N,p))\n    R=''\n    for y,l in E(L):\n        for x,c in E(l):\n            if c!='.':R+=c\n            else:p=A(x,y);f=all(N[j]<=p[j]<=X[j]for j in range(0,3));R+='.#'[f]\n        R+='\\n'\n    return R"
    ],
    "verify-topology": [
        "n,x=input();sum(set.union(*x))!=n*-~n/2>q\n[map(x.index,(i-i,i|j,i&j))for i in x for j in x]",
        "lambda n,T:(set(range(n))in T)&all(x in T for i in T for j in T for x in [i-i,i&j,i|j])"
    ],
    "make-a-voronoi-diagram-ascii-variant": [
        "def v(s):\n w=s.find(\"\\n\")+1;n=(-1,1,-w,w);r=range(len(s));x=str.replace;s=x(x(s,*\".~\"),*\"\\n~\")+\"~\"*w;t=0\n while s!=t:t=s;s=[min(s[i+j]for j in n).lower()if\"~\"==s[i]and(i+1)%w else s[i]for i in r]+[\"~\"]*w\n print(x(\"\".join(s[i]if any(s[i]!=s[i+j].lower()!=\"~\"for j in n)else\".\"for i in r),*\"~\\n\"))",
        "def F(s):\n e,f,b='~.\\n';N=s.index(b)+1;s=s.replace(f,e)\n for i in 2*N*e:s=''.join(min([x[0]]+[[y.lower()for y in x if y>b],all(y.lower()in f+b+x[0]for y in x)*[f]][x[0]!=e])for x in zip(s,s[1:]+b,s[N:]+b*N,b+s,b*N+s))\n print s\n\nF(\"\"\"......B..\n.........\n...A.....\n.........\n.......D.\n.........\n.C.......\n.....E...\n.........\n\"\"\")"
    ],
    "a-lean-mean-bean-machine": [
        "i=raw_input\nl=i()\nc=[]\nwhile l:c,l=c+[l],i()\np=[[0]*len(l)for l in c]+[[0]*max(map(len,c))]\nS=lambda r,C,p:r>=0and C>=0and r<len(p)and C<len(p[r])\ndef U(r,C,P,D,N=0):\n if S(r,C,p):p[r][C]+=P\n if S(r,C,c):\n\tK=c[r][C]\n\tif K in' O':U(r+1-N,C+D*N,P,D,N)\n\telif'v'==K:U(r+1,C,P,D)\n\telif'-'==K:U(r,C+D,P,D,N)\n\telif'^'==K:U(r,C-1,P/2,-1);U(r,C+1,P/2,1)\n\telif'/'==K:U(r,C-1,P,-1)\n\telif'\\\\'==K:U(r,C+1,P,1)\n\telif'='==K:U(r,C+D,P,D,1)\n\telif'>'==K:U(r,C+1,P,1,1)\n\telif'<'==K:U(r,C-1,P,-1,1)\n\telif'|'==K:U(r,C-D,P,-D)\nfor r in range(len(c)):\n for C in range(len(c[r])):\n\tif'O'==c[r][C]:U(r+1,C,1.,1);U(r+1,C,1.,-1)\np=p[-1][::-1]\ns=16/max(p)\nf=['#'*min(int(n*s),16)+' '*min(int(16-n*s),16)for n in p]\nprint('\\n'.join(map(''.join,zip(*f)))[::-1])",
        "def t(a):e=enumerate;p=a.split(\"\\n\");o=[0]*len(p[0]);{m(i,j,p,o,1):m(i,j,p,o,-1)for i,r in e(p)for j,c in e(r)if\"O\"==c};[print(\"\".join(\" #\"[round(16*r/max(o)+i)>15]for r in o))for i in range(16)]\ndef m(r,k,p,o,l,x=1):\n while r<len(p):\n  c=p[r][k]\n  if\"^\"==c:x/=2;m(r,k-l,p,o,l,x)\n  if\"U\"==c:return\n  if c in\" vO\":r+=1;continue\n  l=[1,l,-1,l,-l,1][ord(c)%6];k-=l\n  while\";\"<c<\"?\"and p[r][k]in\" O-\":k-=l\n o[k]+=x"
    ],
    "average-of-your-code": [
        "print(\"N\")",
        "print\"Y\"",
        "print('K')#"
    ],
    "orthodiagonal-steps": [
        "n=6;exec'n+=~(n==2);print n/3,n%3-1;'*8",
        "i=9;exec\"print-i%3-1,i/5;i-=2;\"*8"
    ],
    "make-me-speak-l33t": [
        "lambda x:x.translate(dict(zip(b\"BEISbeis\",2*\"8315\")))",
        "lambda s:''.join([('8315'*2)['beisBEIS'.find(c)] if c in 'beisBEIS' else c for c in s])"
    ],
    "days-in-indexed-month": [
        "lambda i:(30+(i%2==(i<8)),28)[i==2]",
        "lambda x:'312831303130313130313031'[x*2:][:2]",
        "lambda n:31-n%7%2-(n==1)"
    ],
    "draw-some-expanding-arrows": [
        "lambda x:[i%2*\"<\"+i//2*\"-\"+~i%2*\">\"for i in range(x)]",
        "k=0\nexec\"print k%2*'<'+k/2*'-'+~k%2*'>';k+=1;\"*input()"
    ],
    "check-if-a-string-is-entirely-made-of-the-same-substring": [
        "lambda s:s in(len(s)//l*s[:l]for l in range(1,len(s)))",
        "lambda s:s in(s*2)[1:-1]"
    ],
    "swap-two-values-in-a-list": [
        "def f(l,a):l[a[::-1]]=l[a]",
        "list.pop",
        "lambda l,a,b:l[:a]+[l[b]]+l[a+1:b]+[l[a]]+l[b+1:]",
        "lambda a,b,c:a[:b]+[a[c]]+a[b+1:c]+[a[b]]+a[c+1:]",
        "l=[1...L.length]\nf(L,a,b)=\\{l=a:L[b],l=b:L[a],L\\}"
    ],
    "make-me-a-metasequence": [
        "f=lambda n:[t:=1]+[t:=t+n for n in(n and f(n-1)[:-1]or[0]*19)]",
        "m=lambda t:[1+sum(m(t-1)[:n])for n in range(~t and 20)]"
    ],
    "i-shift-the-source-code-you-shift-the-input": [
        "bc=k=input()\nprint[k,k[1:]+k[0],k,k[-1]+k[:-1]][len(dir()[5])]#a",
        "\"\";i=0#\";i=1#\"\"\";i=-1\na=input()\nprint(a[i:]+a[:i])#\""
    ],
    "alphabet-triangle-strikes-again": [
        "[print(\"\".join([chr((i%26)+97)for i in range(j*j,(j+1)*(j+1))]))for j in range(26)]",
        "i=1\na=bytearray(range(65,91))*26\nwhile a:print a[:i];a=a[i:];i+=2"
    ],
    "traffic-direction": [
        "lambda l:l[1]in'GIU,BDMNSTW,CKXY,M,,JK,BDGSY,K,DEMN,EMP,EINY,CKS,OSTUVWYZ,AFPRUZ,,GKN,,,BCGHORZ,CHKLOTVZ,G,CGI,S,,,AMW'.split(',')[ord(l[0])-65]",
        "'TTHSZWMSGSONPKNZMWVIDFKELSCYJPNFJMTVCXBNRBWSHKYAUGGYBTLCCKIMVGBSBBMZAINAGDMOBDIEJEMYMUNUPGSRLKTKTOTCTZ'.find"
    ],
    "golf-an-anagram-quine": [
        ">>> (1),\n(1,)",
        "p\"r\"i\"n\"t\"2(\")*p\"r\"i\"n\"t\"2(\")*\\n"
    ],
    "how-many-days-in-a-month": [
        "x=input().lower()[1:3];print(31-(x in\"eprunov\")-3*(x==\"eb\"))",
        "lambda m:29-int(m[1:3],35)%238%36%-5/2",
        "monthrange"
    ],
    "close-neighbours-stick-together": [
        "p=0\nfor n in input():print`-n`[n-p:]or-n,;p=n",
        "p=0\nfor n in input():print\"X\"*p*(abs(n-p)!=1),n,;p=n"
    ],
    "is-string-x-a-subsequence-of-string-y": [
        "def s(x,y):\n for c in y:\n  if x:x=x[c==x[0]:]\n return x==\"\"",
        "l=len(y)\nprint x in[''.join(c for i,c in zip(bin(n)[2:].rjust(l,'0'),y)if i=='1')for n in range(2**l)]",
        "lambda a,b:{1,l:=iter(b)}>{c in l for c in a}",
        "lambda a,b:''in[a:=a[a[:1]==c:]for c in b]",
        "s=lambda a,b:a==''or b>''and s(a[a[0]==b[0]:],b[1:])",
        "x,y=map(list,input())\nwhile x:y.remove(x.pop())",
        "def f(n,h,r=0):\n for c in h:r+=n[r:r+1]==c\n return r==len(n)",
        "def f(i):\n    s=x;j=0\n    while j<len(s):t=~i%2;s=[s[:j]+s[j+1:],s][t];j+=t;i>>=1\n    return s==y\nprint True in map(f,range(1,2**len(x)))",
        "def f(a,b):\n c=len(a)\n for i in b:a=a.replace(i,\"\",1)\n print len(a+b)==c"
    ],
    "r-flag-my-vyxal": [
        "f=lambda i,o=[]:i and f(i[1:],o+[(i[0]>'9'and o.pop()+o.pop()or'')+i[0]])or o[0]",
        "def f(i,s=[]):\n for c in i:s+=[c<'a'and c or s.pop()+s.pop()+c]\n return s[-1]"
    ],
    "encode-the-alphabet-cipher": [
        "f=lambda x:\"\".join(f\"{ord(j)-96:02}\"for j in x)",
        "f=lambda s:s and`ord(s[0])+4`[1:]+f(s[1:])",
        "lambda x:\"\".join(`ord(i)+4`[1:]for i in x)",
        "lambda x:\"\".join(\"%02i\"%(ord(j)-96)for j in x)"
    ],
    "whats-a-half-on-the-clock": [
        "f=lambda n,t=2:t<2or-~f(n,2*t%n)",
        "f=lambda n,x=1:2**x%n==1or 1+f(n,x+1)"
    ],
    "print-number-triangle": [
        "f=lambda n:n and[f(n-1),print(*range(1,n+1))]",
        "def f(x):\n if x:f(x-1);print\" \".join(map(str,range(1,x+1)))",
        ">>> def p(N):print'\\n'.join(' '.join(map(str,range(1,i+2)))for i in range(N))\n... \n>>> p(5)\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5"
    ],
    "a-list-of-number-modulus-their-indices-in-the-list": [
        "lambda l:[v%(i+1) for i,v in enumerate(l)]",
        "lambda x:[0]+[x[i]%i for i in range(1,len(x))]",
        "f=lambda l,i=1:l and[l[0]%i]+f(l[1:],i+1)",
        "i=1\nfor x in input():print x%i;i+=1"
    ],
    "surround-a-string-with-hashes": [
        "s=input()\nn=len(s)+2\ny='#\\n#'\nx='#'*-~n+y+' '*n+y\nprint x,s,x[::-1]",
        "s='# %s #'%input()\nn=len(s)\nb='\\n#'+' '*(n-2)+'#\\n'\nprint'#'*n+b+s+b+'#'*n",
        "lambda x:(\"###### %s ######\\n\\n\\n\\n\"%' ## '.join(f\" {x} \")*5)[::5]",
        "d,h,s,m=input(),'#',' ','\\n'\nl=len(d)+2\nprint(l*h+h,l*s,s+d+s,l*s,l*h+h,sep=h+m+h)",
        "s=\" \";n=s+input()+s\nb=len(n)\nh=\"#\";x=h*(b+2);y=h+s*b+h;z=\"\\n\"\nprint(x+z+y+z+h+n+h+z+y+z+x)",
        "s=input()\nn=len(s)+2\nv='#'*n+'##\\n#'+' '*n+'#\\n#'\nprint(v,s,v[::-1])"
    ],
    "count-consecutive-characters": [
        "lambda s:max(reduce(lambda(p,v),c:(c,v+[v[-1]*(c==p+1)+1]),map(ord,sorted(set(s))),(0,[0]))[1])",
        "f=lambda s:s and-~f({*s}&{chr(ord(c)+1)for c in s})or 0"
    ],
    "you-must-construct-ascii-pylons": [
        "i=48\nwhile i:i-=1;r=range(79-i,127-i*2);print' '*i+bytearray(r+r[-2::-1])",
        "i=32\nexec\"print''.join(chr(i+i-32-abs(j))for j in range(32-i,i-31)).center(95);i+=1;\"*48"
    ],
    "given-the-names-of-two-planets-give-the-distance": [
        "lambda*x:int.__sub__(*[[0,5029,9169,17003,72042,136669,281564,444309]['MeVeEaMaJuSaUr'.find(k[:2])/2]for k in x])*~9999",
        "n=lambda x:(5029,9169,17003,72042,136669,281564,444309,0)[\"VeEaMaJuSaUrNe\".find(x[:2])/2]*10000\nf=lambda a,b:n(b)-n(a)"
    ],
    "zero-sum-counting": [
        "def f(n):l=k=1;exec\"l+=l<<n*k;k+=1;\"*n;return(l>>n*n*-~n/4)%2**n*(~-n%4>1)",
        "f=lambda n,r=0:f(n-1,r+n)+f(n-1,r-n)if n else r==0"
    ],
    "agm-series-hole-1-calculate-the-arithmetic-geometric-mean": [
        "lambda",
        "def f(a,b,n):\n while n:a,b=(a+b)/2.,(a*b)**.5;n-=1\n print a,b"
    ],
    "generate-a-stack-exchange-favicon": [
        "def f(n):c=filter(lambda x:x.isupper()^x.isdigit(),n);L=len(c);h='+'+L*'-'+'+\\n';return h+'|'+c+'|\\n'+h+' '*L+'v'",
        "s=''\nfor i in input():_=ord(i);s+=(\"\",i)[91>_>64or 47<_<58]\nx=len(s)\nc='+'+\"-\"*x+'+'\nprint(c+\"\\n|\"+s+\"|\\n\"+c+\"\\n\"+\" \"*x+\"v\")"
    ],
    "generate-a-pair-of-integers-from-a-non-negative-one": [
        "def f(N):\n x=a=0;b=2\n while N:x+=1j**b;b+=a<1;a=a or b/2;N-=1;a-=1\n return int(x.real),int(x.imag)",
        "def f(n):x,y=n and f(n/2)or(0,0);return n%2-2*y,x"
    ],
    "how-does-the-square-end": [
        "lambda m:[*{n*n%m for n in range(m)}]",
        "t=int(input())\nprint list(set([(i*i)%t for i in range(t)]))"
    ],
    "numbers-increase-while-letters-decrease": [
        "def F(x):n=sorted(x);print[n.pop(-(e>x))for e in x]",
        "def f(s):x=sorted(s,key=lambda c:(type(c)==str,c));return[x.pop(-(type(c)==str))for c in s]",
        "g=lambda s,a:sorted(x for x in s if(type(x)==str)==a)\ndef f(s):l,n=g(s,1),g(s,0)[::-1];return[[n,l][type(x)==str].pop()for x in s]",
        "def f(s):x=sorted(s,key=lambda c:ord(c)-95);return[x.pop(-(c>'.'))for c in s]"
    ],
    "sierpinski-carpets": [
        "r=range(3**~-input())\nfor i in r:print\" \".join(\"# \"[any(i/3**k%3==j/3**k%3==1for k in r)]for j in r)",
        "r=input()-1\nfor i in range(3**r):x,s='# ','  ';exec\"x+=[x,s][i%3%2]+x;s*=3;i/=3;\"*r;print x",
        "exec(bytes('\u2c74\u3d6c\u275b\u96e2\u20a0\u5d27\u6c2c\u6d61\u6462\u2061\u3a7a\u7665\u6c61\u7a28\u272b\u206b\u6f66\u2072\u206b\u6e69\u7420\u275d\u0a29\u6f66\u2072\u2069\u6e69\u7220\u6e61\u6567\u6928\u746e\u6928\u706e\u7475\u2928\u2d29\u2931\u723a\u702c\u6c3d\u2728\u335b\u272a\u2c29\u286c\u5b22\u2b6b\u2027\u2720\u282a\u2a33\u692a\u2b29\u2922\u743b\u723d\u702b\u722b\u660a\u726f\u6920\u6920\u206e\u3a74\u7270\u6e69\u2874\u2969','utf-16')[2:].decode('utf-8'))"
    ],
    "confusing-alphabet-staircase": [
        "s=map(chr,range(65,91))\nfor d in s:print d.join(s[:ord(d)-65])+d",
        "n=65;s='';exec'c=chr(n);print c.join(s)+c;s+=c;n+=1;'*26"
    ],
    "bake-me-some-moji": [
        "lambda s:s.decode('1252').encode('u8')",
        "lambda s:s.encode().decode('1252')"
    ],
    "divide-a-string": [
        "s,n=input()\nb=len(s)/n\nexec'print s[:b];s=s[b:];'*n\nprint s",
        "def f(s,n):k=len(s)/n;print zip(*[iter(s)]*k)[:n],s[k*n:]",
        "def G(h,n):l=len(h);r=l/n;print[h[i:i+r]for i in range(0,n*r,r)],h[l-l%n:]",
        "i=input().split('|')\ns,n=i[0],int(i[1])\nc=len(s)//n\nwhile n:print(s[:c]);s=s[c:];n-=1\nprint(s)",
        "def f(s,n):\n a=[];i=len(s)/n\n while n:a+=s[:i],;s=s[i:];n-=1\n print a+[s]",
        "def f(s,n):l=len(s);print[s[i:i+l/n]for i in range(0,l-n+1,l/n)]+[s[l-l%n:]]"
    ],
    "am-i-a-cullen-number": [
        "f=lambda n,i=0:i<<i!=n-1and f(n,i+1)",
        "lambda n:any(x<<x==n-1for x in range(n))",
        "[n<<n|1for n in range(26)].count"
    ],
    "where-are-champernownes-zeroes": [
        "lambda n:('%d'*-~n%(*range(n),n))[n]<'1'",
        "lambda n:''.join(map(str,range(n+1)))[n]<'1'"
    ],
    "emoticon-facial-expression-recognition": [
        "x=lambda c: [\"happy\",\"sad\"][c[0]+c[-1:]in open(__file__).read(88)[::-1]]#<][><:>{:}(:)",
        "lambda e:('happy','sad')[e[-1]in'[(c<{'or e[0]in'])>}']",
        "i,e=raw_input(),0\nfor c in i:e=(e,i.index(c))[c in\":=8xXB\"]\nf,s,h=i[:e],i[e+1:],0\nfor c in f:h+=c in\"[(c<{\"\nfor c in s:h+=c in\")]}>D\"\nprint[\"Sad\",\"Happy\"][h>0]"
    ],
    "the-great-pyramid-of-ascii": [
        "b,f='\\/';p=lambda t,n='\\n':(t[2:]and p(f+''.join(map({f:b,b:f}.get,t[2:-2]))+b,n+' '))+n+t",
        "f=lambda s,p='\\n':(s[2:]and f('/%s\\\\'%s.translate('/\\\\'*128)[2:-2],p+' '))+p+s"
    ],
    "lets-design-a-digit-mosaic": [
        "i=j=0;r=''\nfor x in input():i+=1;r+=x*i\nfor c in r:print j*c+r[j:];j+=1",
        "i=1;a=[]\nfor c in input():exec\"a=zip(*a+[c*-~len(a)]);\"*i;i+=2+i%2\nprint a",
        "l=0;m=[]\nfor k in input():l+=1;m=[r+l*k for r in m]+l*[l*-~l/2*k]\nprint m"
    ],
    "a-multiplication-table-for-the-cheela": [
        "def p(b):\n f=lambda n:(n>=b and f(n/b)or'')+chr((48,55)[n%b>9]+n%b)\n for i in range(b*b):print'%4s\\n'[:3+(~i%b<1)]%f(~(i%b)*~(i/b)),",
        "def t(b):\n r=range(1,b+1);f=lambda x:x and f(x//b)+chr((55,48)[x%b>9]+x%b)or''\n print('\\n'.join(''.join(B)for B in(('%4s'%f(i*j)for j in r)for i in r)))"
    ],
    "an-infinite-ftw": [
        "def f(a,b):print(end=b);f(b,a+b)",
        "a,b=input()\nprint'\\n'.join(b+a)\nwhile 1:a,b=b,b+a;print'\\n'.join(a)"
    ],
    "not-so-triangular-numbers": [
        "a=lambda n,k=1:-~n*n>k*k*2and k+a(n,k+1)or max(0,k-~n*n/2-k*k)",
        "lambda n:sum([j for i in range(1,n+1)for j in[1]*i+i*[0]][:n*-~n//2])",
        "f=lambda n,k=8:k>n*-~n*2or(-k**.5%2<1)+f(n,k+4)"
    ],
    "bacterial-expansion": [
        "g=lambda l:l*all(l)or g([l[1]or max(l)for l in zip([0]+l,l,l[1:]+[0])])",
        "def b(s):\n for _ in s:s=[s[n]or max((0,*s)[n:n+3])for n in range(len(s))]\n return s"
    ],
    "golf-a-parentheses-matching-algorithm": [
        "s=[];i=0\nfor c in input():\n if'['==c:s+=i,\n if']'==c:print s.pop(),i\n i+=1",
        "def a(s,r=[],i=0):\n o=[]\n while i<len(s):exec[\"r+=[i]\",\"o+=[(r.pop(),i)]\",'']['[]'.find(s[i])];i+=1\n return o"
    ],
    "make-a-zigzag-pattern": [
        "lambda n:\"\\n\".join(\" \"*(abs(i%(n*2)-n+i//n%2)-1)+\"/\\\\\"[i//n%2]for i in range(n*n))",
        "lambda n:[[~i,i][i/n%2]%n*' '+'/\\\\'[i/n%2]for i in range(n*n)]"
    ],
    "help-me-compress-this-song": [
        "s=\"Priletela muha na zid,\"\nv=\"aeiou_\"\nfor x in v:\n w=s[10:-1]+\".\\n\";print s,s[10:],w+s+\"\\n\"+w\n for y in v:s=s.replace(y,x)",
        "s=\"Priletela muha na zid, \"\nv=\"aeiou_\"\nn='\\n'\nprint(n.join([[s+s[10:]+(w:=s[10:-2]+n)+s+n+w,[s:=s.replace(y,x)for y in v]][0]for x in v]))"
    ],
    "upper-or-lower-wythoff": [
        "lambda n,r=.5+5**.5/2:-~n//r<n/r",
        "lambda n:-n*2%(5**.5+1)<2"
    ],
    "numbers-divisible-by-the-sum-and-product-of-their-digits": [
        "def a(m,i=1,k=1):n=map(int,`i`);p=reduce(lambda x,y:x*y,n);k+=p and 1>i%sum(n)+i%p;return(k>m)*i or a(m,i+1,k)",
        "t=input();h=k=0;p=int\ndef g(x,q=0,w=1):\n    for i in x:X=p(x);I=p(i);q+=I;w*=I\n    return w!=0and X%q+X%w<1\nwhile h<p(t):k+=1;h+=g(str(k))"
    ],
    "reduce-string-to-a-snippet-of-the-alphabet": [
        "lambda s:reduce(lambda x,y:x+y*((ord(y)-ord(x[~0]))%32==1),s.strip())",
        "s=input().strip();k=0\nfor i in s:\n if(ord(i)-ord(s[0]))%32==k:k+=1;print(i)"
    ],
    "transpile-wordmath": [
        "for c in input()[9:-1].split(\",\"):s=c.rfind(\" \");p=o=s and\"x=\"+\"-x+ input() x- x// x+ x*\".split()[s%7]+c[s:]*(c[0]<\"a\")or p;print o\nprint\"print x\"",
        "def r(s,o=\"\",p=\"\"):c=s.pop(0);c=[c,p]['re'in c];n=c.split()[-1];o=[[o+[['+-'['s'in c],'//']['v'in c],'*']['m'in c]+n,n+'-'+o]['f'in c],'input()']['T'in c];return s and r(s,\"(%s)\"%o,c)or o\nlambda s:\"print \"+r(s.split(','))"
    ],
    "mountain-range-numbers": [
        "f=lambda a,b,*l:l==()or(a-b)*(b-l[0])*f(b,*l)<0",
        "def f(l):x=[a<b for a,b in zip(l[1:],l)];return all(a!=b for a,b in zip(x[1:]+l[1:],x[:-1]+l))",
        "lambda A:all((x-y)*(y-z)<0for x,y,z in zip(A,A[1:],A[2:]))"
    ],
    "help-i-forgot-my-password": [
        "lambda h:[(a,b,c)for a in r for b in r for c in r if a+2*b+3*c+288==h]\nr=range(6)",
        "lambda h:[(P/36,P%36/6,P%6)for P in range(216)if P/36+P%36/6*2+P%6*3==h&31]"
    ],
    "christmas-cracker-mystery-calculator": [
        "k=1\nwhile 1:print('%2d '*7+'%2d\\n')*4%tuple(n for n in range(64)if k&n),11/(k<32)*' -';k*=2",
        "for c in range(6):s=\" \".join(\"%2d\"%n for n in range(64)if n&1<<c);print\"\\n\".join([s[24*i:24*i+23]for i in range(4)]+[\" -\"*11]*(c<5))",
        "i=0;exec\"print('%2d '*7+'%2d\\\\n')*4%tuple(j for j in range(64)if j&2**i)+' -'*11;i+=1;\"*6"
    ],
    "what-rot-is-this-decrypt-rot-n": [
        "f,R,i='zqxjkvbpygfwmucldrhsnioate',{},raw_input();a=sorted(f)*2\nfor n in range(26):_=''.join(a[ord(x)-71-n]for x in i);R[sum(2**f.index(x)for x in _)]=n,_\nprint R[max(R)]",
        "x=\"abcdefghijklmnopqrstuvwxyz\"\ny=input()\nr=lambda n:\"\".join(x[x.find(i)-n]for i in y)\ns={sum(\"etaoinshrdlcumwfgypbvkjxqz\".find(b)for b in r(a)):(a,r(a))for a in range(26)}\nprint(s[min(s)])"
    ],
    "cooking-with-code": [
        "def g(r,q):\n for s in q:\n  i=r.index(s)\n  if i:r[i-1],r[i]=r[i],r[i-1]\n return r",
        "r,u=input()\nfor x in u:i=r.index(x);r.insert(i/~i+i,r.pop(i))\nprint r"
    ],
    "are-my-triangles-similar": [
        "lambda a:len({i/j for i,j in zip(*[sorted(map(abs,[p-q,q-r,r-p]))for p,q,r in a])})<2",
        "lambda*M:len({x/y for x,y in zip(*[sorted(abs(3*x-sum(l))for x in l)for l in M])})<2"
    ],
    "hexagolf-wordagons": [
        "def f(s):\n for n in range(len(s)*2-1):x=abs(n-len(s)+1);print' '*x+' '.join(s[x+1:][::-1]+s[x]*x+s[x:])",
        "s=input()\nl=len(s)\nwhile 1:l-=1;y=abs(l);print' '*y+' '.join(s[:y:-1]+s[y]*y+s[y:])"
    ],
    "topographic-strings": [
        "S=raw_input()\nR=range(len(S))\nH=[S[:i].count('(')-S[:i].count(')')for i in R]+[0]\nfor h in range(max(H),0,-1):print''.join((' '+S[i])[H[i]==H[i+1]==h]for i in R)",
        "a=[\"\"]*9\nl=8\ni=0\nfor c in raw_input():o=l;l+=c==')';l-=c=='(';a[l]=a[l].ljust(i)+c*(o==l);i+=1\nprint\"\\n\".join(filter(str.strip,a))"
    ],
    "remove-loops-from-a-walk": [
        "r=\"\"\nx,=l=0,\nfor c in input():x+=1j**(ord(c)%15);l+=x,;r+=c;n=l.index(x);l=l[:n+1];r=r[:n]\nprint r",
        "r=\"\"\nx,=l=[0]\nfor c in input():x+=1j**(ord(c)%15);r+=c;l[len(r):]=x,;r=r[:l.index(x)]\nprint r",
        "x=y=0;c=[[0,0]];a='';t='UDLR';u=['y-=1','y+=1','x-=1','x+=1']\nfor i in input():\n exec(u[t.index(i)])\n if[x,y]in c:f=c.index([x,y]);a=a[:f];c=c[:f]\n else:a+=i\n c+=[[x,y]]\nprint(a)",
        "l=[p:=0]\nn=\"\"\nfor s in input():\n if(p:=p+1j**(ord(s)%15))in l:x=l.index(p);l=l[:x+1];n=n[:x];p=l[x]\n else:l+=[p];n+=s\nexit(n)"
    ],
    "knight-distance": [
        "def f(x,y):x=abs(x);y=abs(y);s=x+y;return(.9+max(x/4,y/4,s/6)-s/2+(s==1or x==y==2))//1*2+s",
        "f=lambda z,a={0}:1-({z}<=a)and-~f(z,{k+1j**i*(2-i/4*4+1j)for k in a for i in range(8)})"
    ],
    "do-you-know-your-kvzs": [
        "d=*map(set,'AJK BCDEGPTVZ IY QU SXF MN H L O R W'.split()),\nprint([d[int(c,16)].pop()for c in'0111141620075581394131a421'])",
        "a,b,i,q,s,m,h,l,o,r,w=(set(s)for s in[\"AJK\",\"BCDEGPTVZ\",\"IY\",\"QU\",\"SXF\",\"MN\",*\"HLORW\"])\nprint([eval(c).pop()for c in[*\"abbbbsbhiaalmmobqrsbqbwsib\"]])"
    ],
    "overwritlabels": [
        "def g(p):\n z=[' ']*256\n for a,b in p:z[b:b+len(a)+1]='*'+a\n return''.join(z).rstrip()",
        "z=''\nfor a,b in input():z=(z+' '*b)[:b]+'*'+a+z[len(a)-~b:]\nprint z"
    ],
    "take-that-frown-and-turn-it-around": [
        "lambda n,x=\":\u22a2\u2361\u22a3:\u25b7\u2362\u25c1:\u22c6\u2363\u22c6:\u2218\u2364\u2218:\u25cb\u2365\u25cb:\u2240\u2368\u2240:\u2227\u2369\u2228:\":x[x.find(n)+len(n):x.find(n)+3]",
        "lambda s:\":\u22a2\u2361\u22a3:\u25b7\u2362\u25c1:\u22c6\u2363\u22c6:\u2218\u2364\u2218:\u25cb\u2365\u25cb:\u2240\u2368\u2240:\u2227\u2369\u2228:\".split(s)[1][:3-len(s)]"
    ],
    "draw-an-ascii-house": [
        "x,y=eval(input())\nw=8*x+1;p='-'*w+'\\n'\nfor v in['*',*[f'/{\" \"*i}\\\\'for i in range(1,w-1,2)],p+p.join([''.join(f'{\"\".join([f\"|{(a*3)[:3]:^7}\"]*x)}|\\n'for a in(*' -','| |',*'- '))]*y)+p]:print(v.center(w))",
        "w,h=input();W=w*4\nfor i in range(~W,h*6+1):print['-'[i%(h*6):]*(W-~W)or['  %s  '%' -|-  - -  -|- '[~i%6::5],'-'*7][i%6<1].join('|'*-~w),' '*~i+['/%*c'%(w*8-~i*2,92),'*'][W<-i]][i<0]"
    ],
    "four-distinct-8-bit-integers": [
        "lambda x,y:(k:=~x&1|~y&2,k+4)",
        "lambda s:[*{0,1,2,3}-s][:2]"
    ],
    "where-will-your-buddies-sit": [
        "s=input()\nn=int(input())\nc='A'\nt=sorted(set(s+c))\nF=len(t)\nf=list(s)\nfor i in range(n):\n I=f.index(t[(i+1)%F]);c,f[I]=f[I],c\nprint(''.join(f)+'\\nIt is '+c+\"'s turn.\")",
        "L=input()\nS=sorted(L)+[\"A\"]\ni=0\nexec(\"L=L.replace(S[i],S[i-1]);i=-~i%len(S);\"*int(input()))\nprint(L+\"\\nIt is %s's turn.\"%S[i-1])",
        "s=input()\nS=sorted(s+'A')*999\nexec(\"y,*S=S;s=s.replace(S[0],y);\"*int(input()))\nprint(s+\"\\nIt is %s's turn.\"%y)",
        "a,s='A',input()\nexec\"b=a<max(s)and min(e for e in s if e>a)or'A';s=s.replace(b,a);a=b;\"*input()\nprint s,b"
    ],
    "are-they-connected-by-a-brussels-choice": [
        "def f(*p):a=`min(p)`;return max(a[:i]+`2*int(a[i:j])`+a[j:]==`max(p)`for j in range(len(a)+1)for i in range(j))",
        "lambda*x:(a:=str(min(x)))and{str(max(x))}&{a[:i]+str(2*int(a[i:j]))+a[j:]for j in range(len(a)+1)for i in range(j)}"
    ],
    "take-cr-and-lf-literally": [
        "def f(s):\n i=n=0;l=''\n for c in s:l,n,i=[l,l+c,l+' '*i*n+c,n,1,0,0,i,i+1]['\\r\\n'.find(c)%3::3]\n print l",
        "def f(s):\n i=n=0\n for c in s:k='\\r\\n'.find(c);a=k&1;print(end=-k*' '*i*n+c*a);n=k>0;i=i*a-k//2"
    ],
    "draw-my-contours": [
        "l=[[j/10for j in i]for i in input()]\nfor i,j in enumerate(l[:-1]):print''.join('_ '[h==l[i+1][g]]+'| '[h==j[g+1]]for g,h in enumerate(j[:-1]))+'_ '[j[-1]==l[i+1][-1]]\nprint''.join(' '+'| '[i==j]for i,j in zip(l[-1],l[-1][1:]))",
        "lambda a:(lambda x:'\\n'.join(''.join('_ '[x==z]+'| '[x==y]for x,y,z in zip(r,r[1:]+r[-1:],q))for r,q in zip(x,x[1:]+x[-1:])))([[v/10for v in r]for r in a])"
    ],
    "parse-a-two-dimensional-syntax": [
        "lambda g,r=0,c=0:g[r][c]+'(%s)'%','.join([p(g,R,c)for R in range(r+1,len(g))if c<len(g[R])and' '!=g[R][c]][:1]+[p(g,r,C)for C in range(c+1,len(g[r]))if' '!=g[r][C]][:1])*g[r][c].isupper()",
        "def r(i,y=0,x=0):\n c=i[y][x];z=[]\n for t in\"pq\":\n    p=q=0\n    try:\n     while\" \"==i[y+p][x+q]or 1>p+q:exec t+\"+=1\"\n     z+=[r(i,y+p,x+q)]\n    except:1\n return c+\"(%s)\"%\",\".join(z)*c.isupper()"
    ],
    "whats-the-time": [
        "t=[x.split(':')for x in raw_input().split()]\na,b,c=[int(x[0])*60+int(x[1])for x in t]\nprint[\"The correct time is \"+':'.join(t[[(c+a)%720%(b/2)<1,2][(a+b)%720%(c/2)<1]]),\"Look at the sun\"][(a-b)%240<1]",
        "L=input().split()\nf=lambda x:int(x[:2])*60+int(x[3:])\ns=\"\"\nfor a in L:s=[s,s and\"Look at the sun\"or\"The correct time is \"+a][(sum(map(f,L))-3*f(a))%720<1]\nprint(s)"
    ],
    "can-jimmy-escape-the-ghosts": [
        "def g(I,G,W,w,h):\n u,v=I.real,I.imag;R=1-(w-1>u>0<v<h-1);H=[z+cmp(u,z.real)+cmp(v,z.imag)*(u==z.real)*1jfor z in G]\n for d in(R<1>(I in H+W))*range(4):J=I+1j**d;R|=(J in W)<g(J,H,W+[I],w,h)\n return R",
        "def f((x,y),G,M,U=[]):\n R=1-(len(M[0])-1>x>0<y<len(M)-1);H=[(u+cmp(x,u),v+cmp(y,v)*(u==x))for u,v in G];d,e=0,1\n for _ in' '*4*(R<1>((x,y)in H)):J=z,w=x+d,y+e;d,e=-e,d;R|=M[w][z]>(J in U)<f(J,H,M,U+[J])\n return R"
    ],
    "generate-the-shortest-de-bruijn": [
        "f=lambda a,n:(a[:n]in a[1:])*a[n:]or max((f(c+a,n)for c in{*a}),key=len)",
        "def f(a,n):\n s=a[-1]*n\n while 1:\n    for c in a:\n     if((s+c)[len(s+c)-n:]in s)<1:s+=c;break\n    else:break\n print s[:1-n]"
    ],
    "decode-the-void": [
        "f=lambda l:len(l)and f(l[0])*2+1<<f(l[1:])",
        "f=lambda n:[[[]]*(n<0),[[]]*abs(n)]\ng=lambda l:[-1,1][not l[0]]*len(l[1])"
    ],
    "ihateoddnumbers": [
        "lambda x:[x][x%2]",
        "lambda n:n/(~n%2)",
        "lambda x:x//(1-x%2)",
        "lambda x:x//((x+1)%2)",
        "i=input()\nif int(i)&1:raise Exception\nelse:print(i)",
        "i=int(input())\nif i%2==0:\n    print(i)\nelse:\n    raise Exception('')",
        "lambda x:x&1and a or x",
        "lambda n:n<<n%-2"
    ],
    "1-2-miss-a-few-99-100": [
        "print ', '.join(map(str,(4-3,5-3,'miss a few',33*3,5*5*4)))",
        "8*8+35 = 99",
        "lambda:f\"{3//3}, {8//4}, miss a few, {3*4*8+3}, {4*5*5}\""
    ],
    "sort-an-integer-list": [
        "def f(s):m=min(s);print m;f(s-{m})",
        "lambda l:[l.pop(l.index(min(l)))for _ in 1*l]",
        "lambda l:[i for i in range(min(l),max(l)+1)if i in l]",
        "def f(z):\n while z:m=min(z);z.remove(m);yield m"
    ],
    "write-a-microwave-timer": [
        "def f(s):x,y=map(int,s.split(\":\"));return min(x*60+y,6e3)",
        "lambda t:min(int(t[:2])*60+int(t[3:]),6e3)",
        "lambda x:min(int((k:=x.split(\":\"))[1])+60*int(k[0]),6e3)"
    ],
    "vowels-up-consonants-down": [
        "lambda s:[(c*2).title().strip('aeiou')[-1]for c in s]",
        "x=''\nfor i in input():\n if i in'aAeEiIoOuU':x+=i.upper()\n else:x+=i.lower()\nprint(x)",
        "lambda s:bytes(c^(c^~68174912>>c%32)&32for c in s)",
        "lambda s:[[c,c.upper()][c in\"aeiou\"]for c in s.lower()]",
        "f=lambda c:c.upper()if c in 'aeiou'else c.lower();lambda s:''.join(map(f,list(s)))",
        "lambda s:''.join(l.upper()if l in'aeiouAEIOU'else l.lower()for l in s)"
    ],
    "generating-a-single-string-with-an-oxford-comma-from-a-list": [
        "s=input()\nl=len(s)-1\nprint', '.join(s[:l])+', and '[l<2:]*(l>0)+s[l]",
        "s=input()\nd=s.pop()\nprint\", \".join(s)+\", and \"[8-7*len(s):]+d",
        "(\" and\", \", and\")[len(i) < 2].join(\", \".join(i).rsplit(\",\",1))",
        "l=['1','2','3']\nprint l[0] if len(l)<2 else (', '.join(l[:-1])+(',' if len(l)>2 else '')+' and '+l[-1])"
    ],
    "non-unique-elements": [
        "list(set(filter(lambda x:d.count(x)>1,d)))",
        "[x for x in{*d}if~-d.count(x)]",
        "lambda",
        "list({x for x in i if i.count(x)>1})",
        "{_ for _ in d if d.count(_)>1}"
    ],
    "reimplementing-square-root": [
        "def s(x):\n t=1.0\n while 1e-9<abs(x-t*t):t-=(t*t-x)/2/t\n return t",
        "input()**.5",
        "f=.5.__rpow__",
        "n=input()\ni=0\nwhile i*i<n:i+=1e-9\nprint i",
        "def s(x):t=1.;exec\"t=(t+x/t)/2;\"*99;return t"
    ],
    "emulate-a-7-segment-display": [
        "s=raw_input()+'0\\n'\nfor i in`0x623C239E38D2EAA1`:print s[int(i)],",
        "a=map(int,raw_input())\nfor i in(0,6,3):print' .. '*a[i]+('\\n'+' .'[a[5-i/6]]+'  '+' .'[a[1+i/6]])*(2*(i!=3))",
        "print (' {0}\\n{5} {1}\\n {6}\\n{4} {2}\\n {3}').format(*map(lambda x:int(x)and'*'or' ',raw_input()))"
    ],
    "round-up-my-number": [
        "lambda a,b:-a/b*-b",
        "lambda a,b:a+-a%b"
    ],
    "all-together-now": [
        "lambda s:s==sorted(s,key=s.index)",
        "a=lambda s:~(s[0]in s.lstrip(s[0]))&a(s[1:])if s else 1"
    ],
    "shortest-minmod-function": [
        "lambda l:reduce(lambda G,H:[H,G][(G>H)^(G>0)]*(G*H>0),l,l[0])",
        "lambda",
        "lambda l:reduce(lambda a,b:sorted([a,b,0])[1],l,l[0])"
    ],
    "character-frequency-in-a-string": [
        "lambda s:sorted({*zip(s,map(s.count,s))})",
        "lambda s:{c:s.count(c)for c in sorted(s)}"
    ],
    "output-the-hebrew-alphabet": [
        "#coding:cp862\nprint('\u05d0\u05d1\u05d2\u05d3\u05d4\u05d5\u05d6\u05d7\u05d8\u05d9\u05db\u05da\u05dc\u05de\u05dd\u05e0\u05df\u05e1\u05e2\u05e4\u05e3\u05e6\u05e5\u05e7\u05e8\u05e9\u05ea')",
        "print(\"\u05d0\u05d1\u05d2\u05d3\u05d4\u05d5\u05d6\u05d7\u05d8\u05d9\u05db\u05da\u05dc\u05de\u05dd\u05e0\u05df\u05e1\u05e2\u05e4\u05e3\u05e6\u05e5\u05e7\u05e8\u05e9\u05ea\")"
    ],
    "different-way-forward": [
        "f=lambda n,L:n and f(n-1,[x-y for x,y in zip(L[1:],L)])or L",
        "def a(b,c):\n if c<1:return b\n d=[];e=b[0]\n for f in b[1:]:d+=f-e,;e=f\n return a(d,c-1)",
        "f=lambda x,n:n and f([x[1]-x.pop(0)for i in x[1:]],n-1)or x"
    ],
    "driftsort-an-array": [
        "lambda l:sorted(l)*(map(cmp,l[-1:]+l,l).count(1)<3)",
        "def f(l):g=sorted(l);return g if any(l[x:]+l[:x]==g for x in range(len(l)))else 1>2",
        "s,N=sorted,lambda x:s(x)*(str(s(x))[1:-1]in str(x+x))"
    ],
    "rot-transform": [
        "f=lambda a,b,*r:(a,)+(r and f(b+r[0],a,*r[1:]))",
        "lambda a:[a[~i%2]+sum(a[i:1:-2])for i in range(1,len(a))]",
        "l=input();print l[0]\nwhile l[2:]:k=l[1]+l[2];print k;l[:3]=k,l[0]"
    ],
    "multiply-elements-of-the-dihedral-group": [
        "p=q=0\nfor b in input():p^=b;q+=~p/~b^p\nprint q%4*[0]+p*[1]",
        "f=lambda x,s=str.replace:f(s(s(s(x,\"r\"*4,\"\"),\"ss\",\"\"),\"sr\",\"rrrs\"))if x not in\"rrrs\"else x",
        "f=lambda s,r=str.replace:f(s)if s!=(s:=r(r(r(s,\"rrrr\",\"\"),\"ss\",\"\"),\"sr\",\"rrrs\"))else s"
    ],
    "un-pipe-an-elixir-expression": [
        "lambda s:reduce(lambda r,x:x[:-1]+r+')',s.split('|>'))",
        "*a,b=input().split(\"|>\")[::-1]\nprint(*[f[:-1]for f in a],b,\")\"*len(a))"
    ],
    "sort-by-largest-digits": [
        "def f(l):l.sort(cmp,lambda n:sorted(set(`n`))[::-1],1)",
        "lambda a:sorted(a,key=lambda x:sorted(set(`x`))[::-1])[::-1]"
    ],
    "generate-lucky-numbers": [
        "n=input()\nL=range(1,2**n)\nfor r in L:r+=r<2;map(L.remove,L[r-1::r])\nprint L[:n]",
        "n=input()\nL=range(-1,n*n+9,2)\ni=2\nwhile L[i:]:L=sorted(set(L)-set(L[L[i]::L[i]]));i+=1\nprint L[1:n+1]"
    ],
    "sign-swapping-sums": [
        "f=lambda a,s={0}:a and f(a[1:],s|{u+a[0]for u in s})or len(s)",
        "k=1\nfor n in input():k|=k<<n\nprint bin(k).count('1')",
        "s={0}\nfor n in input():s|={t+n for t in s}\nprint len(s)"
    ],
    "magic-popcount-numbers": [
        "k=1\nexec\"print'0x%0128x'%int(256/k*('0'*k+'1'*k),2);k*=2;\"*9",
        "2**512/(2**2**k + 1)"
    ],
    "find-the-center": [
        "lambda x:chr((ord(x[len(x)//2])+ord(x[~len(x)//2]))//2)",
        "lambda s:chr(ord(s[(l:=len(s)//2)])+ord(s[~l])>>1)"
    ],
    "the-answer-to-life-the-universe-and-ascii-art": [
        "if(j%27<1)*j",
        "x=bin(int('OC5POO6MZYQNBWY0RP6BKBZCOZL13MIAB6I8YZ5N7LXSZBVKX7GC57AW5631YCJ6XCLC',36))[2:].replace('1',' ')\nfor c in'theanswertolifetheuniverseandeverything'*4:x=x.replace('0',c,1)\nwhile x:y,x=x[:27],x[27:];print y"
    ],
    "imitate-an-ordering": [
        "lambda s,p,a=sorted:[a(s)[a(p).index(x)]for x in p]",
        "lambda*l:map(dict(zip(*map(sorted,l))).get,l[0])"
    ],
    "export-the-path-variable-line-by-line": [
        "environ",
        "os.environ"
    ],
    "even-and-odd-numbers": [
        "x=\"E\";z= 1\nwhile \tz\t<101:\tx=x+ [\"E\"\t,\tf' {z} ' ] [z%2] ;z=z+ 1\nexit\t(\tx)",
        "exit\t([ [\"E\"\t,\tj] [j%2]for\tj\t in\t eval\t('ran' +\"g\"+\"e\")(101 ) ] )"
    ],
    "product-of-divisors": [
        "f=lambda i,k=1:k>i or k**(i%k<1)*f(i,k+1)",
        "lambda _:_**(sum(_%-~i<1for i in range(_))/2)",
        "m*=n%i>0 or i"
    ],
    "draw-a-hollow-square-of-with-given-width": [
        "n=i=input()\nwhile i:print'#%s#'%((' #'[i%n<2])*(n-2));i-=1",
        "n=int(input())\nfor x in range(n):\n r=list(' '*n);r[0]=r[-1]='#'\n if x%(n-1)==0:r='#'*n\n print(\"\".join(r))",
        "x=input();h='#';print h*x+'\\n'+(h+' '*(x-2)+h+'\\n')*(x-2)+h*x",
        "m=input()-2\nfor c in'#'+' '*m+'#':print'#'+m*c+'#'",
        "f=lambda n:'#'*n+'\\n#%s#'%(' '*(n-2))*(n-2)+'\\n'+'#'*n",
        "def f(j):r=range(j);print'\\n'.join(''.join(' #'[x*y<1or max(x,y)==j-1]for y in r)for x in r)"
    ],
    "ascii-art-uncompression-from-a-base-n-number": [
        "f=lambda n,s:n and f(n//len(s),s)+s[n%len(s)]or''",
        "f=lambda n,s:n and f(n/len(s),s)+s[n%len(s)]or''"
    ],
    "split-a-byte-array-into-a-bit-array": [
        "lambda a,n:[int(''.join(bin(x+256)[3:]for x in a+[0]*n)[n*i:][:n],2)for i in range((len(a)*8-1)/n+1)]",
        "j=''.join\nlambda s,n:[int(j(k),2)for k in zip(*[iter(j([bin(i)[2:].zfill(8)for i in s+[0]]))]*n)][:-1]",
        "def d(a, b):\n    o=[];o+=([str(bin(g)).lstrip('0b')if str(type(g))==\"<class 'int'>\"else str(bin(ord(g))).lstrip('0b')for g in a]);n=[''.join(o)[i:i+b]for i in range(0,len(''.join(o)),b)];v=[]\n    for t in n:\n        if len(t)!=b:n[n.index(t)]=str(t)+'0'*(b-len(t))\n    v+=([int(str(f),2)for f in n])\n    return v"
    ],
    "the-characters-in-the-string-go-round-and-round": [
        "def f(s,w,h):print s[:w];i=0;exec'print s[~i]+\" \"*(w-2)+s[w+i];i+=1;'*(h-2);print s[1-h:w+h-3:-1]",
        "s,m,n=input()\nprint s[:n]\nfor i in range(m-2):print s[~i]+' '*(n-2)+s[n+i]\nprint s[1-m::-1][:n]"
    ],
    "xor-two-strings": [
        "f=lambda a,b:chr(ord(a[0])^ord(b[0]))+f(a[1:],b[1:])if a and b else a+b",
        "lambda*a:''.join(map(lambda x,y:chr(ord(x or'\\0')^ord(y or'\\0')),*a))"
    ],
    "find-the-10-adic-cube-root-of-3": [
        "lambda k:pow(3,10**k*2/3+1,10**k)",
        "n=p=1;exec\"p*=10;n+=3*(3-n**3)%p;\"*input();print n"
    ],
    "bertrands-primes": [
        "r=m=k=P=2\nwhile k:\n P*=k;k+=1\n if k>m:print r;m=r*2\n if P%k:r=k",
        "n=2\nwhile 1:\n if all(n%i for i in range(2,n)):print n;n*=2\n n-=1",
        "k=2\nwhile 1:\n print k;k+=k\n while any(k%u<1for u in range(2,k)):k-=1"
    ],
    "pad-a-jagged-array-to-be-square": [
        "def f(l,v):x=max(map(len,l+[l]));return[a+[v]*(x-len(a))for a in l+[[]]*(x-len(l))]",
        "def f(M,v):n=max(map(len,M+[M]));print[(r+[v]*n)[:n]for r in(M+[[]]*n)[:n]]"
    ],
    "just-enough-ones": [
        "a=lambda n:n<1if n<2else~-n*n*(a(n-1)+(n-1)/2*a(n-2))",
        "def f(n):\n  if n<2:\n    return 1\n  return n*f(n-1)\ndef o(n):\n  if n < 2:\n    return 0\n  p=0\n  r=(f(n)**2)/4\n  for i in range(n+1):\n    p+=(-2)**i*f(2*n-2*i)/(f(i)*(f(n-i)**2))\n  return int(p * r)"
    ],
    "the-sum-of-consecutive-odd-numbers": [
        "f=lambda n,k=0,*r:n-sum(r)and f(n,k+1,*range(k%n|1,k/n,2))or r",
        "lambda n,r=range:[r(i,j+1,2)for i in r(1,n+1,2)for j in r(i,n+1,2)if(i+j)*(2+j-i)==4*n][0]",
        "def f(s):\n  d={k:v for k,v in{a:(1-a+((a-1)**2+4*s)**(.5))/2 for a in range(1,s,2)}.items()if int(v)==v};m=max(d.keys(), key=(lambda k: d[k]));return list(range(int(m),int(m+2*d[m]),2))",
        "def c(q,l,i):\n    if sum(l)0:\n        l.append(i)\n        return c(q,l,i+2)\n    elif sum(l)>q:\n        l.pop(0)\n        return c(q,l,i)\n    else:\n        print(l)\nc(q,[1],1)",
        "lambda n,r=range:[v for v in[r(1,n+1,2)[i:j]for i in r(n)for j in r(n+1)]if sum(v)==n][0]",
        "lambda n,r=range:[[*r(s,e+1,2)]for s in r(1,n+1,2)for e in r(s,n+1,2)if(s+e)*(2+e-s)==4*n][0]",
        "f=lambda n,R=[1]:n-sum(R)and f(n,[R+[R[-1]+2],R[1:]][sum(R)>n])or R",
        "def f(N):\n for n in range(N):\n    x=(n*n+N)**.5-n\n    if x%1==0:return[2*(k+n)+1for k in range(int(x))]",
        "def f(n,R=range):r=R(1,n,2);print[i for w in R(1,len(r)+1)for i in[r[j:j+w]for j in R(len(r)-w+1)]if sum(i)==n][-1]"
    ],
    "make-big-rocks-into-small-rocks": [
        "s=input()\nn=1\nwhile s>3:s=s/4*2;n*=2;print`s`*n",
        "n=input()\nwhile n[0]>2:n=len(n)*2*[n[0]/4<<1];print n",
        "f=lambda s,n=1:[s]*n+(f(s/4*2,n*2)if s>3else[])"
    ],
    "how-many-times-should-i-press-this": [
        "lambda x:sum((ord(i)+~(i>\"s\"))%3+3*(i in\"sz\")+(i>\" \")for i in x)",
        "lambda x:sum((ord(i)-8)%3.15//1+3*(i>'y')+(i>' ')for i in x)",
        "lambda x:sum(j.find(i)+1for j in' !abc!def!ghi!jkl!mno!pqrs!tuv!wxyz'.split('!')for i in x)",
        "lambda x:sum('behknquxcfilorvysz'.find(c)/8+2for c in x)"
    ],
    "finding-sub-palindromes": [
        "r=raw_input()\ni,l=0,len(r)\nj=l\na=[]\nwhile i<l-1:\n t=r[i:j];j-=1\n if t==t[::-1]:a+=['\"'+t+'\"']\n if j<i+2:i+=1;j=l\nprint\", \".join(set(a))",
        "s=lambda t:(t[1:]or())and(t,)*(t==t[::-1])+s(t[1:])+s(t[:-1])\nprint set(s(input()))",
        "r=raw_input()\nl=range(len(r))\nprint', '.join(set('\"'+r[i:j+1]+'\"'for i in l for j in l if i<j and r[i:j+1]==r[i:j+1][::-1]))"
    ],
    "golf-me-a-world-clock": [
        "input()",
        "hours, minutes"
    ],
    "alternating-power-fibonacci-sequence": [
        "def f(n,a=0,b=1):\n l=bin(n)[2:]\n for _ in l:a,b=b,a+b\n return a*-(len(l)%2or-1)",
        "f=lambda n:n<1or f(n/4)-f(n/2)"
    ],
    "take-a-byte-out-of-it": [
        "lambda n:max(n%2**i|n>>i+8<<i for i in range(len(bin(n))-9))",
        "f=lambda n:n>>8and max(n>>8,2*f(n/2)+n%2)"
    ],
    "rearrange-a-number-into-alphabetical-order": [
        "lambda n:''.join(sorted(list(n),key=lambda s:\"9487216503\"[int(s)]))",
        "def s(n):\n    l=list(\"8549176320\")\n    return \"\".join(sorted(list(n),key=lambda x: l.index(x)))",
        "def f(n):\n s=list(map(int,str(n)))\n return int(\"\".join(list(map(str,list(map(lambda x:x[1],sorted(list(zip(list(map(lambda t:{0:\"zero\",1:\"one\",2:\"two\",3:\"three\",4:\"four\",5:\"five\",6:\"six\",7:\"seven\",8:\"eight\",9:\"nine\"}[t],s)),s)))))))))",
        "lambda x:''.join(i[1]for i in sorted(['9487216503'[int(j)],j]for j in x))"
    ],
    "evaluating-dotty-strings": [
        "x,*s=[1+(c>'.')for c in input()]\nwhile s:a,b,*s=s;x=[x*a,x+a][-b]\nprint(x)",
        "x=input()\nl=[0,0]\nfor _ in x:\n t=len(l)-2<2\n l=[[[0,0,l[-2]*l[-1]],l+[2]][t],[[0,0,sum(l)],l+[1]][t]][_=='.']\nprint(l[-1])"
    ],
    "determine-a-strings-scrabble-score-and-validity": [
        "b=2;i=s=0;w=input()\nwhile i<26:n=w.count(chr(i+65));q=int('9224c232911426821646422121'[i],16);b-=max(0,n-q);s+=min(n,q)*int('1332142418513113a11114484a'[i],16);i+=1\nprint([\"Invalid\",s][-b<1<len(w)<16])",
        "S=input().lower()\nX={chr(97+i):[int(y)+1]*(77-ord(x))for i,(x,y)in enumerate(zip('DKKIAKJKDLLIKGEKLGIGIKKLKL','02210313074020029000033739'))}\nB=[0,0]\ntry:\n if len(S)>15:1/0\n print sum(map(lambda x:X[x].pop()if len(X[x])>0 else B.pop(),S))\nexcept:\n print \"invalid\"",
        "s,i,c,r=input(),0x1a24182424416141611a2381612341151891243224c142232391,[],[]; p=len(s)\nfor w in s:e=8*ord(w)-520;c+=[s.count(w)<=i>>e+4&15];r+=[i>>e&15]\nprint(['Invalid',sum(r)][all([p>2,p<15]+c)])"
    ],
    "laguerre-polynomials": [
        "L=lambda n,x:((2*n-1-x)*L(d:=n-1,x)-d*L(n-2,x))/n if n>1else 1-n*x",
        "f=lambda n,x:n<1or((2*n-1-x)*f(n-1,x)-~-n*f(n-2,x))/n",
        "L=lambda k,x:k<1or[1-x,L(w:=k-1,x)*(k+w-x)-L(k-2,x)*w][k>1]/k"
    ],
    "lets-see-some-action": [
        "n=input();s,x=60-3*n,min(n,20)\nfor e in['  _',\"_/ \",\"o  \"]:p=e+(e[::-1],(' \\_',' \\/')[s<1])['/'in e];print\" \"*x+p+\" \"*s+(p[-1]+p[1:-1]+p[0]).replace(\"//\",\"\\/\")",
        "n=input()\nfor r in\"  __  \",\"_/  \\_\",\"o    o\":print((n*' ')[:20]+r+(60-3*n)*' '+r).replace('__/','/\\/')",
        "p=lambda x:\"u  __u_/  \\_uo    o\".replace(\"u\",\"\\n\\033[%dC\")%(x,x,x)+\"\\033[4A\";i=min(20,input());print p(i)+\"\\n\"+p(66-i*2)+\"\\n\\n\\n\\033[25C/\\\\\"*(i==20)"
    ],
    "determine-win-in-tictactoe": [
        "b=eval(raw_input())\ns=map(sum,b)\nw,l='win','lose'\ne=\"if min(s)<1:print l;a\\nif max(s)>2:print w;a\"\nexec e+'\\ns=map(sum,zip(*b))\\n'+e\nm=b[1][1]\nfor i in 0,2:\n if m==b[0][i]==b[2][abs(i-2)]:print[l,w][m];a\nprint'cat'",
        "def t(b):print['win'if w&b==w else'lose'if w&~b==w else'cat'for w in 448,56,7,292,146,73,273,84][0]",
        "def t(b,p):\n    s,c,l,w=0,\"cat\",\"loose\",\"win\"\n    for i in 1,2,3,4:\n        u=2*i-1  \n        a=i*i-5*i+3\n        if b[4]==b[4+i]==b[4-i]:\n            if p==b[4]:s+=1\n            else:s-=1            \n        if b[u]==b[u+a]==b[u-a]:\n            if p==b[u]:s+=1\n            else:s-=1\n    if s>0:c=w\n    if s<0:c=l\n    return c"
    ],
    "additive-persistence": [
        "def f(n,i=0,p=0):p=p or n;f(sum(map(int,str(n))),i+1,p)if n>9else print(p,i)",
        "f=lambda n,c:n>9and f(sum(map(int,str(n))),c+1)or c\nwhile 1:n=int(raw_input());print n,f(n,0)",
        "while 1:f=lambda n:n//10and 1+f(sum(map(int,str(n))));i=input();print(i,f(int(i)))",
        "f=lambda x,i=0:f(`sum(int(i)for i in x)`,i+1)if len(x)>1else i",
        "f=lambda n:0if n<10else-~f(eval('+'.join(str(n))))"
    ],
    "can-even-numbers-become-prime": [
        "lambda n:sum(all(z%v for v in range(2,z))for i in range(3,n)for z in[int(`i+1`+`i`)])",
        "lambda n:sum(all(z%v for v in range(2,z))for i in range(4,n+1)for z in[int(`i`+`i-1`)])"
    ],
    "divinacci-sequence": [
        "f=lambda n:sum(a for k in[1,2][:n]for a in range(1,3**n-8)if f(n-k)%a<1)or n",
        "f=lambda n:+(n<3)or g(f(n-1))+g(f(n-2))\ng=lambda n,i=1:n>=i and(n%i<1)*i+g(n,i+1)"
    ],
    "monday-mini-golf-2-truncating-long-text": [
        "def t(s,l):a=s[:l-2];return s[:max(a.rfind(' '),a.rfind('-'))]+'...'if' 'in a or'-'in a else a[:-1]+'...'",
        "t,l=input()\nu=t[:l-2]\nprint(t,u[:max(map(u.rfind,' -'))]+'...')[l<len(t)]"
    ],
    "triangle-of-triangles": [
        "f=lambda n,b=['*'],p=1:p>2 and b or f(n,[f'{2*r*l+l:^{(2*n-1)**p}}'for r in range(n)for l in b],p+1)",
        "lambda n:[f\"{(o%n*'**'+'*').center(w:=2*n-1)*(o//n*2+1):^{w*w}}\"for o in range(n*n)]"
    ],
    "is-it-a-vampire-number": [
        "f=lambda n,k=2,S=sorted:k<n and(k%10>n%k<(len(`k`)==len(`n/k`)<S(`k`+`n/k`)==S(`n`)))|f(n,k+1)",
        "def f(n,s=sorted):x=s(`n`);l=10**(len(x)/2);return any(x==s(`i`+`n/i`)for i in range(l/10,l)if i%10and n%i<1)"
    ],
    "cat-a-mouse-ascii-art-pointers": [
        "i=input()\nm='@'*i*2\ns=' '*i\nfor z in[c*i*'@'for c in range(1,8)]+[m*2,m+s+m,m[:i]+s*2+m]+sum([[s*d+m]*2for d in(4,5,6)],[]):print'\\n'.join([z]*i)",
        "n=input()\nfor k in range(16*n):print''.join(n*' @'[j<=k/n<max(7,10-j)or-1<k/n/2-j<2]for j in range(8))"
    ],
    "sequentially-divisible": [
        "def f(l,n=1):\n while n:\n\tn+=1\n\tif all((n+i)%v<1for i,v in enumerate(l)):return n",
        "def f(a,c=0):\n while [j for i,j in enumerate(a) if(c+i)%j<1]!=a:c+=1\n return c",
        "f=lambda x,n=1:all(j%k<1for j,k in enumerate(x,n))or-~f(x,n+1)"
    ],
    "how-many-times-will-a-bell-tower-ring": [
        "a=lambda x,y:sum(1+i%12for i in range(x-1,y+24*(x>y)))",
        "f=lambda a,b:~-a%12-~(b-a and f(-~a%24,b))",
        "f=lambda x,y:(x%12or 12)+(x-y and f(-~x%24,y))"
    ],
    "cook-me-a-character-meal": [
        "lambda i,m:min(i.count(c)/m.count(c)for c in m if\" \"<c)",
        "f=lambda l,m:all(e in l and[l.remove(e)]for e in m if' '<e)and-~f(l,m)"
    ],
    "bit-floating-sequence": [
        "f=lambda i,n=0,b=1:[n][i:]or[n]+f(i-1/b,n^b+b/2,b>>i or 2*b)",
        "n=0\ni=2**input()-1\nwhile n<=i:print n;d=n&(~-n^i)or 1;n+=n+d>i or d",
        "n=input()\na=0\nprint 0\nwhile n:\n for j in range(n):print a+2**j\n n-=1;a+=2**n",
        "y=n=2**input()\nwhile y:print n-y;y=y&y-1or~-y",
        "def f(n,c=0):\n while c<2**n:yield c;r=c&-c;c+=c+r>>n or r or 1"
    ],
    "invert-some-switches-on-a-switchboard": [
        "lambda x,s,i=0:''.join([c,'^v'[c<'v']][c>s and(i:=i+1)in x]for c in s)",
        "lambda a,s:reduce(lambda(t,i),c:(t+[c,'^v'[c<'v']][c>'-'and i in a],i+(c>'-')),s,('',0))[0]",
        "def f(i,y,x=1):\n for c in y:q=c>'-';p=len(i)and x==i[0]*q;print([c,\"v^\"[c>'^']][p],end='');x+=q;i=i[p:]"
    ],
    "draw-an-alphabet-party-hat": [
        "n=26;s=''\nwhile n:n-=1;s=chr(97+n)+s;print n/2*' '+s",
        "i=91;exec'i-=1;print`map(chr,range(i,91))`[2::5].center(26);'*26"
    ],
    "golf-a-string-twister": [
        "s=list(zip(*open(0).readlines()))[:-1]\nr=[[s[i][(j-i)%len(s[i])] for j in range(len(s[i]))] for i in range(len(s))]\nprint('\\n'.join([''.join(l) for l in zip(*r)]))",
        "lambda s:'\\n'.join(\"\".join(s)for s in zip(*[k[-i%len(k):]+k[:-i%len(k)]for i,k in enumerate(zip(*s.split('\\n')))]))"
    ],
    "find-the-rank-of-a-word": [
        "a=[*map(ord,input())]\nf=lambda x:x and x*f(x-1)or 1\nc=[0]*98\nfor C in a:c[C]+=1\nl=len(a)\nF=f(l)\nfor i in c:F//=f(i)\nr=1\nfor x in a:F//=l;l-=1;r+=sum(c[:x])*F;F*=c[x];c[x]-=1\nprint(r)",
        "f=lambda s:s==s*2or f(s[1:])+sum(f(sorted(s[:s.index(c)]+s[s.index(c)+1:])[::-1])for c in{*s}if c<s[0])"
    ],
    "frequency-distribution-of-mixed-dice-rolls": [
        "lambda v:[reduce(lambda a,c:sum([[b+y for b in a]for y in range(c)],[]),v,[0]).count(d)for d in range(sum(v)-len(v)+1)]",
        "lambda*a:reduce(convolution,[x*[1]for x in a])"
    ],
    "analog-is-obtuse": [
        "lambda h,m:min(x:=abs(h%12*30-m*5.5),360-x)",
        "lambda h,m:180-abs(180-(h*30-m*5.5)%360)",
        "h,m=eval(input())\nx=(30*h-5.5*m)\nprint(abs(min(x,360-x)))"
    ],
    "chemistry-101-introduction-to-the-periodic-table": [
        "def f(x):a=(x>71)+(x>99);print((((x-2*(x>1)-8*(x>4)-8*(x>12)+4*a-1)%18+1,(x-(x>17)-14*a)/18+(x>2)+(x>10)+1),'L'),'A')[88<x<104][56<x<72]",
        "lambda x:[(1+(x>2)+(x>10)+min((~-x/18),3)+(x>86),(x+(x>1)*15+((x>4)+(x>12))*10-((x>71)+(x>103))*14)%18+1),\"AL\"[89<x]][57<x<72or 89<x<104]",
        "def f(n):n+=([0,17]+[33]*3+[43]*8+[53]*45+[200]*14+[39]*18+[400]*14+[25]*15)[n];print[(n%18+1,n/18),'L','A'][n/200]",
        "lambda x:((((((((((((((1,1),(18,1))[x>1],(x-2,2))[x>2],(x+8,2))[x>4],(x-10,3))[x>10],(x,3))[x>12],(x-18,4))[x>18],(x-36,5))[x>36],(x-54,6))[x>54],'L')[x>56],(x-68,6))[x>71],(x-86,7))[x>86],'A')[x>88],(x-100,7))[x>103]"
    ],
    "perimeter-of-conway-hexagon": [
        "f=lambda a,b,c,n=3:n and(a+b+c)*(c*c/a/b-a/b-b/a+2)**.5+f(b,c,a,n-1)",
        "lambda*t:eval(\"+((-(%s-%s)**2+%s**2)/%s/%s)**.5\"*3%(t*5))*sum(t)"
    ],
    "maximum-run-between-identical-elements": [
        "lambda x,e=enumerate:max(sum(x[i:j+1])for i,a in e(x)for j,b in e(x)if(a==b)*j>i)",
        "f=lambda l:l and max(f(l[1:]),[sum(l)]*(l.pop()in l[:1]),f(l))",
        "lambda x:max(sum(x[i:j+1])for i,v in enumerate(x)for j in range(i+1,len(x))if v==x[j])"
    ],
    "its-spanish-time": [
        "h,m=map(int,input().split(':'))\nt=\"y\"\nd=\"yunoydosytresycuatroycincoyseisysieteyochoynueveydiezyonceydoceytreceycatorceycuarto\".split(t)*2\nif m>30:h=h%12+1;m=60-m;t=\"menos\"\nprint([\"Es la una\",\"Son las \"+d[h]][h>1],t,[d[m]or\"cero\",[\"dieci\",\"veint\"+'ei'[m>20],\"media\"][m//10-1]+d[m%10]][m>15]+\".\")",
        "d='cero uno dos tres cuatro cinco seis siete ocho nueve diez once doce trece catorce quince dieciseis diecisiete dieciocho diecinueve veinte xuno xdos xtres xcuatro xcinco xseis xsiete xocho xnueve treinta';d=str(d.replace('x','veinti')).split();t=input().split(':');i=int(t[1]);j=int(t[0]);print([\"Son las\",\"Es la\"][1<(2*j+i/30)%24<=3],[d[[j%12+1,j][i<31]],'una'][j==1],'y'if i<31 else'menos',d[min(i,60-i)])"
    ],
    "is-this-a-legal-date-april-fools-edition": [
        "lambda s,h=100:13>(m:=s//h%h)>0<s//h//h<(30-(s%4<1),31+(m in(4,6,9,11)))[m!=2]",
        "lambda s:13>(m:=s//100%100)>0<s//1e4<30-[s%4<1,m%-1.76][m!=2]"
    ],
    "fold-a-string-into-a-triangle": [
        "a=input()\nl=len(a)//4\nprint(l*\" \"+a[0])\nfor i in range(1,l):print((l-i)*\" \"+a[i]+(2*i-1)*\" \"+a[4*l-i])\nprint(a[l:3*l+1])",
        "a=input()+\" \"\nk=j=len(a)/4\nwhile j:print j*\" \"+a[0]+(2*(k-j)-1)*\" \"+a[-1];a=a[1:-1];j-=1\nprint a"
    ],
    "ascii-art-flight-simulator": [
        "i,s,p,l,r,c,x=input(),' ','--O--','____|','|____',0,4\nwhile x>=0:print'\\n'.join([s*i+p]+[s*15]*x+[l+s*5+r])+'\\n';c+=1;x-=1;i=((i,i-1)[i>5],i+1)[i<5]\nprint l+p+r",
        "n=input();h=5\nwhile h:print' '*n+'--O--'+'\\n'*h+'____|     |____\\n';n-=cmp(n,5);h-=1\nprint'____|--O--|____'"
    ],
    "find-the-closest-three-digit-hex-colour": [
        "lambda x:'#'+''.join(f\"{(int(x[i:i+2],16)+8)//17:X}\"for i in(1,3,5))",
        "f=lambda x:(f(x[:-2])if x[3:]else\"#\")+f'{(int(x[-2:],16)+8)//17:X}'",
        "lambda x:'#'+''.join(hex(int(int(x[i:i+2],16)/17.+.5))[2:]for i in[1,3,5])"
    ],
    "minimal-power-root": [
        "x=int(input())\na=c=0\nwhile x:\n a+=1;b=a\n while b-c:b,c=b**int(min(str(b))),b\n x-=b!=1and b!=a\nprint(a)",
        "def F(x):m=x**int(min(str(x)));return[int,F][m>x](m)\nx=1\nwhile 1:x<F(x)and print(x);x+=1",
        "lambda n,x=0:n!=x and f(n**min(map(int,str(n))),n)or n"
    ],
    "room-number-locator": [
        "lambda n:{n[:i]+r+n[i+1:]for i,v in enumerate(n)for r in`0x134cd9a07d1e58feab643f7db24102`[int(v)::10]}",
        "lambda r:[r[:i]+[c]+r[i+1:]for i,n in enumerate(r)for c in`ord(u'\u0015\u00cc\u040b>\u009d\u09a4\u01670\u0243D'[n])`]"
    ],
    "integers-sorted-by-their-digital-roots": [
        "f=lambda i,k=1:k>i and sorted(range(k//10,k),key=lambda n:n%-9)[i-k]or f(i,k*10)",
        "lambda n:sorted(range(10**len(`n`)),key=lambda i:(len(`~i`),i%9))[n]+1",
        "n=input()\nb=10**~-len(`n`)\nprint~-b+n/b+n%b*9"
    ],
    "modular-broadcasting": [
        "sum(m)",
        "l=len\nA,B=sorted(input(),key=l)\nA*=l(B)\nfor i in eval(`zip(A,B)`):a,b=sorted(i,key=l);a*=l(b);print map(sum,zip(*i))",
        "lambda y:[map(sum,P(i))for i in P(y)]\ndef P(y):y=sorted(y,key=len);y[0]*=len(y[1]);return eval(`zip(*y)`)"
    ],
    "draw-ascii-boxes-in-boxes": [
        "a,b,c=input()\nr=range(1-a,a,2)\nfor y in r:\n s=''\n for x in r:m=max(x,y,-x,-y);s+=`(m>c)+(m>b)`\n print s",
        "a,_,_=t=input();r=~a\nexec\"r+=2;print sum(10**x/9*10**((a-x)/2)*(r*r<x*x)for x in t);\"*a"
    ],
    "where-to-point-a-low-orbit-ion-cannon-asking-for-a-friend": [
        "lambda p:[x:=min(p)[0]+.1,sum(sorted(b+(d-b)*(x-a)/(c-a)for(a,b),(c,d)in zip(p,p[-1:]+p)if(a<x)^(c<x))[:2])/2]",
        "l=input()\n(B,b),(A,a),(C,c)=min(zip(l[1:]+l,l,l[2:]+l))\nprint.2+B,b+(a+c-b*2)/(A+C-B*2)/5"
    ],
    "write-numbers-as-a-difference-of-nth-powers": [
        "lambda x,n:[(a,b)for b in range(1,x)for a in[(b**n+x)**(1/n)]if a%1==0]",
        "lambda k,n:[(j%k,j/k)for j in range(k,k*k)if(j%k)**n-(j/k)**n==k]"
    ],
    "the-saltine-challenge": [
        "s=\"eJxTiIeDGgiloBBRo6CgpwACcLIGJKaAKlxDmbp4dFADAL+oIFI=\".decode('base64').decode('zip').split('X')\nN=input()\nR=range\nG=map(list,[' '*(7*N+12)]*(2*N+5))\nfor n in R(N):\n for y in R(7):G[2*n+y][7*n:]=s[y]\nG[0][11]='_'\nfor g in G:print''.join(g)",
        "N=input()\nm,n,c,r=12+7*N,5+2*N,3.5,range\nprint''.join(i>m-2and'\\n'or(i%7<(i/c<j<7+i/c)*(i<N*7)or(i+4)%7<(i/c<j+4<2+4*(i>m-3)+i/c)*(i>16))and'|'or j%2<(j*c<i<17+j*c)*(j<n-5)+(j*c<i+22<8+10*(j>n-3)+j*c)*(j>5)and'_'or(i-j*3-min(i/7,~-j/2,N-1)+1)%6<(-3<-~i/7-j/2<3)and'.'or' 'for j in r(n)for i in r(m))"
    ],
    "place-a-glider": [
        "def f(x,y):\n b=([\"|_\"]*10+[\"|\\n\"])*10\n for c in[1,13,22,23,24]:b[c+11*y+x]=\"|*\"\n return\"\".join(b)",
        "x,y=input()\na=[[z for z in'_'*10]for o in'|'*10]\nb=a[y+2]\na[y][x+1]=a[y+1][x+2]=b[x]=b[x+1]=b[x+2]=\"*\"\nfor b in a:print o+o.join(b)+o",
        "def f(x,y):r,x=[list('|_'*10+'|')for i in[1]*10],x*2;r[y][x+3]=r[y+1][x+5]=r[y+2][x+1]=r[y+2][x+3]=r[y+2][x+5]='*';print'\\n'.join(''.join(i)for i in r)"
    ],
    "two-way-palindromic-closure-generator": [
        "f=lambda a:[i for i in[a[:i:-1]*j+a+a[-1-i::-1]*(1-j)for i in range(len(a))for j in(0,1)]if i==i[::-1]][-1]",
        "f=lambda x:[x for x in sum([[x[:~i:-1]+x,x+x[i::-1]]for i in range(len(x))],[])if x==x[::-1]][0]"
    ],
    "implement-functional-programming-paradigms": [
        "exec(\"P!:[f(_)for _ in x];Y!,z:Y(f,f(x),z-1)if z else x;T!:f(*x);H!=0:(H(f-1)if~-f else[])+[f];O!,z:O(f,f(x,z[0]),z[1:])if z else x;N!:(N(f,[x[0],x[1]-1])if x[1]-x[0]else[])+[f(x[1])]\".replace(\"!\",\"=lambda f,x\"))",
        "y=len\nz=lambda a,b:a.append(b)\n_=lambda a:a if a is not None else[]\ndef M(a,b,c=None):\n c=_(c);d=y(b)\n if d:z(c,A(a,b[0]))\n return M(a,b[1:],c)if d else c\ndef N(a,b,c):d=A(a,b);return N(a,d,c-1)if c>1 else d\nA=lambda a,b:a(*b)if type(b)is list else a(b)\ndef R(a,b=None):b=_(b);b.insert(0,a);return b if a<=1 else R(a-1,b)\ndef F(a,b,c):d=a(b,c[0]);return F(a,d,c[1:])if y(c)>1 else d\ndef T(a,b,c=None,d=None):\n if c is None:c=b[0];d=[]\n z(d,a(c));return T(a,b,c+1,d)if c<b[1]else d",
        "exec'e=eval;q=len;m=@,l:e(\"[\"+\"f(l.pop()),\"*q(l)+\"][::-1]\");n=@,x,l:e(\"f(\"*l+\"*x\"+\")\"*l);r=@:e(\"r(f-1)+\"*(f>1)+\"[f]\");a=@,a:e(\"f(a[\"+`r(q(a))`[1:-1]$\",\",\"-1],a[\")+\"-1])\");f=@,x,l:e(\"f(\"*q(l)+\"x,[\"+`r(q(l))`[1:-1]$\",\",\"-1]),l[\")+\"-1])\");t=@,n,x:e(\"[f(\"+`r(x)[n-1:]`$\",\",\"),f(\")[1:-1]+\")]\")'.replace(\"@\",\"lambda f\").replace(\"$\",\".replace(\")"
    ],
    "track-listings-to-time-tables": [
        "h=m=s=0\nfor i in raw_input().splitlines():\n print(\"(%d:%.2d:%.2d) \"%(h,m,s),i.split('-')[0].split('. ')[1])\n t=i.split('-')[1].split(':')\n m+=int(t[0]);s+=int(t[1]);r=s//60;s-=r*60;m+=r;r=m//60;m-=r*60;h+=r",
        "t=0\nfor i in input().split('\\n'):i=i.split(' - ');print'(%d:%02d:%02d)'%(t/3600,t%3600/60,t%60),i[0].split('. ')[1];k=i[-1].split(':');t+=int(k[0])*60+int(k[1])"
    ],
    "some-prime-peerage": [
        "lambda a,n:[i for i in R(2,n)if{p for p in R(2,i+1)if(i%p<1)*all(j%p for j in R(2,p))}<=a]\nR=range",
        "f=lambda s,n,c=1:n//c*s and f(s,n,s[0]*c)+f(s[1:],n,c)or[c][:c<n]",
        "lambda l,n:[k for k in range(2,n)if reduce(int.__mul__,l)**n%k<1]"
    ],
    "parse-the-parcel": [
        "lambda a:int(`[2*(r==q)+(p==q)for p,q,r in zip(*a[::(a>'|')*2-1].split('\\n'))[4:-4:2]]`[1::3],4)",
        "lambda x:int(''.join([`2*(c>'#')+(a>'#')`for a,b,c in zip(*x[::1-2*(x[-1]>'#')].split('\\n'))][4:-4:2]),4)"
    ],
    "output-the-spoken-names-of-numbers-used-on-planet-flapus": [
        "s=input()\nd=\"Kuzla,Ponara,Boqkel,Colopee,Vruenat,Foham,Stikty,Kricola\".split(',')\nr=d[int(s[-1])]+\"'\"if s[-1]!='0'else'Ku'\nd=[i[:2+(i[2]in'ui')].lower()for i in d]\nfor i in s[:-1]:r+=d[int(i)]\nprint(r)",
        "a='Ku Po Bo Co Vru Fo Sti Kri zla nara qkel lopee enat ham kty cola'.split()\n*y,x=map(int,input())\nu=x>0\nv=y>[]\nprint(a[x]+a[x+8]*u**v+\"'\"*(u&v)+''.join(a[i].lower()for i in y))"
    ],
    "ants-on-a-natural-log": [
        "w,n=input()\nprint'\\n'.join(['|'+' '*w*4+' |']+[' '.join(['|']+[p]*r+['   ']*(w-r)+['|'])for r in[w]*(n/w)+[[],[n%w]][n%w>0] for p in['\\O/','-O-','/o\\\\',' ^ ','   ']])",
        "n,w=input()\ns=' ';k='|';a=k+s*w*4+s+k;print a\nwhile n>0:\n for i in['\\\\O/','-O-','/o\\\\',' ^ ']:print k+s+(i+s)*min(w,n)+s*4*(w-n)+k\n n-=w;print a"
    ],
    "positional-bathroom-etiquette": [
        "def u(a):\n m,r,x=9,0,len(a)\n for i in range(x): \n    d=0\n    if a[i]<'1':\n     for j in range(x):\n        if a[j]>'0':d+=float((j-i)**-2)\n     if d<m:r=i;m=d\n return a[:r]+'1'+a[r+1:]",
        "def u(p):e=enumerate;a=[(sum((i-j)**-2for j,y in e(p)if\"0\"<y),i)for i,x in e(p)if\"1\">x];return a and p[:min(a)[1]]+\"1\"+p[min(a)[1]+1:] or p",
        "def a(I):\n D,l,r={},len(I),range\n for i in r(l):\n  if I[i]<1:\n   n,t,n[i]=I[:],[],1\n   for j in r(l):\n    if n[j]>0:\n     q,Q=[],0\n     for k in r(l):\n      if k!=j and n[k]>0:q.append((k-j,j-k)[k<j])\n     for i in q:Q+=1/(i**2)\n    t.append(Q)\n   T=sum(t)\n   if T not in D.keys():D[T]=i\n if len(D)>0:I[D[min(D.keys())]]=1\n print(I)"
    ],
    "array-unification": [
        "f=lambda a,b:a*(a==b)or f(*[map({x:y for x,y in zip(a,b)if x<y}.get,x,x)for x in b,a])",
        "a = [-2,4,-2,3,2,4,1,1]\nb = [-2,4,1,2,2,3,1,-2]\nm = {}\nvisited = {}\nfor i in range(len(a)):\n    if a[i] in m:\n        if b[i] not in m[a[i]]:\n            m[a[i]].append(b[i])\n    else:\n        l = []\n        l.append(b[i])\n        m[a[i]] = l\n    if b[i] in m:\n        if a[i] not in m[b[i]]:\n            m[b[i]].append(a[i])\n    else:\n        l = []\n        l.append(a[i])\n        m[b[i]] = l\n        \ndef dfs(v, maximum):\n    if v > maximum:\n        maximum = v\n    visited[v] = True\n    for n in m[v]:\n        if not visited[n]:\n            d = dfs(n, maximum)\n            if d > v:\n                maximum = d\n    return maximum\n\nresult = []\nfor k in range(len(a)):\n    for q in m:\n        visited[q] = False\n    result.append(max(dfs(a[k], a[k]), dfs(b[k], b[k])))\n\nprint(result)",
        "f=lambda a,b:[a<x>b.update(b&set(x)and x)and b or max(f(zip(a,b)*len(a),{x})[0])for x in a]"
    ],
    "find-the-binarray": [
        "def f(a,l):\n b=lambda s:b(s[:-1])*sum(a)*8+int(s[-1])if s else 0\n c=lambda n:n and(n/sum(a)/4%2 or c(n/sum(a)/8))\n for i in range(2**~-l,2**l):\n  j=bin(i)[2:]\n  if b(a)%b(j)<1 and not c(b(a)/b(j)):return j",
        "def f(a,n):\n for i in range(1<<n-1,1<<n):\n  b=bin(i)[2:];u,v=(int(('0{:0>%d}'%sum(a)*len(s)).format(*s))for s in[a,b])\n  if u%v<1>int(str(u//v*10)[::~sum(a)]):yield b"
    ],
    "bilibili-av-bv-code-conversion": [
        "lambda s:\"BV1{2}{4}4{5}1{3}7{1}{0}\".format(*[\"fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF\"[((int(s[2:])^177451812)+8728348608)/58**i%58]for i in range(6)])",
        "def s(x):\n b,a=(int(x[2:])^177451812)+8728348608,''\n while b:a+='fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF'[b%58];b//=58\n return f'BV1{a[2::2]}4{a[5]}1{a[3]}7{a[1::-1]}'"
    ],
    "display-numbers-lacking-2s": [
        "['2'in str(n)or print(n)for n in range(1,101)]",
        "print[n for n in range(1,101)if'2'not in`n`]",
        "k=7\nexec\"k+=10;print(k>177)*10+k/9;\"*81"
    ],
    "is-that-number-a-two-bit-number%ef%b8%8f": [
        "^((x)|(x))((((\\2*)\\3*)(\\2\\7){8}x(?=\\6$))*x){2}\\2{8}$",
        "lambda n:n>2in{g(n,2),g(n,10)}\ng=lambda x,b:x and(x%b)**2+g(x//b,b)",
        "lambda n:any(sum((ord(c)-48)**4 for c in f.format(n))==2for f in[\"{}\",\"{0:b}\"])",
        "lambda n:' 11 'in f' {n:b} {n} '.replace('0','')"
    ],
    "draw-an-ascii-art-rainbow": [
        "lambda x:[print(z+y*x+a)for y,z,a in[\"_  \",\" /\\\\\",\" ||\"]]",
        "lambda n:(f\" /|{'_  '*n} \\\\|\\n\\n\"*3)[::3]",
        "lambda x:print(f\" {'_'*x}\\n/{' '*x}\\\\\\n|{' '*x}|\")",
        "lambda n:\" %s\\n/%s\\\\\\n|%s|\"%(\"_\"*n,\" \"*n,\" \"*n)"
    ],
    "print-the-digital-root": [
        "lambda n:n and~-n%9+1",
        "i=input()\nwhile~-len(i):i=`sum(map(int,i))`\nprint i",
        "f=lambda x:x[1:]and f(`sum(map(int,x))`)or x"
    ],
    "bl-lu-ur-rr-ry-yv-vi-is-si-io-on-blur-the-text": [
        "lambda s:\"\".join((c+\" \"+c)*c.isalnum()for c in s)[2:-2]",
        "a=[c for c in input() if c.isalnum()]\nprint(' '.join(a+b for a,b in zip(a,a[1:])))"
    ],
    "code-point-sum-quine": [
        "print'z'*7",
        "print('_'*10)",
        "print 76**8"
    ],
    "draw-a-big-slash-x": [
        "f=lambda s,i='\\n':i+(s and'\\\\'+'  '*~-s+' /'+f(s-1,i+' ')+i+'/'+'  '*~-s+' \\\\'or'X')",
        "r=range(2*input()+1)\nfor i in r:print''.join(' \\/X'[i==j::2][r[~i]==j]for j in r)"
    ],
    "smallest-palindrome-divisible-by-the-input": [
        "x=lambda n,m=0:m*(`m`==`m`[::-1])or x(n,m+n)",
        "f=lambda x,c=0:`c`[::-1]==`c`and c or f(x,c+x)"
    ],
    "create-a-percent-sign": [
        "lambda n:n>1and''.join(' #'[i%~-n<1]+'\\n'*(-~i%n<1)for i in range(n*n))or'#'",
        "n=input();a=('1'+'0'*(n-2))*2+'1'\nexec'print a[:n];a=a[1:];'*n",
        "lambda n:zip(*[iter(`10L**n`[:-3]*-~n+'1')]*n)",
        "n=input()\nx='#'.ljust(n-1)*3\nexec'print x[:n];x=x[1:];'*n",
        "def f(n):\n    m=[[0+(j==n-i-1)for j in range(n)]for i in range(n)]\n    m[0][0]=1\n    m[-1]=m[0]\n    return m",
        "n=input()\na='1'+'0'*(n-2)+'1'\nprint a\nfor i in range(1,n-1):print str(10**i).zfill(n)\nprint a"
    ],
    "do-you-make-me-up": [
        "lambda a,b:{*a}>={*b}",
        "lambda x,y:not{*y}-{*x}",
        "00000000: 03f3 0d0a fb0b 8b59 6300 0000 0000 0000  .......Yc.......\n00000010: 0004 0000 0040 0000 0073 1a00 0000 7400  .....@...s....t.\n00000020: 0074 0100 6302 0083 0000 8301 0003 8300  .t..c...........\n00000030: 0083 0100 6b05 0046 2800 0000 0028 0200  ....k..F(....(..\n00000040: 0000 7303 0000 0073 6574 7309 0000 0072  ..s....sets....r\n00000050: 6177 5f69 6e70 7574 2800 0000 0028 0000  aw_input(....(..\n00000060: 0000 2800 0000 0073 0000 0000 7308 0000  ..(....s....s...\n00000070: 003c 6d6f 6475 6c65 3e00 0000 0073 0000  .<module>....s..\n00000080: 0000                                     .."
    ],
    "expand-some-number": [
        "s,n=[],input()\n[s.append((\"+\"+n[-i-1]+\"0\"*i)*(int(n[-i-1])>0))for i in range(len(n))]\nprint(\"\".join(s[::-1])[1:])",
        "f=lambda s='',*x:s and(s>'0')*(s+'0'*len(x)+(f(*x)and'+'))+f(*x)",
        "lambda n:'+'.join(`b`+~e*'0'for e,b in enumerate(n,-len(n))if b)",
        "lambda n:'+'.join(v+'0'*(len(`n`)-i)for i,v in enumerate(`n`,1)if'0'<v)",
        "t=input();x=len(t);print(*[t[i]+'0'*(x+~i)for i in range(x)if'0'<t[i]],sep='+')"
    ],
    "swap-delete-and-repeat": [
        "g=lambda s,n:n and g(s[0]+s[2:-2]+s[-1],n-1)or s",
        "lambda s,n:s[0]+s[n+1:~n]+s[-1]",
        "def s(t,n):return t if n==0 else s(t[0]+t[2:-2]+t[-1],n-1)"
    ],
    "remove-excessive-occurrences": [
        "lambda a,n:[e for i,e in enumerate(a)if a[:i].count(e)<n]",
        "lambda s,n:reduce(lambda r,x:r+x*(r.count(x)<n),s)",
        "def f(A,n):[A.pop(-A[::-1].index(i)-1) for i in A if A.count(i)>n]"
    ],
    "replace-all-items-with-their-counts": [
        "lambda l:map(l.count,l)",
        "lambda l:[*map(l.count,l)]"
    ],
    "factorise-a-quadratic": [
        "lambda a,b:[p:=a/2+(a*a/4-b)**.5,a-p]",
        "lambda a,b:[c:=a/2+(a*a/4-b)**.5,a-c]"
    ],
    "palindromic-palindrome-generator": [
        "s=input();print s+s[::-1]#]1-::[s+s tnirp;)(tupni=s",
        "a=input()#\nprint(a+a[::-1])#([1-::]a+a)tnirp\n#()tupni=a",
        "t=input();print(t+t[::-1])#)]1-::[t+t(tnirp;)(tupni=t"
    ],
    "can-jimmy-hang-on-his-rope": [
        "lambda l:'o'in map(max,l[:-1])",
        "lambda x:\"o', '|\"in`zip(*x)`"
    ],
    "creating-a-crossed-square": [
        "i=n=2**input()/2\nwhile i:print bin((n>i>1or~-n)|n|i|n/i)[2:];i/=2",
        "lambda n:[bin(sum(2**p for p in[range(n),{0,n-1,r,n-1-r}][0<r<n-1]))[2:]for r in range(n)]",
        "i=n=input()\nwhile i:l=['* '[1<i<n]]*n;i-=1;l[0]=l[~0]=l[i]=l[~i]='*';print`l`[2::5]"
    ],
    "letters-in-phone-numbers": [
        "print(\"\".join((lambda x:\"22233344455566677778889999\"[ord(x)-97] if ord(x)>96 and ord(x)<123 else x)(i) for i in input()))",
        "def phonekeypad(text):\n    c = ['','','abc','def','ghi','jkl','mno','pqrs','tuv','wxyz']\n    st = \"\"\n    for i in list(text):\n        a = False\n        for t in range(len(c)):\n            if i in c[t]:\n                st += str(t)\n                a=True\n        if a == False:\n            st += str(i)\n    return st",
        "for c in raw_input():print'\\b'+(`(ord(c)-97)/3+2-(c in('svyz'))`if c>'`'else c),"
    ],
    "split-into-sublists-of-specified-sizes": [
        "L,B=input()\nfor x in B:print L[:x];L=L[x:]",
        "lambda L,B:[map(L.pop,[0]*x)for x in B]"
    ],
    "list-all-ordered-partitions-of-n": [
        "f=lambda n,s='1,':1/n*[eval(s)]or f(n-1,'1+'+s)+f(n-1,'1,'+s)",
        "f=lambda n:[x+[n-i]for i in range(n)for x in f(i)]or[[]]"
    ],
    "running-length-of-the-movie-in-a-human-readable-format": [
        "a=int(raw_input().split()[0]);h=a/60;m=a%60;l=\"s\\0\";print\"%s hour%s %s minute%s\"%(h,l[h==1],m,l[m==1])",
        "m=int(raw_input()[:3])\nprint m/60,\"hours\"[:4+m/120],m%60,\"minutes\"[:6+m/2%30]",
        "i=int(raw_input().split()[0])\nprint\"%d hour%s %d minute%s\"%(i/60,\"s\"*(i>120),i%60,\"s\"*(i%60!=1))",
        "m=int(raw_input()[:3]);print m/60,'hours',m%60,'minutes'"
    ],
    "reliably-broken-sort": [
        "lambda a:a.sort()or[a.pop(),*a]",
        "lambda a:a[1:a.sort()]+a[:1]",
        "def f(a):a[1:]=a[a.sort():0:-1]",
        "lambda a:sorted(a)[1:]+[min(a)]"
    ],
    "print-the-russian-cyrillic-alphabet": [
        "chr(i)",
        "for i in range(32):print(end='%c%c'%(i+1040,i+1072)+'\u0401\u0451'*(i==5))"
    ],
    "do-the-circles-overlap": [
        "lambda X,Y,R,x,y,r:(X-x)**2+(Y-y)**2<(R+r)**2",
        "lambda a,b,c,d,e,f:(a-d)**2+(b-e)**2<(c+f)**2",
        "lambda x,y,r,X,Y,R:abs(x-X+(y-Y)*1j)<r+R"
    ],
    "strange-addition": [
        "lambda a,b:map(max,zip(a.rjust(len(b)),b.rjust(len(a))))",
        "s=lambda p,q:p+q and 10*s(p//10,q//10)+max(p%10,q%10)",
        "lambda*a:map(max,*a)"
    ],
    "draw-an-ascii-hexagon-of-side-length-n": [
        "k=n=input()\nwhile 1:a=k^k>>n;print\" \"*a+\"\\/_\"[k/n-2]+\"_ \"[-n<k<n]*2*(2*n+~a)+\"\\_/\"[k/n];k-=1",
        "i=n=input()\nd=0\nexec\"k=i/n|d;print' '*i+'\\_/'[~k]+'_ '[i-d<n]*2*(2*n+~i)+'\\_/'[k]\\nif i==d:d=i=-1\\ni-=d|1;\"*(n-~n)",
        "n=int(input())\nb,a,s=\"\\/ \"\nz,f=range(n),lambda c,d,t:((n-1-i)*s+c+2*(n+i)*s+d for i in t)\nprint(f\"{'_'*2*n:^{4*n}}\",*f(a,b,z),*f(b,a,z[:0:-1]),f\"{b:>{n}}{'_'*2*n}/\",sep=\"\\n\")"
    ],
    "sum-of-neighbours": [
        "lambda a:sum(a)*3-a[0]-a[-1]",
        "lambda a:sum((a*3)[1:-1])"
    ],
    "sort-a-string-by-a-given-ordering": [
        "def f(a,s):s.sort(None,a[::-1].find,1)",
        "lambda a,s:sorted(s,key=lambda c:-a[::-1].find(c))",
        "lambda a,s:s.sort(key=lambda c:a.find(c)%27)"
    ],
    "evaluating-logic-gates": [
        "lambda a,b:\"NOR N\"[a|b:5-a*b]+\"AND X\"+\"NOR\"[a^b:]",
        "lambda"
    ],
    "calculating-3-sqrt5n-exactly": [
        "w=5**0.5;a=(3+w)**int(input())//2+1;print(a,a//w)",
        "a=1;b=0\nexec\"a,b=3*a+5*b,3*b+a;\"*input()\nprint a,b"
    ],
    "drink-your-morning-coffee": [
        "k=' '\nq='_'*10\nprint'\\n'.join([k*i+'o'for i in 2,7,4]+[k+q]+['/'+k*10+'\\\\__']+['|'+k*s+'JAVA'[s-3]+k*(9-s)+'|'+' _'[s==6]*2+'\\\\||/'[s-3]for s in 3,4,5,6]+['\\\\'+q+'/'])",
        "('_'*10,)",
        "print('  o\\n'+7*' '+'o\\n'+4*' '+'o\\n'+' '+10*'_'+'\\n'+'/'+10*' '+'\\__\\n'+'|'+3*' '+'J'+6*' '+'|  \\\\\\n'+'|'+4*' '+'A'+5*' '+'|  |\\n'+'|'+5*' '+'V'+4*' '+'|  |\\n'+'|'+6*' '+'A'+3*' '+'|__/\\n'+'\\\\'+10*'_'+'/')"
    ],
    "generate-this-number-table": [
        "lambda a=\"123456789\":[a[n]*n+a[n:]for n in range(9)]",
        "lambda x:[[i+1]*i+range(i+1,x+1)for i in range(x)]",
        "lambda n:[print(*(max(y,x)+1 for y in range(n))) for x in range(n)]",
        "f=lambda x:x*[x]and[a+[x]for a in f(x-1)]+[[x]*x]",
        "r=range(1,input()+1)\nfor x in r:print[x]*x+r[x:]"
    ],
    "nobody-knows-gau-numbers": [
        "lambda n:sum(~k*(k-n)*len(`k+1`)for k in range(n))",
        "lambda x:sum(len(`i`)*i*(x-i+1)for i in range(1,x+1))",
        "f=lambda n:n and sum(i*len(`i`)for i in range(n+1))+f(n-1)",
        "f=lambda x,i=1:x and x*i*len(str(x))+f(x-1,i+1)"
    ],
    "string-to-binary": [
        "print(*[f'{ord(c):b}'for c in input()])",
        "for i in input():print(bin(ord(i))[2:])",
        "print(*[f'{ord(i):b}'for i in input()])",
        "print\" \".join([bin(ord(i))[2:]for i in raw_input()])",
        "print(*map(\"{:b}\".format,input().encode()))",
        "print(*[bin(ord(x))[2:]for x in input()])"
    ],
    "output-a-binary-path-from-a-number": [
        "def f(a):\n o='*';r=[o]\n for i in bin(a)[3:]:\n  if'0'<i:r+=[' '*len(r[-1][1:])]\n  r[-1]+=o\n print'\\n'.join(r)",
        "a='';x=0\nfor c in input():a+=('\\n'+' '*x)*c+'*';x+=1-c\nprint a[1:]",
        "s=p='\\n'\nfor x in input():s+=p*x+'*';p+=' '[x:]\nprint s[2:]"
    ],
    "matrix-in-slash-order": [
        "max RoC = 3",
        "def f(b,a):i=1;o=[];exec\"if b:o+=[],;b-=1\\nfor l in o:k=len(l)<a;l+=[i]*k;i+=k\\n\"*a*b;print o",
        "def f(n,k):M=[(t//k+t%k,t)for t in range(n*k)];return zip(*k*[map([M,*sorted(M)].index,M)])"
    ],
    "upside-down-pyramid-addition-reversed": [
        "f=lambda a:a and f([l-r for l,r in zip(a,a[1:])])+a[-1:]",
        "lambda n,*a:R(lambda r,v:R(lambda x,w:x+[w-x[-1]],r,[v]),a,[n])[::-1]\nR=reduce"
    ],
    "ascii-art-octagons": [
        "a=b=n=input()\nwhile a>2-n-n:a-=1;b-=a/~-n+1;s=(-~b*' '+'#').ljust(n);print s+s[-1]*(n-2)+s[::-1]",
        "n=int(input())\nz=\" \"*(n-1)+\"#\"*n+\" \"*(n-1)\nprint(z)\nfor i in range(n-2):print(\" \"*(n-i-2)+\"#\"+\" \"*(i*2+n)+\"#\")\nprint(((\"#\"+\" \"*(n*3-4)+\"#\\n\")*n)[:-1])\nfor i in range(n-3,-1,-1):print(\" \"*(n-i-2)+\"#\"+\" \"*(i*2+n)+\"#\")\nprint(z)",
        "def f(n):\n a=[' '*~-n+n*'#']\n b=[' '*(n-i-2)+'#'+' '*(n+2*i) +'#'for i in range(n-2)]\n return a+b+['#%*s'%(3*n-3,'#')]*n+b[::-1]+a",
        "a=d=n=input()-1\nwhile a<=n:print' '*a+'#'+' #'[a==n]*(3*n-a+~a)+'#';d-=1;a-=d/n+1"
    ],
    "how-to-draw-melting-icicles": [
        "def f(s,m):print\"\\n\".join([' '*(s/2-i/2)+'V'*i for i in range(s,m*2,-2)])",
        "lambda s,m:'\\n'.join((s-x)/2*' '+x*'v'for x in range(s,m*2,-2))"
    ],
    "quine-anagrams-cops-thread": [
        "=l`;lrt,]l n`p,i=,' 1,1'lnt[ll[;,0  ]['r[`][`0'ipll] ]",
        "######%%%%''(((((((())))))))****--0011::::;;==@@@@@@@@@@[[[[]]]]aaaaaaggggggiiiiiiiinnpprrrrrrrrrtt~~"
    ],
    "code-golf-permutations": [
        "f=lambda a:[p+[x]for x in a for p in f(a-{x})]or[[]]",
        "p=lambda x:x and[[a]+b for a in x for b in p([c for c in x if c!=a])]or[[]]"
    ],
    "round-me-help-me": [
        "f=lambda n,i=1:n%i*2/i or-~f(n,i+1)",
        "l=lambda x,y=2:y*(x%y>=y/2)or l(x,y+1)"
    ],
    "interleaving-reversing": [
        "lambda s:\"\".join(\"\".join(t)for t in zip(s[::2],reversed(s[1::2])))+(\"\",s[-1])[len(s)%2]",
        "s=bytearray(input())\ns[1::2]=s[1::2][::-1]\nprint s",
        "lambda s,j=''.join:j(map(j,zip(s[::2]+' ',s[1::2][::-1]+' ')))[:-1]"
    ],
    "convert-height-to-us-men-s-jacket-size": [
        "lambda s:[b for*b,a in b\"3XSB XXSD XSH SK LT XLX 3XL_ 5XLd 6XLf\".split()if s-99<a][0]",
        "lambda h:max(173-h>>2,h/3-60)*'X'+'SL'[h>173]",
        "lambda x:\"3XXSMLXX3456XXS   LXXXXXSS     LLLLL\"[~-x/3-53-x/177-x/189+(x==195)::12]",
        "lambda x:[c for a,b,c in[[160,165,\"3XS\"],[162,167,\"XXS\"],[166,171,\"XS\"],[168,174,\"S\"],[174,183,\"L\"],[180,187,\"XL\"],[184,190,\"XXL\"],[187,194,\"3XL\"],[191,195,\"4XL\"],[193,199,\"5XL\"],[197,201,\"6XL\"]]if x in range(a,b)][0]"
    ],
    "ascii-art-is-ready-for-take-off": [
        "p=n=input()\ns=\"\u007f_ |\"+\"  \\/\"*n+\"--**\"+\" o||\"*2*n+\"--**__\\/\"\nwhile s:p+=s>\"^\";print' '*p+s[3]+s[:2]*(n-p)+s[:4:2];s=s[4:];p-=p>0",
        "i=input()\nm=[\"*-\"+\"--\"*i+\"*\"]\nprint\"\\n\".join([\" \"*i+\" |\"]+[\" \"*(i-x)+\"/ \"+\"  \"*x+\"\\\\\"for x in range(i)]+m+[\"|\"+\" o\"*i+\" |\"]*2*i+m+[\" /\"+\"_\"*(i*2-1)+\"\\\\\"])"
    ],
    "create-a-binary-ruler": [
        "n=int(input())\na=1\nwhile a<n:a*=2\nwhile a:print((\"%%%dd\"%a%4*n)[:n]);a//=2",
        "f=lambda n:n and' '.join(f(n/2))+'\\n'+n*'#'or''",
        "i=n=input()\nwhile i:i-=1;print((' '*~-2**i+'#')*n)[:n]"
    ],
    "number-of-cycles-of-a-permutation": [
        "f=lambda p,i=1:i and0 **p[i-1]+f(p[:i-1]+[0]+p[i:],p[i-1]or max(p))",
        "l=input()\nfor _ in l:l=[min(x,l[x])for x in l]\nprint len(set(l))"
    ],
    "basic-latin-character-name-to-character": [
        "lambda s:chr(83-b'gfhtg\\32}urgx_}3qeo|e~cwu~S~q~I,vqG\\34jc}d*9~~_L|p~~~~~JJy'[sum(b'  !\" *1! \"2;D$# ! # !!( '[ord(c)%25]-32for c in s[:-1])]+ord(s[-1]))",
        "print chr(u\"\"\"\u01f6\u0140\u020ed\u020a\u00cf\u00f6\u01d6Ih\u020f\u019c\u01d3\u01f1\u01e0\u01a3\u019a\u01c6\u0013\u01a9C+\u0136\u00c5\u0120\u011b\u00f3\u018b\u014e\u00aa\u01b1\u0133\u016f\u0170\u0171\u016a\u016b\u016c\u016d\u0176\u0177\u0178\u0179\u0172\u0173\u0174\u0175\u017e\u017f\u0180\u0181\u017a\u017b\u017c\u017d\u0186\u0187\u0188\u0156\u00d0\u0157\u01c0\u01fc\u01ff\u01fe\u01f9\u01f8\u01fb\u01fa\u0205\u0204\u0207\u0206\u0201\u0200\u0203\u0202\u01ed\u01ec\u01ef\u01ee\u01e9\u01e8\u01eb\u01ea\u01f5\u01f4\u01f7N\u020c~B\"\"\".index(unichr(hash(raw_input())%535))+32)"
    ],
    "find-the-closest-palindromic-number": [
        "i=input()\nprint sorted([r-i for r in range(2*i)if`r`==`r`[::-1]],key=abs)[0]",
        "def f(n):\n    m=map(int,str(n));l=len(m)/2;m[-l:]=m[l-1::-1];return int(`m`[1::3])-n",
        "l=lambda n,d=0:`n+d`!=`n+d`[::-1]and l(n,~d+(d<0))or d"
    ],
    "overlapping-string-blocks": [
        "n,f=None,filter\nfor l in map(n,*input()):print''.join(f(n,x)[-1]for x in map(n,*f(n,l)))",
        "for t in map(None,*input()):\n r=''\n for s in t:\n\tif s:r=s+r[len(s):]\n print r"
    ],
    "count-forth-and-back-then-double-up": [
        "def f(x):n=int((x/2)**.5);print 2*n-abs(2*n*n+2*n+1-x)+2",
        "r=range\na=[]\nfor i in r(2,998,2): \n\tfor j in r(1,i+1): a.append(j)\n\tfor j in r(i-1,1,-1): a.append(j)\nprint a[input()-1]",
        "f=lambda n,k=2:-~min(n,k-n)*(n<k)or f(n-k,k+4)",
        "l,n,r=list,next,range\nh=lambda x:l(r(1,x))+l(r(x-2,1,-1))\ndef g():\n\tx=3\n\twhile True:yield from h(x);x+=2\ndef f(i):\n\tx=g()\n\tfor _ in r(i-1):n(x)\n\treturn n(x)"
    ],
    "can-i-settle-down": [
        "lambda x:3<sum((a>0)+~-a*(a>1)//4for a in map(x.count,\"BLSW\"))+x.count(\"O\")//4",
        "lambda s:sum((s+\"BLSW\"*3).count(n)/4for n in\"BLSWO\")>3"
    ],
    "is-this-a-valid-variable-name": [
        "lambda s:s.isidentifier()/-~(s[:1]=='_')",
        "lambda x:[0,[[.5,1][x[0]>'z'],0][x[0]<'A']][x.replace('_','a').isalnum()]if x else 0"
    ],
    "dvi-connector-pins": [
        "C=raw_input()\na=[\"#   # \",\" \"*6][\"D\"in C]\nr=\" #\"\nb=\"A\"in C\ni=3-b\nd=(r*[i,5][C[1:]>\"1\"]).rjust(10)\nt=r*3\nprint a+t+d+\"\\n===== \"+t+d*~-len(C)+\"\\n\"+a+r*i+\"  \"*b+d",
        "t=raw_input()*2\nQ=\"G   G  # # # 2 2 H # #\\n=====  # # # 2 2 H H H\\nG   G  # # H 2 2 H # #\"\nfor A,B,N in('G0A','H0D','212'):Q=Q.replace(A,' #'[t[int(B)]in'I'+N])\nprint Q"
    ],
    "the-cantor-function": [
        "f=lambda n,x:n and[f(n-1,e:=3*x),1+e//2*f(n-1,e-2)][e>1]/2or x",
        "f=lambda n,x:n and(1<x*3<2or x//.5+f(n-1,3*x%1))/2or x",
        "f=lambda n,x:n and((1<=(t:=x*3))+f(n-1,t-2*(t>=2))*(t>=2or 1>t))/2or x"
    ],
    "make-a-simple-word-wrapper": [
        "def f(t,n):\n while t:i=n+(t[min(len(t)-1,n)]==\" \"or-t[n-1::-1].find(' '));print(t[:i]);t=t[i:]",
        "s,n=input()\nwhile s:i=n;exec\"i-=' '<(s+' '*n)[i];\"*n;print s[:i];s=s[i+1:]"
    ],
    "produce-an-xor-table": [
        ".format()",
        "n=input()+1\nt=range(n)\nfor i in t: print \"%3d\"*n % tuple([x^i for x in t])"
    ],
    "get-the-decimal": [
        "lambda n,d,x:int(10**-~x*n/d)%10",
        "lambda n,d,x:(`n*1./d%1`+'0'*x)[x+2]"
    ],
    "yet-unused-pairs": [
        "f=lambda n:n and[f(n-1)*2,min({*range(n+1)}-{*map(f,range(n))})][n%2]",
        "f=lambda n,k=2:2/n%-3*(1-k)or f(n+~(k&-k)%-3,k+1)"
    ],
    "simple-printing-arrows": [
        "c=input()\nr=1\nl=0\nexec\"print' '*(%sabs(c-r))+'*';r+=1;\"%(\"c+~\"*input())*(2*c-1)",
        "f=[' '*n+'*'for n in range(input())]\nif'l'==input():f=f[::-1]\nprint'\\n'.join(f+f[-2::-1])",
        "c=input()-1\nd=raw_input()>'l'\nfor j in range(2*c+1):print' '*(d*c-(2*d-1)*abs(c-j))+'*'"
    ],
    "modular-multiplicative-inverse": [
        "f=lambda a,b:a==1or-~b*f(-b%a,a)/a",
        "f=lambda a,b,i=1:i*a%b==1and i or i<b and f(a,b,i+1)",
        "a,b=input()\ni=a<2\nwhile(a*i%b-1)*b%a:i+=1\nprint+i",
        "lambda a,b:[c for c in range(b)if-~c*a%b==1][0]+1"
    ],
    "is-this-number-secretly-fibonacci": [
        "lambda a:len(g(len(g(a))))<2\nf=lambda n:n<3or f(n-2)+f(n-1)\ndef g(a,n=1):j=f(n-1);return[j]if a-j<1else[j]+g(a-j)if a-f(n)<0else g(a,n+1)",
        "def f(n):z=[bin(x).count('1')for x in range(n*n+1)if x&2*x<1];print z[z[n]]<2"
    ],
    "generate-a-walsh-matrix": [
        "r=range(2**input())\nprint[[int(bin(x&y),13)%2or-1for x in r]for y in r]",
        "f=lambda n:n<1and[[1]]or[r*2for r in f(n-1)]+[r+[-x for x in r]for r in f(n-1)]"
    ],
    "a-geometrical-challenge": [
        "def f(s):\n S=int(s[1:-1])\n for n in([range(1,S+2,2),range(S,0,-2)]['-'in s],[S]*S)['s'in s]:\n  print \"{:^{S}}\".format('*'*n,S=S)",
        "s=raw_input()\nn=int(s[1:-1])\nfor i in[range(1,n+1,2),n*[n]][s<'t'][::2*('+'in s)-1]:print('*'*i).center(n)",
        "d=raw_input()\nx=int(d[1:-1])\no=\"\\n\".join(\"*\"*x for i in range(x))if d<\"t\"else\"\\n\".join((\"*\"*i).center(x)for i in range(x,0,-2))\nprint o[::-1]if\"+\"in d else o"
    ],
    "n-slab-slanted-slash-cake": [
        "n=input();b=1\nprint'/\\\\'*n\nwhile~-n+b:print'\\\\'*b+'/ '*n;b^=1;n-=b",
        "n=input()\nprint\"/\\\\\"*n\nfor i in range(n*2,1,-1):print\"\\\\\"*(1-i%2)+\"/ \"*(i/2+i%2)"
    ],
    "bake-me-a-slice-of-cake": [
        "print\"\"\"    .-\"\"-.\n .-\"s\"-.\n|es\"-.\n|se   \"-.\n|ese\\\\\n|ses|\n|sse|\n ess|\n ses|\n sse|\"\"\".replace('e','\"\"--..').replace('s',' '*6)",
        "print('''    .-\"\u0003 .-\"\u0002\u0003|\u0001\u0002\u0003|\u0002\u0001   \u0003|\u0001\u0002\u0001\\\\\n|\u0002\u0001\u0002|\n|\u0002\u0002\u0001|\n \u0001\u0002\u0002|\n\u0002 \u0001\u0002|\n\u0002\u0002 \u0001|'''.translate({1:'\"\"--..',2:' '*6,3:'\"-.\\n'}))",
        "00000000: 2363 6f64 696e 673a 4c31 0a70 7269 6e74  #coding:L1.print\n00000010: 2278 da53 5050 50d0 d355 52d2 d5e3 02d1  \"x.SPPP..UR.....\n00000020: 5c6e 605c 30e2 d55c 30c5 74f5 f490 04a0  \\n`\\0..\\0.t.....\n00000030: 4c98 30a6 5c22 303b 0643 2110 d4c0 0491  L.0.\\\"0;.C!.....\n00000040: a56a b850 d4c0 542a 60d3 ae80 453b 5c30  .j.P..T*`...E;\\0\n00000050: a94e 1d27 222e 6465 636f 6465 2827 7a69  .N.'\".decode('zi\n00000060: 7027 29                                  p')"
    ],
    "binary-sequences": [
        "lambda x:[n^1in x[i-(i>0):i+2]for i,n in enumerate(x)]",
        "lambda a:[len({*a[i and~-i:i+2]})-1for i in range(len(a))]"
    ],
    "fake-divisor-sum-polyglots": [
        "lambda n:sum(d*(n%d<1)for d in range(10/n>0,n))",
        "lambda n:sum(d*(round((n>10)*.5)==n%d)for d in range(1,n))",
        "lambda n:sum(i*(n<11or''==b'')for i in range(1,n)if n%i<1)"
    ],
    "reconstruct-an-arithmetic-sequence": [
        "lambda a:range(a[0],a[-1],[min,max][a[0]>a[1]](a[1]-a[0],a[-1]-a[-2]))+[a[-1]]",
        "lambda a,b,*c:range(a,c[-1],min(b-a,c[0]-b,key=abs))+[c[-1]]"
    ],
    "calculate-the-binary-split-sum-of-a-word": [
        "lambda w:sum(map(lambda x:int(x,2),\"\".join(map(lambda x:bin(ord(x))[2:].zfill(7),list(w))).replace(\"01\",\"0:1\").split(\":\")))",
        "s=0\nfor c in input():s=s*128+ord(c)\nprint eval(bin(s).replace('01','0+0b1'))"
    ],
    "play-zip-zap-zop": [
        "f=lambda s,r='':s[0]in'pP'and r+s or f(s[1:],r+('aoiAOI'+s[0])['iaoIAO'.find(s[0])])",
        "lambda s,p='iaoIAO':''.join(('aoiAOI'+c)[(p:=p*(ord(c)%4)).find(c)]for c in s)"
    ],
    "running-second-maximum-of-a-list": [
        "f=lambda l:l[1:]and f(l[:-1])+[sorted(l)[-2]]",
        "lambda x:[sorted(x[:i])[-2]for i in range(2,1+len(x))]"
    ],
    "lookup-without-conditional-statements": [
        "l=lambda x:int(\" 3569AB\"[x],16)\nb=lambda x:int(\" 2478CD\"[x],16)",
        "p=lambda i:(2**i)*(i<3)+1+(i>2)*(5+3*(i-3))-(i>4)*(i-3+~i%2)\nb=lambda i:2**i-(i>2)-(i>3)*(2**(i-1)-1)-4*(i>4)-15*(i==6)"
    ],
    "verifying-a-horizontal-ascii-pet-snake": [
        "lambda s:s.count('0')<31and all(s[i-31*(i>30):31*(i<124)-~i:31].strip(' ')for i,x in enumerate(s,1)if' '<x)and' '<s[62]",
        "f=lambda s:s[1]<' 'or'0'in s[::31]in' %s '%s[1::31]in'%6s'%0*2*f(s[1:])",
        "verify.py<snake.txt",
        "lambda g:(lambda a:all(map(len,a)+[-2<x-y<2 for b in[sum(a,[])]for x,y in zip(b,b[1:])]))([[i for i in range(5)if\"0\"==r[i]]for r in zip(*g)])"
    ],
    "create-a-pyramidal-matrix": [
        "n=input()\na=abs(n)\ns=a*2-a%2\nr=range(s)\nfor y in r:print[(min,max)[n<0](x+1,s-x,y+1,s-y)-(n<0)*s/2for x in r]",
        "n=input()\nr=range(1,abs(n)+1)\nl=r+r[~n|-2::-1]\nfor j in l:print[abs((n<0)*~-n+min(i,j))for i in l]"
    ],
    "does-it-match-the-digit-pattern": [
        "lambda x:g(x,1)|g(x,0)\ng=lambda x,a:len(set(x[a::2]))==(x[a<1::2]in\"123456789\")",
        "def g(t):k,c,f,j=t[::2],t[1::2],'123456789',''.join;return(len({*k})and j(c)in f)or(len({*c})and j(k)in f)"
    ],
    "ascii-hangman-in-progress": [
        "x,y=input()\nx=[['_',k][k in y]for k in x]\ny-=set(x)\ns='''  +---+\n  |   |\n  0   |\n 213  |\n 4 5  |\n      |\n'''\nfor i in range(6):s=s.replace(`i`,[' ','O|/\\\\/\\\\'[i]][len(y)>i])\nprint s+'='*9+'\\n'+' '.join(x)+'\\n'+''.join(y)",
        "a,b=input()\nj=' '.join\ns=b-set(a)\nprint\"\"\"  +---+\n  |   |\n  %s   |\n %s%s%s  |\n %s %s  |\n      |\n=========\n\"\"\"%tuple('O/|\\/\\\\'[:len(s)].ljust(6)),j(['_',i][i in b]for i in a),'\\n',j(s)"
    ],
    "quote-safe-quines": [
        "a=1;\"\"\";a=0;\" \"\"\";p='\"a=1;\"\"\";a=0;\" \"\"\";p=%r;print(p[a:~a]%%p)#\".';print(p[a:~a]%p)#",
        "x=\"\"#\";x='\"'\ns='x=\"\"#\";x=\\'\"\\'\\ns=%r;print x+s%%s+x#';print x+s%s+x#"
    ],
    "do-the-np-find-the-largest-clique": [
        "def f(g):\n x=g\n while x:y=x;x=map(set,{tuple(u|v)for u in x for v in x if u^v in g})\n return len(y[0])",
        "lambda x,f=lambda x:{i for s in x for i in s}:len(f(x))if all([(y,z)in x or(z,y)in x for y in f(x)for z in f(x)if y<z])else max(c(x.difference({y}))for y in x)",
        "G=input()\nm=0\nL=len\nfor i in range(2**L(G)):\n u=[];p=sum([G[j]for j in range(L(G))if 2**j&i],u)\n for j in p:u+=[j][j in u:]\n m=max(m,L(u)*all(p.count(j)==L(u)-1for j in u))\nprint m"
    ],
    "take-a-break-to-make-a-snake": [
        "x,y,m,d,r=0,0,{},(0,-1,0,1),range\nfor c in raw_input():b='wasd'.index(c);m[(x,y)]='^<v>'[b];x+=d[b];y-=d[~b];m[(x,y)]='@';l,n=([k[h] for k in m] for h in (0, 1))\nfor j in range(min(n),max(n)+1):print(''.join(m[(i,j)] if (i,j) in m else ' 'for i in range(min(l),max(l)+1)))",
        "x=y=0\nb,p,r={},(0,-1,0,1),range\nwhile 1:\n d='wasd'.index(input());b[(x,y)]='^<v>'[d];x+=p[d];y-=p[~d];b[(x,y)]='\u263a';l,m=([k[i]for k in b]for i in(0,1))\n for j in r(min(m),max(m)+1):print(''.join(b[(i,j)]if(i,j)in b else' 'for i in r(min(l),max(l)+1)))\n print()"
    ],
    "a-semi-palindrome-puzzle": [
        "s=lambda x,i=0:len(x)<2or[]<x[i:]and(x[-i:]==x[:i])&s(x[i:-i])|s(x,i+1)\ns=lambda x,i=0:len(x)<2or[]<x[i:]and(x[-i:]==x[:i])&s(x[i:-i])|s(x,i+1)",
        "def s(x):\n l=len(x)\n if l<2:return 1>0\n for i in range(1,l/2+1):\n\tif x[l-i:]==x[:i]:return s(x[i:l-i])\ndef s(x):\n l=len(x)\n if l<2:return 1>0\n for i in range(1,l/2+1):\n\tif x[l-i:]==x[:i]:return s(x[i:l-i])"
    ],
    "is-gaussian-primez": [
        "def p(x,s=2):\n while s*s<=abs(x):yield x%s;s+=1\nf=lambda a,b:(all(p(a*a+b*b))if b else f(b,a))if a else(b%4>2)&all(p(b))",
        "def f(a,b):\n v=(a**2+b**2,a+b)[a*b==0]\n for i in range(2,abs(v)):\n  if v%i<1:a=b=0\n return abs((a,b)[a==0])%4==3or a*b!=0",
        "lambda x,y:(x==0and g(y))or(y==0and g(x))or(x*y and p(x*x+y*y))\ndef p(n,r=[2]):a=lambda n:r+range(r[-1],int(n**.5)+1);r+=[i for i in a(n)if all(i%j for j in a(i))]if n>r[-1]**2else[];return all(n%i for i in r if i*i<n)\ng=lambda x:abs(x)%4>2and p(abs(x))"
    ],
    "name-the-poker-hand": [
        "p,f,l,t,o=\" pair\",\" of a kind\",\" Flush\",\"Straight\",\"A23456789TJQK\"\nv,u=zip(*raw_input().split())\ns=''.join(sorted(v,key=o.find))\nprint{5:\"High card\",7:\"One\"+p,9:\"Two\"+p,11:\"Three\"+f,13:\"Full house\",17:\"Four\"+f,23:t,24:l[1:],25:t,42:t+l,44:\"Royal\"+l}[(sum(map(v.count,v)),24)[len(set(u))<2]+((0,20)[s==\"ATJQK\"],18)[s in o]]",
        "R,K,F,S,g=' 23456789TJQKA2345A',' of a Kind','Flush','Straight ',sorted\ns,r=''.join(g(raw_input(),key=R.find)).split()\nn,m=g(map(r.count,set(r)))[-2:]\nprint[[F,[0,'High Card','TOwnoe'[n&1::2]+' Pair',['Full House','Three'+K][n&1],'Four'+K][m]],[[S,'Royal '][r[0]=='T']+F,S]][r in R][len(set(s))>1]"
    ],
    "can-this-list-be-balanced": [
        "S=s=0\nfor n in input():S-=s;s-=n\n1>>2*S%s",
        "lambda l:0in[sum(v*(i-y*2)for y,v in enumerate(l))for i in range(len(l)*2)]",
        "lambda k:sum(i*e*2for i,e in enumerate(k))%sum(k)<1"
    ],
    "dig-to-australia-antipodes": [
        "def f(c):x=([180,0,0],[179,59,60])[1<sum(c[6:8])];print['NS'['N'in c]]+c[1:4]+['EW'['E'in c]]+map(lambda x,y:x-y,x,c[5:8])",
        "def f(w,x,y,z):S=60;d=divmod;a,b,c=y;l,m=d(648e3-c-S*b-S*S*a,S);return w,\"N\" if x==\"S\" else \"S\",d(l,S)+(m,),\"E\" if z==\"W\" else \"W\""
    ],
    "how-many-semitones": [
        "lambda a,b:(g(b)+~g(a))%12+2\ng=lambda q:[0,2,3,5,7,8,10][ord(q[0])-65]+\" #\".find(q.ljust(2)[1])",
        "r=1\nfor s in input():r=cmp(s[1:]+s,s)-ord(s[0])*5/3-r\nprint-r%12+2"
    ],
    "decode-faux-braille": [
        "def f(s,A=''):\n for c in s:l=bin(ord(c))[-8:];A+='7'+l[5:]+l[1]+'7'+l[2:5]+l[0]\n print(''.join('K.L.SXC PRU.NYEOGZVJIW..HFBTAQDM'[int('7'+c,22)%141%109%35]for c in A.split('70000')))",
        "lambda h,j=''.join:j(' ZAQV;JWP;MBOS;YRKCGXDF;ILHUENT'[int('0'+i,27)%544%135%32]for i in j(chr(64|i&7|i>>3&8)+chr(64|i>>3&7|i>>4&8)for i in h[::2]).split('@'))"
    ],
    "find-self-locating-strings-in-a-number": [
        "f=lambda s,i=0:s>s[:i]and(s[:i]+`i`in s)*i+f(s,i+1)",
        "f=lambda s,i=0:s>''and(s.find(`i`)==0)*i+f(s[1:],i+1)",
        "lambda i:sum(x for x in range(len(i))if`x`==i[x:x+len(`x`)])"
    ],
    "drunkards-journey-home": [
        "s=lambda m,c=0,p=[0],x=0:1 in m[c]and(m[c][x]and s(m,x,p+[x],randrange(len(m)))or s(m,c,p,randrange(len(m))))or p",
        "f=lambda a,i=0,j=0:sum(a[i])and[i]*a[i][j]+f(a[:],(i,j)[a[i][j]],id(a)**7%~-2**67%len(a))or[i]"
    ],
    "casciitum-scribe": [
        "r=[('     _',''),('/','\\ ')]\nfor a in input()+[0]:r+=zip(*[['|'*6,'_|    |_,,/|  \\/  |\\,,||  ||  ||,,\\| _\\/_ |/,,\\ ____ /,,\\/'[i::2].split(',')][2-i&a>0]for i in 0,1])\nfor l in r[:-4]:print'%5s %s'%l",
        "lambda l:'     _\\n    / \\\\\\n'+'\\n'.join(('    |',' /|\\  _   \\  \\|\\_    __ |||| \\\\'[j::6])[i/2]+' '+('|','|||| /   __  /|/_ _   /  \\|/'[j::6])[i%2]for i in l for j in range(6))+'\\n    | |'*2"
    ],
    "counting-unit-squares-circle-passes-through": [
        "lambda n:sum(0<n*n-x*x-y*y<2*(x-~y)for x in range(n)for y in range(n))*4",
        "f=lambda r,x=0:r-x and-~((r*r-x*x)**.5%1>0)*4+f(r,x+1)"
    ],
    "chinese-remainder-theorem": [
        "l=input();x=reduce(lambda a,b:a*b[0],l,1)\nprint sum(x/a*b*pow(x/a,a-2,a)for a,b in l)\n\n[(5, 3)]\n3\n[(7, 2), (5, 4), (11, 0)]\n1584\n[(5, 1), (73, 4), (59, 30), (701, 53), (139, 112)]\n142360350966",
        "n=P=1\nfor p,a in input():n+=P*(a-n)*pow(P,p-2,p);P*=p\nprint n"
    ],
    "highly-composite-numbers": [
        "n,i,r,o=input(),1,[],[]\nwhile len(o)<n:\n r+=[(lambda n:len(set(reduce(list.__add__,([i,n//i]for i in range(1,int(n**0.5)+1)if n%i==0)))))(i)];h=max(r)\n if r.index(h)>i-2 and r.count(h)<2:o+=[i]\n i+=1\nprint o",
        "i=p=q=0;n=int(input())\nwhile q<n:\n c=j=0;i+=1\n while j<i:j+=1;c+=i%j==0\n if c>p:p=c;q+=1\nprint(i)"
    ],
    "how-much-more-reputation-do-i-need": [
        "lambda n:max(sum(500*b*(n>=a*500)for a,b in zip([.3,1,3,4,7,8,10],[3,3,4]+[10]*4))-n,0)",
        "s=str.split;n=input()\nfor k,v in map(s,s('5e3 5r4e3 5r3500 30./7r2e3 5r1500 10./3r500 6r1 1','r')):\n w=u(k);r=eval(v)*w\n if w<=n:print max(0,r-n);break",
        "lambda n:max(0,eval(\"+(n>=%d)*%d\"*7%(5e3,5e3,4e3,5e3,35e2,5e3,2e3,5e3,15e2,2e3,5e2,15e2,150,15e2))-n)"
    ],
    "reverse-and-add-degeneracy": [
        "n=input()\nwhile 1:\n if all(n%m for m in range(2,n)):print 1;break\n if n%11==0:print 0;break\n n+=int(`n`[::-1])",
        "f=lambda x:all(x%a for a in range(2,x))or x%11and f(x+int(`x`[::-1]))"
    ],
    "blinking-lighthouses": [
        "def f(h):\n t=[0]*(len(h)+1)\n for i in range(3600):t[[c[i]for c in[(x.replace('S','10').replace('L','1110')+'0'*6)*450for x in h]].count('1')]+=1\n print(t)",
        "lambda a:map(map(sum,zip(*[sum([2*(c<'S')*[1]+[1,0]for c in C],[0]*6)*500for C in a]))[6:3606].count,range(len(a)+1))"
    ],
    "trigger-the-chutes-and-protect-the-jackpot": [
        "f=lambda n,c:n and min(c[i]*-~i+f(n-1,c[-~i:])for i in range(len(c)-n+1))",
        "def S(G,P,T=0):\n T=T or[0]*len(P);r=[0]*(sum(t>=p for t,p in zip(T,P))>=G)\n for i,t in enumerate(T):\n    if t<max(P):a=next(p for p in P if p>t)-t;T[i]+=a;r+=[a+S(G,P,sorted(T))];T[i]-=a\n return min(r)"
    ],
    "given-an-input-move-it-along-the-keyboard-by-n-characters": [
        "f=lambda s,n:n and f(''.join(B[B.find(c)+1]for c in s),n-1)or s\nA='qwertyuiop%sqasdfghjkl%sazxcvbnm%sz'\nB='`1234567890-=`~!@#$%^&*()_+~'+A%('[]\\\\',\";'\",',./')+(A%('{}|',':\"','<>?')).upper()+'  '",
        "x=input().split()\nn=int(x[-1])\nx=' '.join(x[:-1])\nl=['`1234567890-=','qwertyuiop[]\\\\',\"asdfghjkl;'\",'zxcvbnm,./', '~!@#$%^&*()_+','QWERTYUIOP{}|','ASDFGHJKL:\"','ZXCVBNM<>?',' ']\ny=''\nfor i in x:\n for q in l:\n  if i in q:y+=q[(q.index(i)+n)%len(q)]\nprint(y)",
        "*i,s=input().split()\nr=[\"`1234567890-=\",\"qwertyuiop[]\\\\\",\"asdfghjkl;'\",\"zxcvbnm,./\",\"~!@#$%^&*()_+\",\"QWERTYUIOP{}|\",'ASDFGHJKL:\"',\"ZXCVBNM<>?\"]\nprint(\"\".join([[x[int(s):]+x[:int(s)]for x in r][r.index([x for x in r if c in x][0])][([x for x in r if c in x][0]).index(c)]if c!=\" \"else \" \" for c in \" \".join(i)]))"
    ],
    "invert-a-boolean-array": [
        "lambda a:[b^1for b in a]",
        "lambda a:[i-1for i in a]"
    ],
    "swapping-good-and-bad": [
        "print('Good','Bad')['C'<input()]",
        "print(['Bad','Good'][input()=='Bad'])",
        "exit('GBoaodd'['G'<input()::2])",
        "exit(\"C\">input()and\"Good\"or\"Bad\")",
        "exit(['Bad','Good'][input()<'G'])"
    ],
    "return-the-flipped-version-of-a-number": [
        "f=lambda n:ord(\"A@F@@CJ@IG\"[n])-65",
        "r=[2,5,2,9,6,9,8,8,0,0]\nf=lambda x:-1 if x not in r else r[r.index(x)+1]",
        "print([0,-1,5,-1,-1,-1,9,-1,8,6][int(input())])",
        "f=lambda x:x if x in(0,8)else(5if x==2 else(2if x==5 else(6if x==9 else(9if x==6 else -1))))",
        "'015..29.86'.find(`input()`)"
    ],
    "output-a-latin-square": [
        "n=input()\nf=lambda b:f(b+b[-1:]+b[-n:-1])if len(b)<n*n else b\nprint f(range(n))",
        "lambda x,r=range:[r(i,x)+r(i)for i in r(x)]",
        "lambda n:((range(n)*-~n)[1:]*n)[::~n]",
        "n=int(input())\nm,o=[],[]\nfor i in range(n):\n  m.append(i)\nfor i in range(n):\n  o.append(m)\n  m=m[-1:]+m[:-1]\nprint(o)",
        "lambda n:[(a+a//n)%n for a in range(n*n)]",
        "lambda n:[(k+k/n)%n for k in range(n*n)]"
    ],
    "am-i-being-run-backwards": [
        "print(1)#)2(tnirp",
        "x=quit\ny=x.__class__\ny.__add__=print\ny.__pos__=x\nx+x++x+x\nx=__sop__.y\ntnirp=__dda__.y\n__ssalc__.x=y\ntixe=x"
    ],
    "display-number-of-occurrences-for-every-character-in-an-input-string": [
        "s=raw_input()\nfor l in set(s):print l+\" : \"+str(s.count(l))",
        "i=input()\nfor c in{*i}:print(c,':',i.count(c))"
    ],
    "converting-strings-to-decimals-gone-wrong": [
        "f=lambda s:s>[]and ord(s.pop())-48+10*f(s)",
        "def f(x):\n o=0\n for i in x:o=o*10+ord(i)-48\n return o"
    ],
    "electrical-outlet": [
        "s=input();print(sum(s)-len(s)+1)",
        "lambda*n:1-len(n)+sum(n)"
    ],
    "simplify-a-continued-fraction": [
        "f=lambda l,n=1,d=0:l and f(l,l.pop()*n+d,n)or(n,d)",
        "a=d=0\nb=c=1\nfor n in input():a,b=b,n*b+a;c,d=d,n*d+c\nprint b,d"
    ],
    "based-palindromes": [
        "lambda b:[i for i in range(1001)if(f:=lambda n:n*[0]and[n%b]+f(n//b))(i)==f(i)[::-1]]",
        "1000 -> 0"
    ],
    "find-the-largest-banknote": [
        "lambda a,*b:`5>>5/-~int(a)`+\"0\"*len(b)",
        "f=lambda n:n>9and 10*f(n/10)or 5>>5/-~n"
    ],
    "print-all-colorings-of-a-3x3-grid": [
        "i=2048;exec\"print bin(i/4)[i%4*3+3:][:3];i+=1;\"*i",
        "for i in range(512):print(\"\\n\".join(format(i,'09b')[j:j+3]for j in(0,3,6)),\"\\n\")",
        "i=512;b=\"\\n\"\nwhile i:i-=1;a=format(i,'09b');print(a[:3]+b+a[3:6]+b+a[6:],b)"
    ],
    "sum-square-difference": [
        "lambda n:(n**3-n)*(n/4+1/6)",
        "x=[i+1for i in range(int(input()))]\nprint(sum(x)**2-sum(i**2for i in x))"
    ],
    "print-1-to-15-using-different-printers": [
        "n=1;a='n=%d;a=%r;print n,a%%(n+1,a)if n!=15else\"STOP!\"';print n,a%(n+1,a)if n!=15else\"STOP!\"",
        "a,b=\"print'%d, a,b=%r,%d;exec a'%(b,a,b+1)*(b<16)or'STOP!'\",1;exec a"
    ],
    "display-the-exponent-from-a-binary-floating-point-number-as-a-decimal-value": [
        "lambda s:int(s[1:9],2)-127",
        "lambda n: sum([2**i*int(n[8-i])for i in range(8)])-127"
    ],
    "add-an-array-with-itself": [
        "lambda x,y:[sum(x[i::y])for i in range(y)]",
        "lambda x,n:map(sum,zip(*zip(*[iter(x+n*[0])]*n)))"
    ],
    "find-the-first-bracket-match": [
        "f=lambda s,n=1:n and-~f(s[1:],n+1-(-ord(s[1])&2))",
        "f=lambda s,r=[],i=0:(i<1or sum(r))and f(s[1:],r+[(ord(s[0])+1&2)-1],i+1)or i"
    ],
    "tower-of-strings": [
        "lambda s:s and f(s[:-1])+(s+'\\n')*len(s)*5",
        "lambda a:[a[:i]for i in range(len(a)+1)for j in' '*5*i]",
        "f=lambda x:[*x]and f(x[:-1])+[x]*5*len(x)"
    ],
    "apply-a-wave-to-an-array": [
        "i=2\nfor x in input():print~-x+i%5%3;i*=2",
        "lambda l:map(sum,zip(l,[1,0,-1,0]*len(l)))"
    ],
    "sum-of-first-n-terms-of-this-series": [
        "lambda x,n:sum(int(x*-~i)for i in range(n))",
        "lambda x,n:(10**-~n/9-n)/9*x",
        "lambda x,n:(10**n/.9-n)//9*x"
    ],
    "parallel-resistance-in-electric-circuits": [
        "lambda r:1/sum(1/v for v in r)",
        "f=lambda x,y=0,*i:f(x*y/(x+y),*i)if y else x",
        "lambda v:1/sum(1/x for x in v)"
    ],
    "can-i-join-the-music-box": [
        "lambda w:any(i in w for i in'do re mi fa sol la si'.split())",
        "lambda w:any('sdrmflsooeiaail'[i::7]in w for i in range(7))"
    ],
    "crack-the-code-to-the-combination-lock": [
        "for x in input().split():print(-eval('-'.join(x))%10,end='')",
        "for i in input():print(i-i/10)%10",
        "print(''.join([(i-i//10)%10 for i in map(int,input().split())]))"
    ],
    "chessboard-pattern": [
        "n=input()\np='X '*n\nprint n/2*(p[:n]+'\\n'+p[1:n+1]+'\\n'),\nif n&1:print p[:n]",
        "[i%2:n]",
        "x,i=input(),0\nexec'print(x*\"X \")[i:i+x];i^=1;'*x",
        "n=input()\ns='X '*n\nexec\"print s[:n];s=s[1:];\"*n"
    ],
    "ascii-expansion": [
        "f=lambda s,n:f(`ord(s[0])`,n-1)+f(s[1:],n)if n*s else s",
        "f=lambda n,i:i and f(''.join(str(ord(c))for c in n),i-1)or n",
        "f=lambda i,n:n and f(''.join(`ord(c)`for c in i),n-1)or i"
    ],
    "concentric-rings-on-a-snub-square-tiling": [
        "lambda n:n*12-11-([1]*n+[2,4,4,0])[-n]",
        "lambda n:n>4and~-n*12or[1,9,21,35][n-1]",
        "lambda n:n*12-11-(n>4or 5%-n%5)",
        "lambda n:~-n*12-(*n*[0],1,3,3,-1)[4]"
    ],
    "sum-the-first-n-even-fibonacci-numbers": [
        "f=lambda n:n/2and 4*f(n-1)+f(n-2)+2",
        "c=2+5**.5\nlambda n:(7-c)*c**n//20"
    ],
    "find-whether-a-number-is-happy-or-not": [
        "a=lambda b:b-1and(b-4and a(sum(int(c)**2for c in`b`))or\"Unh\")or\"H\";print a(input())+\"appy\"",
        "f=lambda n:eval({1:'\"H\"',4:'\"Unh\"'}.get(n,'f(sum(int(x)**2for x in`n`))'))\nprint f(input())+\"appy\"",
        "f=lambda n:n>4and f(sum(int(d)**2for d in`n`))or(\"H\",\"Unh\")[n>1]+\"appy\"",
        "n=input()\nwhile n>4:n=sum((ord(c)-48)**2for c in`n`)\nprint(\"H\",\"Unh\")[n>1]+\"appy\""
    ],
    "close-knit-words": [
        "s={*input()}\nfor c in s:o=ord(c);a=chr(o-2);b=chr(o-1);s>{a,b}and print(a+b+c)",
        "lambda X,W=[*map(chr,range(65,91))]:[i*({*X}>={*i})for i in zip(W,W[1:],W[2:])]",
        "w=input()\na=0\nwhile 1:s='%c'*3%(a,a+1,a+2);a+=1;{*s}-{*w}or print(s)"
    ],
    "digital-sumorial": [
        "f=lambda n,b=2.:n and n%b+f(n//b,b)+(n//b>1/n==0and f(n,b+1))",
        "lambda n:sum(n/(k/n+2)**(k%n)%(k/n+2)for k in range(n*n))"
    ],
    "states-and-capitals": [
        "y='Little Rock,Boise,Richmond,Denver,Olympia,Sacramento,Springfield,Baton Rouge,Tallahassee,Austin,Trenton,Lansing,Annapolis,Dover,Phoenix,Pierre,Charleston,Salt Lake City,Montpelier,Indianapolis,Concord,Providence,Madison,Oklahoma City,Santa Fe,Frankfort,Columbia,Atlanta,Boston,Salem,Juneau,Bismarck,Helena,Montgomery,Des Moines,Saint Paul,Jefferson,Lincoln,Hartford,Augusta,Carson City,Albany,Cheyenne,Columbus,Harrisburg,Honolulu,Raleigh,Nashville,Jackson,Topeka'.split(',')\nz='Arkansas,Idaho,Virginia,Colorado,Washington,California,Illinois,Louisiana,Florida,Texas,New Jersey,Michigan,Maryland,Delaware,Arizona,South Dakota,West Virginia,Utah,Vermont,Indiana,New Hampshire,Rhode Island,Wisconsin,Oklahoma,New Mexico,Kentucky,South Carolina,Georgia,Massachusetts,Oregon,Alaska,North Dakota,Montana,Alabama,Iowa,Minnesota,Missouri,Nebraska,Connecticut,Maine,Nevada,New York,Wyoming,Ohio,Pennsylvania,Hawaii,North Carolina,Tennessee,Mississippi,Kansas'.split(',')\ndef a(b):\n m='Arstotzka'\n if b in y:m=z[y.index(b)]\n if b in z:m=y[z.index(b)]\n print m",
        "i=input()\ns=\"Baton Rouge,Louisiana,Indianapolis,Indiana,Columbus,Ohio,Montgomery,Alabama,Helena,Montana,Denver,Colorado,Boise,Idaho,Austin,Texas,Boston,Massachusetts,Albany,New York,Tallahassee,Florida,Santa Fe,New Mexico,Nashville,Tennessee,Trenton,New Jersey,Jefferson,Missouri,Richmond,Virginia,Pierre,South Dakota,Harrisburg,Pennsylvania,Augusta,Maine,Providence,Rhode Island,Dover,Delaware,Concord,New Hampshire,Montpelier,Vermont,Hartford,Connecticut,Topeka,Kansas,Saint Paul,Minnesota,Juneau,Alaska,Lincoln,Nebraska,Raleigh,North Carolina,Madison,Wisconsin,Olympia,Washington,Phoenix,Arizona,Lansing,Michigan,Honolulu,Hawaii,Jackson,Mississippi,Springfield,Illinois,Columbia,South Carolina,Annapolis,Maryland,Cheyenne,Wyoming,Salt Lake City,Utah,Atlanta,Georgia,Bismarck,North Dakota,Frankfort,Kentucky,Salem,Oregon,Little Rock,Arkansas,Des Moines,Iowa,Sacramento,California,Oklahoma City,Oklahoma,Charleston,West Virginia,Carson City,Nevada,Arstotzka\".split(\",\")+[i]\nprint(s[1^s.index(i)])"
    ],
    "longest-zero-sum-sub-array": [
        "lambda a:[(s,l)for l in range(len(a))for s in range(len(a)-l)if 0==sum(a[s:s+l])][-1]",
        "f=lambda x,*a:f(*a,x[1:],x[:-1])if sum(x)else x"
    ],
    "is-it-a-pleasing-number": [
        "def f(n):p=n.rstrip(n[-1]);a=int(max(p));b=len(n)-len(p);return round(a**(1/b))**b==a",
        "s=`input()`;d=0\np=s.rstrip(s[-1])\nexec\"`d**(len(s)-len(p))`==max(p)>exit(1);d+=1;\"*10",
        "def f(s,i=~0):\n\twhile s[i]==s[~0]:i-=1\n\treturn int(max(s[:-~i]))**(1./~i)%1==0"
    ],
    "what-is-the-missing-number-divisibility-by-9": [
        "lambda n:-sum(ord(c)-3for c in n)%9",
        "lambda s:-int(s,19)%9"
    ],
    "string-rotation-output-string-repeatedly-moving-first-character-to-the-end": [
        "s=input()\nfor c in s:s=s[1:]+c;print s",
        "lambda i:[i[x:]+i[:x]for x in range(1,len(i)+1)]"
    ],
    "reverse-and-subtract": [
        "def r(n):a=abs(n-int(str(n)[::-1]));return a and r(a)\ntry:print(r(int(input())))\nexcept:print(1)",
        "L=[]\ndef f(n,L=L):\n    if n<1or n in L:print n<1\n    else:L+=[n];f(abs(n-int(`n`[::-1])))",
        "n=input()\nexec'n=abs(n-int(`n`[::-1]));'*n\nprint n"
    ],
    "different-number-same-weight": [
        "lambda x:x*2%~-2**32",
        "lambda i:int(f'{i:32b}'[1:]+f'{i:32b}'[:1],2)"
    ],
    "help-aliens-programmers-only-speak-ascii": [
        "p=print\nfor i in list(open(input()).read().split(\"\\n\"))\n    s=t=''\n    for j in i:\n        r=str(ord(j))\n        s+=j+' '*len(r)\n        t+=r+' '\n    p(s)\n    p(t)",
        "def f(s):\n o=x=''\n for c in s:\n    o+=c+\"  \";x+=\"%s    \"%ord(c)\n    if\"\\n\"==c:print o[:-1],x;o=x=''\n print o+\"\\n\"+x",
        "def f(s):\n for a in s:print(*map('{:>4}'.format,[*a,*a.encode()]),end='\\n\\n')"
    ],
    "weakened-binary-walls": [
        "def f(a,*t):\n if t:b,*r=f(*t);t=f(a|b,*r);a&=b\n return(a,*t)",
        "f=lambda a:a and[x|y&a[0]for x,y in zip([0]+f(a[1:]),f(a[1:])+[-1])]",
        "def c(l):b=[bin(n)[2:]for n in l];print[int(n,2)for n in map(''.join,zip(*map(sorted,zip(*['0'*(len(max(b,key=len))-len(x))+x for x in b]))))]"
    ],
    "diamondize-a-matrix": [
        "(lambda A: (lambda A,S:[[A[U][I-U] for U in range(min(S[1]-1,I),max(I-S[0]+1,0)-1,-1)] for I in range(S[1]+S[0]-1)])(A,A.shape))",
        "e=enumerate\nlambda M:[[r[n-i]for i,r in e(M)if-1<n-i<len(r)][::-1]for n,_ in e(M[1:]+M[0])]",
        "lambda L:[filter(None,x)[::-1]for x in map(None,[],*[i*[0]+r for i,r in enumerate(L)])]"
    ],
    "smallest-multiple-being-run-of-9-followed-by-optional-run-of-0": [
        "f=lambda n,r=9:r%n and f(n,10*r-10**n*r%-n/n*9)or r",
        "f=lambda n,r=0:{*str(r).strip('0')}!={'9'}and n+f(n,n+r)",
        "n=r=input()\nwhile int(`10*r`.lstrip('9')):r+=n\nprint r",
        "x=input();n=10;y=9\nwhile y%x:\n b=n\n while(b-1)*(y%x):b/=10;y=n-b\n n*=10\nprint y"
    ],
    "delicate-primes": [
        "powerset",
        "lambda n,R=range:all((g<2or any(g%i<1for i in R(2,g)))-(`g`==n)for g in{int(''.join(n[j]for j in R(len(n))if i>>j&1))for i in R(1,2**len(n))})",
        "lambda s,R=range:(l:=len(s))*all((g!=int(s))^(g>1)&all(g%k for k in R(2,g))for g in{int(''.join(s[j]for j in R(l)if i>>j&1))for i in R(1,2**l)})"
    ],
    "largest-prime-exponents": [
        "lambda n:max(a*(n%k**a<1)for a in range(n)for k in range(2,-~n))",
        "f=lambda n,i=2,l=[0]:(n<2)*max(map(l.count,l))or n%i and f(n,i+1,l)or f(n/i,2,l+[i])",
        "lambda n:max(k%n-n%(k/n+2)**(k%n)*n for k in range(n*n))",
        "n=input()\ne=m=0\nf=2\nwhile~-n:q=n%f<1;f+=1-q;e=q*-~e;m=max(m,e);n/=f**q\nprint m"
    ],
    "dynamically-create-boxes": [
        "n,m=input()\nexec\"print'[]'*n;\"*m",
        "lambda n,m:('[]'*n+'\\n')*m"
    ],
    "draw-an-asterisk-analog-clock-for-hour-n": [
        "def f(h):print(*([c,' *'[h%12+64==ord(c)]][c>'@']for c in'''\nK*A\nJ*B\nI0C\nHFD\nG E'''))",
        "(' ','*')"
    ],
    "simple-code-golf-challenge-character-patterns": [
        "f=lambda p,s:s>''and(map(s.find,s[:len(p)])==map(p.find,p))|f(p,s[1:])",
        "l=len\nf=lambda p,s:l(p)<=l(s)and(l({*zip(p,s)})==l({*p})==l({s for _,s in{*zip(p,s)}})or f(p,s[1:]))"
    ],
    "the-base-in-the-mix": [
        "f=lambda x:x[1:]and int(`x.pop()`,x[-1])+f(x)or x[0]",
        "lambda a:sum(int(`x`,y)for x,y in zip(a,[10]+a))",
        "lambda a:sum(map(int,map(str,a),[10]+a))"
    ],
    "predict-a-collision-will-the-robber-get-away": [
        "lambda s,p,a:(a-2*s)**2<8*a*p",
        "P=s=0;S,p,a=input()\nwhile(s<S)*(P<p):s+=a;p+=s;P+=S\nprint s>=S",
        "lambda c,p,a:(c-a/2)**2<2*p*a",
        "lambda c,p,a:c/a*(c-a+c%a)/2<p"
    ],
    "neutralize-data": [
        "f=lambda x:1-(x<{})and map(f,x)if x<''else' '*len(x)",
        "g=lambda d:0if d*0==0else \" \"*len(d)if d*0==\"\"else map(g,d)"
    ],
    "even-a-clock-that-isnt-working-gets-the-time-right-two-or-three-times-a-day": [
        "lambda h,m:26%~h==m",
        "lambda h,m:26%-~h<m<2"
    ],
    "split-marks-marks": [
        "lambda s,n:[*s.replace(b'\\1\\0',b'\\n',len(s)-n)]",
        "lambda n,s:[int(c,11)for c in s.replace('10','a',len(s)-n)]"
    ],
    "alternating-triangles": [
        "def f(n):\n if n:print((-~n//2*' '+'/','|')[n&1]);f(n-1)",
        "def f(n):print n%2*'|'or n/2%n*' '+'/';f(n-1)",
        "i=input()\nwhile i:print(' '*(i/2)+'/','|')[i%2];i-=1"
    ],
    "slowly-converging-zigzag": [
        "print\"\".join([\" \"*p+\"#\\n\"for p in(lambda l:[sum(l[:i])for i in range(len(l))])(sum([i*[1-i%2*2]for i in range(input())[::-1]],[])+[1])])",
        "l=range(1,input())\nprint 8\nfor i in l:\n for i in l:print' '*i+'8'\n l=l[-2::-1]",
        "def z(n):l=range(1,n);print(8);exec(\"[print(' '*i+'8')for i in l];l=l[-2::-1];\"*n)"
    ],
    "roll-the-alphabet-into-a-spiral": [
        "r=[[]]\nfor x in range(int(input())):\n r=len(r[-1])<len(r[0])and r or[*zip(*r[::-1]),[]];r[-1]+=[chr(x%26+65)]\nprint(*map(''.join,r),sep='\\n')",
        "r=range(input())\na=[1j**int((4*i+1)**.5)for i in r]\nb=[map(int,(-sum(a[:i]).real,sum(a[:i]).imag))for i in r]\nc,d=zip(*b)\nfor i in range(min(c),max(c)+1):print''.join([i,j]in b and chr(b.index([i,j])%26+65)or' 'for j in range(min(d),max(d)+1))"
    ],
    "prime-containment-numbers-golf-edition": [
        "f=lambda n,x=2:x*all(i in`x`for i in g(n,2))or f(n,x+1)\ndef g(n,x):p=all(x%i for i in range(2,x));return[0]*n and[`x`]*p+g(n-p,x+1)",
        "n=input();l=[]\nP=k=1\nwhile~-all(`x`in`k`for x in(l+[l])[:n]):P*=k*k;k+=1;l+=P%k*[k]\nprint k"
    ],
    "pascals-rhombus": [
        "p=lambda r,c:(r<0 or((c==0)|p(r-1,c-2)+p(r-1,c)+p(r-1,c-1)+p(r-2,c-2))+1)-1",
        "f=lambda n,k:(k==0)|sum(f(n+~j/3,k-j+j/3)for j in range(4)[:3*n])"
    ],
    "maximum-sub-array": [
        "a=b=0\nfor x in eval(input()):a=max(x,a+x);b=max(a,b)\nprint(b)",
        "f=lambda l:len(l)and max(sum(l),f(l[1:]),f(l[:-1]))"
    ],
    "how-did-i-end-up-with-this-fizzbuzz": [
        "def g(n,c=0,a=[4,0]):\n while n:c+=1;s=a[c%3>0]+a[c%5>0];s+=(s<1)*len(str(c));n-=s\n return c",
        "f=lambda s:len(s.rpartition(\"z\")[2])/len(str(n:=max(s.count(\"F\")*3,s.count(\"B\")*5)))+n",
        "f=lambda s,n=0,l=0:l-len(s)and f(s,n+1,l+(4*(n%3//2+n%5//4)or len(str(n))))or n",
        "f=lambda i,n=1,s=0:~-n*(s==i)or f(i,n+1,s+(4*((n%3<1)+(n%5<1))or len(str(n))))"
    ],
    "polynomialception": [
        "r=range\ne=reduce\na=lambda*l:map(lambda x,y:(x or 0)+(y or 0),*l)\nm=lambda p,q:[sum((p+k*[0])[i]*(q+k*[0])[k-i]for i in r(k+1))for k in r(len(p+q)-1)]\no=lambda f,g:e(a,[e(m,[[c]]+[g]*k)for k,c in enumerate(f)])",
        "def c(a,b):\n g=lambda p,q:q>[]and q[0]+p*g(p,q[1:]);B=99**len(`a+b`);s=g(g(B,b),a);o=[]\n while s:o+=(s+B/2)%B-B/2,;s=(s-o[-1])/B\n return o"
    ],
    "color-me-a-pole": [
        "f=lambda s,p=0:sum(f(s.replace(c,'',1),c)for c in{*s}-{p})or''==s",
        "'aaaabbb'"
    ],
    "csi-minecraft-items": [
        "lambda n:''.join(`k`+c for k,c in zip([n/1728,n/64%27,n%64],'csi')if k)or'0i'",
        "lambda n:g(n/1728,\"c\")+g(n/64%27,\"s\")+g(n%64,\"i\")or\"0i\"\ng=lambda n,s:(`n`+s)*(n>0)",
        "lambda n:g(n//1728,\"c\")+g(n//64%27,\"s\")+g(n%64,\"i\")or\"0i\"\ng=lambda n,s:(str(n)+s)*(n>0)"
    ],
    "can-you-handle-the-pub": [
        "n,l,d,u=int(input()),input(),\"behjrtvwBCGKS\",[1,0,2,0,6,7,6,3,3,25,2,50,.2]\nprint(sum(map(lambda x:int(x[0])*u[d.find(x[1])]*u[d.find(x[3])],l.split()))>n/2)",
        ".find()"
    ],
    "caesar-cypher-mania": [
        "r=q=\"\".__doc__[2];eval(\"p\"+q+\"int(''.join([c,ch\"+q+\"((o\"+q+\"d(c)-32+d)%95+32)][31<o\"+q+\"d(c)<127]fo\"+q+\" d in[int(input())]fo\"+q+\" c in input()))\")or'\\^UZ`smmyV[UZsGOwOT^ss[^PsOtx~}xPtp%!v~}tIG~|([^PsOt(|}$IR[^kPkUZGUZ`sUZ\\a`sttIR[^kOkUZkUZ\\a`sttt'",
        "Z=lambda s,d:s.translate({i+32:(i+d)%95+32for i in range(95)})or u''and Z\n\"uE:F;=:XLd=rLfMK:GLE:M>`TBckjr`Be=a]qmckj?HKXBXBGXK:G@>`qmaVaHKXN__:G=X\""
    ],
    "print-a-cantor-set": [
        "lambda n:'\\n'.join(eval(\"[i+' '*len(i)+i for i in\"*abs(n)+\"'_'\"+\"]+['___'*len(i)]\"*abs(n))[::n<1or-1])",
        "N=input()\nn=abs(N)\nc=lambda x:0if x<1 else x%3==1or c(x/3)\nr=[\"\".join([[\"_\",\" \"][c(x/3**i)]for x in range(3**n)])for i in range(n+1)]\nprint\"\\n\".join(r[::N>0 or-1])",
        "n=input()\nd=n>0 or-1\nfor i in range(n*d+1)[::d]:\n s='_'*3**i\n while i<n*d:s+=len(s)*' '+s;i+=1\n print s"
    ],
    "count-the-collatz-survivors-mod-2n": [
        "lambda k:sum(min(g(2**k,b,q+1)for q in range(k))>=(2**k,b)for b in range(2**k))\ng=lambda x,y,z:z and g(*(x+y)%2and(3/2*x,(3*y+1)/2)or(x/2,y/2),z-1)or(x,y)",
        "f=lambda n,p=1:n<1or(p>2)*f(n-1,p/2)+f(n-1,p*3/2)"
    ],
    "parse-my-esperanto": [
        "f=lambda x,v=\"c\u0109g\u011dh\u0125j\u0135s\u015du\u016dC\u0108G\u011cH\u0124J\u0134S\u015cU\u016c\":v and f(x.replace(v[0]+\"x\",v[1]),v[2:])or x",
        "lambda s,T=\"c\u0109g\u011dh\u0125j\u0135s\u015du\u016d\":eval(\"s\"+\".replace('%sx',%r)\"*12%(*T+T.upper(),))"
    ],
    "connect-four-validator": [
        "m=input()\nu=[r[::-1]for r in m]\nprint\"YX\"[any(any('X'*4in''.join(t[i][j-i]for i in range(j+1))for j in range(6))for t in(m[::-1],m,u,u[::-1]))]",
        "lambda m:\"YX\"[any(\"X\"*4in\"\".join(a)for a in zip(*m)+m+zip(*[\"0\"*(7-i)+m[i]+\"00\"*i+m[i]for i in range(6)]))]"
    ],
    "overflow-proof-buffer": [
        "x=[]\nfor n,i in input():x[i%(len(x)or 1)+1:0]=n,\nprint x",
        "b=[]\nfor x,y in input():b.insert(1+y%(len(b)or 1),x)\nprint b"
    ],
    "safety-in-numbers": [
        "i+1:i+v+2",
        "lambda l:all(v>=(l[i+1:].index(v)if v in l[i+1:]else len(l[i+1:])+l.index(v))for i,v in enumerate(l))"
    ],
    "bucket-and-minimize": [
        "lambda L,N,x=0:sum([(w:=len(L)//N+(v<len(L)%N))*[min(L[x:(x:=x+w)])]for v in range(N)],[])",
        "def f(L,N):l=len(L);s=l//N;m=l%N;return sum([[min(L[s*i+i*(m>0):s*i+s+i*(m>0)+(i<m)])]*(s+(i<m))for i in range(N)],[])"
    ],
    "create-a-universal-integer-sequence": [
        "itertools",
        "def f(n):d=len(`n`);return n/d**(n%d)%d-d/2"
    ],
    "generate-the-minimal-remainder-sequence": [
        "def r(o,c=0):\n y=[[j%i for i in range(2,100)]for j in range(o+1)]\n while 1:\n  c+=1;z=y[-1][:c]\n  if z not in[f[:c]for f in y[:-1]]:break\n print(z)",
        "i=l=1\nn=input()\nwhile l<=n|1:\n i+=1;a=l;print n%i\n while l%i:l+=a"
    ],
    "sort-useless-characters": [
        "n,s=input()\ns=s[::-1]\nR=range(len(s)/n+1)\nJ=''.join\nk=s[::n]\nt=J(sorted(J(s[i*n+1:i*n+n]for i in R)))\nn-=1\nprint J(j[::-1]for i in zip(k,[t[::-1][i*n:i*n+n][::-1]for i in R])for j in i)[::-1]",
        "lambda n,s:(l:=len(s),r:=sorted(s[~i]for i in range(l)if i%n),[r.insert(i,s[i])for i in range(~-l%n,l,n)])[1]",
        "n,l=input()\ni=range(len(l))\nprint\"\".join(sorted(l[~a]for a in i if a%n)[-a+a/n]if a%n else l[~a]for a in i)[::-1]"
    ],
    "is-the-group-cyclic": [
        "lambda A:len(A)in[len(set(reduce(lambda a,c:a+[A[a[-1]][n]],A,[n])))for n in A[0]]",
        "lambda x:any(g(r,r[i],i+1)==len(r)for i,r in enumerate(x))\ng=lambda x,y,z:y==z or 1+g(x,x[y-1],z)"
    ],
    "find-the-pisano-period": [
        "n=input();c=[1,1];a=[]\nwhile(c in a)<1%n:a+=[c];c=[c[1],sum(c)%n]\nprint len(a)or 1",
        "n=input()\ns=[]\na=k=0\nb=1\nwhile s[:k]!=s[k:]or k<1:s+=[a%n];k=len(s)/2;a,b=b,a+b\nprint k"
    ],
    "mark-a-ukmt-imc-paper": [
        "f=lambda a,b,n=0:a>\"\"and((a[0]==b[0])*(5+n/15)or-(n/15*n/10)*(a[0]<\"^\"))+f(a[1:],b[1:],n+1)",
        "f=lambda t,s,i=24:~i and(i/10*-(14<i<t[i]<'_'),5+i/15)[t[i]==s[i]]+f(t,s,i-1)"
    ],
    "find-the-emirps": [
        "p=lambda n:all(n%i for i in range(2,n))\ndef f(b,n):\n s=lambda n:(''if n<b else s(n//b))+f'{n%b:X}';l=[];i=3\n while n:i+=1;c=s(i);d=c[::-1];a=(c!=d)*p(i)*p(int(d,b));l+=[c]*a;n-=a\n return l",
        "p=lambda n:all(n%i for i in range(2,n))\nb,n=input()\ni=b\nwhile n:\n j=i=i+1;r=0\n while j:r=r*b+j%b;j/=b\n if(i-r)*p(i)*p(r):print i;n-=1"
    ],
    "can-the-maze-be-solved": [
        "def f(g,x=0,*p):w=len(g[0])+1;l=w*len(g);return~x%w*(-1<x<l)*~-(x in p)and any(g[x//w][x%w]and f(g,x+a,*p,x)for a in(1,-1,w,-w))or-~x==l",
        "def s(a):\n d=[(0,0)]\n while d:i,j=d.pop();a[i][j]=2;d+=[(x,y)for x,y in[(i-1,j),(i,j-1),(i+1,j),(i,j+1)]if len(a[0])>y>-1<x<len(a)and a[x][y]<1]\n return a[-1][-1]>1",
        "def f(a,x=0,y=0,h=[]):s=h+[[x,y]];X,Y=len(a[0]),len(a);return([x,y]in h)==(x>=X)==(y>=Y)==(x<0)==(y<0)==a[y][x]<(x==X-1and y==Y-1or f(a,x-1,y,s)|f(a,x+1,y,s)|f(a,x,y-1,s)|f(a,x,y+1,s))",
        "f=lambda m,x=0,y=0,n=0:n<len(m)*len(m[0])and m[x][y]<1and((x,y)==(len(m)-1,len(m[0])-1)or any(0<=i<len(m)and 0<=j<len(m[0])and f(m,i,j,n+1)for i,j in[(x-1,y),(x,y-1),(x+1,y),(x,y+1)]))"
    ],
    "score-a-hand-of-hearts": [
        "def s(a):r=[sum([(1,13)[c==0]for c in h])for h in a];s=(r,[(26,0)[s==26]for s in r]);return s[26in r]",
        "i=[len(a)+12*(0in a)for a in input()]\nprint[[x,26-x][26in i]for x in i]"
    ],
    "sort-band-names": [
        "lambda x:sorted(x,key=lambda a:a[4*(a.lower()[:4]=='the '):].lower())",
        "lambda b:sorted(b,key=lambda x:(x,x[4:])[x.lower()[:4]=='the '])"
    ],
    "donation-arms-race": [
        "f=lambda l,p=1,c=0:c/p and-~f(l,c)or l>[]and f(l[1:],p,c+l[0])",
        "lambda y,p=0,d=0:len([p:=(d:=p-d)for x in y if(d:=d-x)<1])",
        "d=p=t=0\nfor x in input():\n d-=x\n if d<1:t+=1;p=d=p-d\nprint t"
    ],
    "implement-sha-256": [
        "Q=2**32\nG=lambda e:[int(x**e%1*Q)for x in range(2,312)if 383**~-x%x<2]\nH=G(.5)[:8]\nr=lambda v,b:v>>b|v<<32-b\nM=input()\nl=len(M)\nM+=bin(l|1<<(447-l)%512+64)[2:]\nwhile M:j=0;a,b,c,d,e,f,g,h=H;exec\"H+=int(M[:32],2),;M=M[32:];\"*16+\"x=H[-15];y=H[-2];H+=(H[-16]+H[-7]+(r(y,17)^r(y,19)^y>>10)+(r(x,7)^r(x,18)^x/8))%Q,;\"*48+\"u=(r(e,6)^r(e,11)^r(e,25))+(e&f^~e&g)+h+G(1/3.)[j]+H[j+8];X=a,b,c,d,e,f,g,h=(u+(r(a,2)^r(a,13)^r(a,22))+(a&b^a&c^b&c))%Q,a,b,c,(d+u)%Q,e,f,g;j+=1;\"*64;H=tuple(a+b&Q-1for a,b in zip(H,X))\nprint\"%08x\"*8%H",
        "n=range\nf=2**32\nq=512\nr=lambda v,b:v%f>>b|(v<<32-b)%f\nt=int\ng=lambda e:[t(x**e%1*f)for x in n(2,312)if 383**~-x%x==1]\nh=g(.5)\nk=g(1/3.)\nm=map(t,input())\nl=len(m)\nm+=[1]+[0]*((447-l)%q)+map(t,'{:064b}'.format(l))\nfor i in n(l/q+1):\n c=m[q*i:][:q];w=[t(`c[j*32:][:32]`[1::3],2) for j in n(16)];x=h[:8]\n for j in n(48):a,o=w[j+1],w[j+14];w+=[(w[j]+(r(a,7)^r(a,18)^(a>>3))+w[j+9]+(r(o,17)^r(o,19)^(o>>10)))%f]\n for j in n(64):a,o=x[::4];d=x[7]+(r(o,6)^r(o,11)^r(o,25))+(o&x[5]^~o&x[6])+k[j]+w[j];e=(r(a,2)^r(a,13)^r(a,22))+(x[1]&a|x[2]&a|x[1]&x[2]);x=[d+e]+x[:7];x[4]+=d\n h=[(H+W)%f for H,W in zip(h,x)]\nprint''.join('%08x'%H for H in h)"
    ],
    "write-an-interpreter-generator": [
        "lambda f:lambda i,a=0:[a:={n:eval({'=':v}.get(o,str(a)+o+v))for n,o,v in f}[k]for k in i][-1]",
        "lambda s:'%{\\nfloat p;\\n%}\\n%%\\n'+''.join(a+' p=p'+b+('(','w(p,')[b>'=']+c+');\\n'for a,b,c in s)+'%%\\nmain(){yylex();printf(\"%f\",p);}'",
        "print\"0  v\\n<vi<\"\nfor c,p in input():n=int(p[1:],16);p=[n/10*\"a+\"+`n%10`+p[0],\":\"*n+\"*\"*n][p[0]==\"^\"];print\"^>:'\"+c+\"'=?!v~\"+p+\"\\n^v       <\"\nprint\" >~n\""
    ],
    "chinese-checkerboard": [
        "n=input();x=N=2*n\nwhile~N<x:s='';y=n*3;exec\"a=x+y;q=[0,a>N,x-y>N,-x>n,-a>N,y-x>N,x>n,1];s+=' BYROPG.'[q.index(sum(q)<~a%2*3)];y-=1;\"*(y-~y);print s;x-=1",
        "n=input()\nfor k in range(4*n+1):x=abs(k-2*n);y=2*n-x;p,q,r=\" BP G..R YO \"[(k-~k)/(n-~n)::4];print(\" \"*y+\" \".join(p*x+q*-~y+r*x)+\" \"*y)[n:-n]"
    ],
    "how-much-is-my-dice-matrix-worth": [
        "f=lambda a:a>[]and sum(u'\u0010\u0200\u0101D\u0111T\u0145\u0200\u0155\u0200\u01c7\u016d'.find(unichr(int(J(J(map(str,r[i:i+3]))for r in a[:3]),2)))/2+1for i in range(0,len(a[0]),3))+f(a[3:])\nJ=''.join",
        "lambda m:sum({16:1,257:2,68:2,273:3,84:3,325:4,341:5,455:6,365:6}.get(int(''.join(str(e)for c in m[3*i:][:3]for e in c[3*j:][:3]),2),0)for i in range(len(m)//3)for j in range(len(m[0])//3))"
    ],
    "golombs-wobbly-sequence": [
        "f=lambda n,k=1:n*(n<4)or map(f,range(n)+k*[n-1]).count(k)<f(k)or-~f(n,k+1)",
        "s=0,1,2,3\nexec't=1\\nwhile t==s[-1]or s.count(t)/s[t]:t+=1\\ns+=t,;'*input()\nprint s[-4]",
        "L=[1,2,3]\nn=input()\nwhile len(L)<n:\n for i in range(2,n):\n    if L.count(i)<L[i-1]and L[-1]!=i:L+=[i];break\nprint L[n-1]"
    ],
    "quandle-quandary-episode-i-identifying-finite-quandles": [
        "def f(m):R=range(len(m));return all(m[i][i]==i<set(zip(*m)[i])==set(R)>m[m[j][k]][i]==m[m[j][i]][m[k][i]]for i in R for j in R for k in R)",
        "t=input();e=enumerate\n[0%(a==A[a]in B>C[B[a]]==t[C[b]][C[a]])for(a,A)in e(t)for(b,B)in e(t)for C in t]"
    ],
    "predict-the-landslide": [
        "h,c=input()\nb=l=[h]*h+[0]*h\nwhile b:\n b=0\n for i in range(len(l)-1):\n  if l[i]-l[i+1]>c:\n    for j in range(c):l[i-~j]+=1\n    l[i]-=c;b=1\nprint sum(h>e>0for e in l)",
        "h,c=input();q=[h]*h+[0]*h\ntry:\n while 1:\n    d=[b-a for a,b in zip(q[1:],q)];g=max(d);a=d.index(g)\n    for i in range(c):q[a+1+i]+=1/(g>c);q[a]-=1\nexcept:print sum(h>i>0for i in q)"
    ],
    "output-visual-diagram-of-picture": [
        "w,h,a,b=input()\na*='+'\nb*='#'\nfor c in b+a+h*'X'+a+b:print' '.join(min(c,d)for d in b+a+w*'X'+a+b)",
        "lambda a,b,c,d:\"\\n\".join((g:=['#'*(a+2*c+2*d)]*d+[(h:='#'*d)+'+'*(a+c*2)+h]*c)+[h+'+'*c+'X'*a+'+'*c+h]*b+g[::-1])"
    ],
    "reverse-engineer-polling-statistics": [
        "f=lambda l,m=1,i=0,c=0,x=0:round(x*100,1)-l[i]and(x<1and f(l,m,i,c,x+1/m)or f(l,m+1))or l[i+1:]and f(l,m,i+1,c+x)or c+x-1and f(l,m+1)or m",
        "def r(l):\n v=0\n while 1:\n  v+=1;o=[round(y*v/100)for y in l];s=sum(o)\n  if s: \n    if all(a==b for a,b in zip(l,[round(y*1000/s)/10for y in o])):return s",
        "def p(x):\n n=[1]*len(x);d=2;r=lambda z:round(1000.*z/d)/10\n while 1:\n    if(map(r,n),sum(n))==(x,d):return d\n    d+=1\n    for i in range(len(x)):n[i]+=r(n[i])<x[i]"
    ],
    "output-the-simplified-goodstein-sequence": [
        "n=int(input());l=[1]*(n+1);i=0\nwhile l:\n    l=[t+1 if t==i else t for t in l];l[-1]-=1;l=l[:-1] if l[-1]==0 else l;print(\"+\".join(list(map(str,l))));i+=1",
        "n=input();b=1\nwhile n:print\"+\".join(n/b*[`b`]+[`n%b`][:n%b]);n+=n/b-1;b+=1"
    ],
    "digit-product-sequences": [
        "replace(*'01')",
        "f=lambda a,b=1:a*(a==b)or f(*sorted([a+eval('*'.join(`a`.replace(*'01'))),b]))",
        "m=[1]\nn=[int(input())]\nwhile not{*m}&{*n}:\n for l in m,n:l+=l[-1]+eval('*'.join(str(l[-1]).replace(*'01'))),\nprint({*m}&{*n})"
    ],
    "read-a-retro-display": [
        "s=lambda a,i=0:[a]if i==len(a[0])else[[j[:i]for j in a]]+s([j[i+1:]for j in a])if all(j[i]==' 'for j in a)else s(a,i=i+1)\np=lambda l:['95572431508448853268'.find(`sum(ord(c)**i for i,c in enumerate(\"\".join(n)))%108`)/2for n in s(l.split('\\n'))]",
        "def p(i):\n n=[[]]\n for l in zip(*i.split('\\n')):\n  if all(i==\" \"for i in l):n+=[[]]\n  else:n[-1]+=l\n return''.join(map(lambda l:str([''.join(l[2:])==x for x in\n             \"|_ _ ||,|,|___ | ,_ ||,  _  ||, ___  |,|___  |,  ||,|___ ||, ___ ||\"\n                     .split(',')].index(1)),n))"
    ],
    "paths-wasting-time": [
        "except:0",
        "def f(a,n,r=-1,s=0):\n j=len(a[0]);x=1;z=y=0\n if r<0:s,r=divmod(sum(a,[]).index('@'),j)\n for c in'>v<^':\n\tu=r+x;v=s+y;x,y=-y,x\n\tif j>u>-1<v<len(a):b=[e[:]for e in a];b[s][r]=c;w=a[v][u];z=n*(w<'!')and f(b,n-1,u,v)or n==1and w=='$'and b\n\tif z:return z"
    ],
    "whats-the-file-extension": [
        "lambda s:s.split('.')[-1]",
        "print(input().split(\".\")[-1])"
    ],
    "sort-odd-numbers-first": [
        "lambda l:sorted(l,key=(-1).__pow__)",
        "lambda a:sorted(a,lambda x,y:x%-2)",
        "lambda a:sorted(a,key=lambda x:~x%2)"
    ],
    "swap-every-two-elements-in-a-list": [
        "lambda m:m[~-(m==m).cumsum()^1]",
        "lambda a:sum(zip(a[1::2],a[::2]),())",
        "lambda l:[l[c^1]for c in range(len(l))]",
        "f=lambda l:l and l[1::-1]+f(l[2:])",
        "def f(m):*m[1:],_,m[::2]=*m,m[1::2]",
        "def f(a,b,*m):print b,a,;f(*m)"
    ],
    "create-chunks-from-an-array": [
        "f=lambda x,n:[x[i:i+n]for i in range(0,len(x),n)]",
        "lambda A,n:[A,[A[x:x+n]for x in range(0,len(A),n)]][n<len(A)]",
        "i,j=input()\nwhile j:print j[:i];j=j[i:]",
        "lambda A,n:[A[:n],*(f(A[n:],n)if A[n:]else[])]"
    ],
    "distance-between-two-points-in-n-dimensional-space": [
        "lambda*a:sum((x-y)**2for x,y in zip(*a))**.5",
        "a=input()\nb=input()\nx=sum([(a[i]-b[i])**2 for i in range(len(a))])**.5",
        "lambda a,b:sum((d-e)**2for d,e in zip(a,b))**.5"
    ],
    "reverse-factorial-function": [
        "lambda n:len(`n**8L`)**.6//1",
        "lambda x:[n for n in range(1,x)if reduce(lambda a,b:a*b,range(1,n+1))==x]",
        "f=lambda n,k=2:n and-~f(n/k,k+1)"
    ],
    "get-the-best-of-two-arrays": [
        "lambda a,b:a*(a>=b)+b*(b>=a)",
        "lambda*x:map(lambda a,b:a*(a>=b)+b*(b>=a),*x)",
        "lambda*a:map(lambda*x:max(x)*2/len({*x}),*a)",
        "lambda*a:map(lambda x,y:max(x,y)*-~(x==y),*a)"
    ],
    "perfect-radicals": [
        "lambda n:{r**i:r for i in range(n)for r in range(n+1)}[n]",
        "def r(n):\n    i=n\n    while(a:=n**(1/i))%1:i-=1\n    return a",
        "lambda n,r=round:r(n**[1/i for i in range(1,n+1)if r(n**(1/i))**i==n][-1])",
        "f=lambda n,r=1,i=1:r*(r**i==n)or f(n,r+(i>n),i>n or-~i)"
    ],
    "calculate-standard-deviation": [
        "lambda l,N:(sum((i-sum(l)/N)**2for i in l)/N)**.5",
        "lambda l:(sum((x-sum(l)/len(l))**2for x in l)/len(l))**.5"
    ],
    "mowing-the-grass": [
        "lambda s:len(max(s.replace(\"W\",\"ww\").split('v')))",
        "lambda n:max([sum([2if i==\"W\"else 1for i in x])for x in n.split('v')])",
        "lambda s,t=0:max((t:=c%2*t+c%5%3)for c in s)"
    ],
    "proper-divisor-mash-up": [
        "f=lambda z:sum(max(i for i in range(1,y)if 1>y%i)for y in range(2,z+1))",
        "f=lambda n,k=2:n/k and(f(n,k+1),n/k+f(n-1))[n%k<1]",
        "f=lambda n:n-1and max(j for j in range(1,n)if n%j<1)+f(n-1)",
        "n=input();r=[0]*n;d=1\nwhile n:n-=1;r[d+d::d]=n/d*[d];d+=1\nprint sum(r)"
    ],
    "whats-my-body-mass-index": [
        "a,b=map(int,input().split())\na/=b*b*5\nprint([\"UOnvd\"[a>93::2]+\"erweight\",\"Normal\"][93<=a<=125])",
        "lambda a,b:\"UNOnovdreemrrawwlee ii gg hh tt\"[(18.6<a/b/b)+(a/b/b>25)::3]",
        "lambda w,h:[\"UOnvd\"[w/h/h>20::2]+\"erweight\",\"Normal\"][18.5<=w/h/h<25]",
        "lambda h,w:18.5<=w/h/h<=25and\"normal\"or[\"ov\",\"und\"][25>w/h/h]+\"erwe\u200c\u200bight\""
    ],
    "print-a-conversion-table-for-unsigned-bytes": [
        "for i in range(256):print i,127-i^127",
        "f=lambda i=255:i*' 'and'%d '*2%(i,127-i^127)+f(i-1)",
        "print([(127-i^127,i)for i in range(256)])",
        "for i in range(256):print(i,127-i^127)"
    ],
    "find-me-vowels-near-you": [
        "def f(s):\n v='aeiouAEIOU';l=[];r=[];L=R=len(s:=s.lower())-2\n for i in range(R+2):l.append(L:=0if s[i]in v else L+1);r.append(R:=0if s[~i]in v else R+1)\n return[min(l[x],r[~x])for x in range(len(s))]",
        "s=input();n=0;exec\"print min(abs(y-n)for x in'aeiouAEIOU'if x in s for y,z in enumerate(s)if z==x);n+=1;\"*len(s)",
        "lambda s,E=enumerate:[min(abs(j-i)for j,y in E(s)if y in'aeiouAEIOU')for i,_ in E(s)]",
        "def f(s):\n\to=[]\n\tfor c,l in enumerate(s):\n\t\ti,j=c,0\n\t\twhile 1:\n\t\t\tif i in range(len(s))and s[i]in'aeiouAEIOU':\n\t\t\t\to+=[abs(c-i)]\n\t\t\t\tbreak\n\t\t\tj+=1\n\t\t\ti+=j*(j%2*2-1)\n\treturn o"
    ],
    "female-and-male-sequences": [
        "F=lambda n:n and n-M(F(n-1))or 1\nM=lambda n:n and n-F(M(n-1))\nn=range(input())\nprint map(F,n),'\\n',map(M,n)",
        "a=0,;b=1,\nexec\"a,b=b,a+(len(a)-b[a[-1]],);\"*~-input()*2\nprint b,'\\n',a"
    ],
    "reverse-bit-order-of-32-bit-integers": [
        "f=lambda n:int(bin(n%2**32)[:1:-1],2)",
        "print int(\"{:032b}\".format(input()%2**32)[::-1],2)",
        "def r(n):\n if n<0:n=~n^0xFFFFFFFF\n print int(['','-'][n%2]+'{:032b}'.format(n)[::-1],2)"
    ],
    "the-n-th-ternary": [
        "n=input()\nfor i in range(n-1):print-~i,'?',\nprint`n`+' : 0'*~-n",
        "t=lambda n:' ? '.join(map(str,range(1,n+1)))+' : 0'*~-n"
    ],
    "print-the-missing-characters": [
        "lambda n:{*map(chr,range(32,127))}-{*n}",
        "lambda s:''.join({chr(i+34)for i in range(93)}-set(s))"
    ],
    "longest-run-of-a-character-in-a-string": [
        "f=lambda s,c,m=0,k=0:s and f(s[1:],c,-~m*(s[0]==c),max(m,k))or max(m,k)",
        "f=lambda s,c:+(c in s)and-~f(s,c+c[0])"
    ],
    "all-the-k-mers-n-grams": [
        "f=lambda a,n:[a[i:i+n]for i in range(len(a)-n+1)]",
        "lambda x,n:map(''.join,zip(*[x[b:]for b in range(n)]))",
        "a[n-1:]"
    ],
    "is-my-number-a-de-polignac-number": [
        "lambda x:not(x%2<1or any((lambda x:x>1and all(x%j for j in range(2,x)))(x-2**i)for i in range(x)))",
        "lambda n:n&1-any(n-2**k>1and all((n-2**k)%j for j in range(2,n-2**k))for k in range(len(bin(n))-2))",
        "f=lambda n,k=1,p=-1:k/n or(n-k&n-k-p%k>0)&n&f(n,k+1,p*k)"
    ],
    "apply-gravity-to-this-matrix": [
        "lambda a:a.sort(0)",
        "lambda a:zip(*map(sorted,zip(*a)))"
    ],
    "the-return-of-fizzbuzz": [
        "-d short_open_tag=on -d output_buffering=on",
        "#define print(a)i;main(){for(;i++<1e3;)printf(i%3?\"%d\":\"FizzBuzz\",i);}\nprint(''.join(i%2and`i`or\"FizzBuzz\"for i in range(1,1001)))",
        "x=1000;\nwhile x>0%1:print((x,'FizzBuzz')[x%(3/2*2)<1]);x-=1;\"\"\"\nprintf('%d FizzBuzz %d ',x,x-1)\nx-=3;\nend%\"\"\""
    ],
    "multiplicity-test": [
        "x=1\nwhile x<100:print((('%s','(%s)')[x%3<1],'[%s]')[x%4<1],'([%s])')[x%12<1]%x,;x+=1",
        "i=0\nexec\"i+=1;print'('[i%3:]+`[i][i%4:]or i`+')'[i%3:],;\"*99",
        "for i in range(1,100):print(\"(%s)\",\"%s\")[i%3>0]%(\"[%s]\"%i,i)[i%4>0],",
        "i=0\nexec\"i+=1;t,f=i%3<1,i%4<1;print'('*t+'['*f+`i`+']'*f+')'*t,;\"*99",
        "print(*[(i if i%4else f\"[{i}]\")if i%3else(f\"({i})\"if i%4else f\"([{i}])\")for i in range(1,100)])",
        "i=0\nexec\"i+=1;u=i%3/-2*(i%4/-3-1);print'([%0d])'[u:7-u:1+(i%3<1<=i%4)]%i,;\"*99"
    ],
    "print-out-the-first-n-characters-of-your-code": [
        "b=input();a=lambda x:(b*(2*(x+chr(34))+')'))[:b];print a(\"b=input();a=lambda x:(b*(2*(x+chr(34))+')'))[:b];print a(\")",
        "def f(n):a='def f(n):a=%r;print(a%%a*n)[:n]';print(a%a*n)[:n]"
    ],
    "print-a-3d-shape": [
        "lambda a:sum(zip(*((' '*(x:=a+~i)+'//'*i+'^L'*a,' '*i+r'\\\\'*x+' \"'*a)for i in range(a))),())",
        "k=n=input()\nwhile 1:k-=1;i=k^k/n;print' '*i+(n+~i)*2*'\\/'[k/n-1]+'^ L\"'[k<0::2]*n"
    ],
    "generalized-fizzbuzz": [
        "f=lambda a,n=1:print(''.join(j*(n%i<1)for i,j in a)or n)+f(a,n+1)",
        "def f(k,i=1):\n print''.join(y*(i%x<1)for x,y in k)or i;f(k,i+1)",
        "exec(\"g=\"+input())\nn=1\nwhile 1:\n b=1\n for k,v in g:\n  if n%k<1:\n   print(v,end='')\n   b=0\n print(n)if b else print()\n n+=1"
    ],
    "my-sub-strings-are-hiding": [
        "a=sorted\nlambda s,S:a(s)in[a(S[n:n+len(s)])for n in range(len(S))]",
        "s=sorted\nf=lambda u,t:s(u)==s(t[:len(u)])or t and f(u,t[1:])"
    ],
    "a-bit-of-a-digital-xor": [
        "lambda n:[c for c,d in zip(str(n)*n,f'{n:b}')if'0'<d]",
        "lambda n:[c for c,i in zip(`n`*n,bin(n)[2:])if'0'<i]"
    ],
    "how-many-threes": [
        "n=input()*3;p=n<1\nwhile n:p+=n%3<1;n/=10\nprint p",
        "lambda n:g(`3*n`)\ng=lambda n:int(n)%3<1and 1+max([g(n[i:])for i in range(1,len(n))]+[0])",
        "n=input()*3;k=p=0\nwhile n:k+=n%10;n/=10;p+=k%3<1\nprint p"
    ],
    "split-a-list-evenly": [
        "f=lambda a,*l:sum(l)>0and-~f(*l,-a)",
        "lambda l:min([abs(sum(l)-2*sum(l[:i])),i]for i in range(len(l)))[1]"
    ],
    "for-what-block-sizes-is-this-checksum-valid": [
        "lambda n:(l:=len(n))and[b for b in range(1,l)if not(eval('^'.join('0o'+n[a:a+b]for a in range(0,l,b)))or l%b)]",
        "lambda s:[d for d in range(1,len(s))if~-any(len(s)%d+sum(s[x::d])%2for x in range(d))]"
    ],
    "is-this-a-valid-takuzu-board": [
        "lambda m,c=lambda m:all([len({*m})==len(m),sum(~-(\"000\"in x)*~-(\"111\"in x)and x.count(\"1\")==x.count(\"0\")for x in m)==len(m)]):c([\"\".join(x[i]for x in m)for i in range(len(m[0]))])and c(m)",
        "a=input()\nn=len(a)\nb=zip(*a)\nprint[n/2]*n*2==map(sum,a+b)>len(set(a))==len(set(b))==n<'0, 0, 0'not in`a+b`>'1, 1, 1'not in`a+b`"
    ],
    "generating-a-soccer-team": [
        "print\"\\n\".join(s*8for s in\"   |.|   *   ]^[   * /~`-'~\\ *{<| %s |>}* \\|___|/ *  /   \\  * /__|__\\ * | / \\ | * (/   \\) * |)   (| *(%s|,.,|%s)\".split(\"*\"))%tuple(\"86137942\"+\".,,.\"*4)",
        "b=[x*8for x in\"   |.|   #   ]^[   # /~`-'~\\ ## \\|___|/ #  /   \\  # /__|__\\ # | / \\ | # (/   \\) # |)   (| \".split(\"#\")]+[\"(.|,.,|,)(,|,.,|.)\"*4]\nfor y in'86137542':b[3]+='{<| %s |>}'%y\nprint'\\n'.join(b)"
    ],
    "how-many-of-each-pill-to-take-to-achieve-the-total-daily-dose": [
        "lambda x:[x//5,x%1*2,x*6%5]",
        "lambda x:[x//5,x%1*2,(x<20)*x%5]"
    ],
    "find-the-sum-of-the-divisors-of-n": [
        "lambda k:sum(i*(k%i<1)for i in range(1,1+k))",
        "f=lambda n,i=1:i<=n and(n%i<1)*i+f(n,i+1)"
    ],
    "escape-the-labyrinth": [
        "f=lambda n:n>1and Q[n]+f(n+[-5,5,1,-1]['nsew'.find(Q[n])])or''\nQ='  wwswsnwwseenwwenwnwnenwn'",
        "def f(n):d=0x1211252b5375>>2*n-4&3;print\"nwes\"[d];f(n+d*3+d%2-5)"
    ],
    "thorough-though-thoreau-threw-troll-throws-through-tough-troughs": [
        "print'K{7j)yE<}'.find(chr(hash(raw_input())%95+32))+1",
        "f=lambda w:int(w,34)%444/46",
        "lambda x:hash(x)%78%10"
    ],
    "code-the-levine-sequence": [
        "x=[2]\nexec'x=sum([v*[i]for i,v in enumerate(x[::-1],1)],[]);'*input()\nprint sum(x)",
        "f=lambda n,l=[2]:n and f(n-1,[n+1for n,e in enumerate(l[::-1])for _ in[0]*e])or l[-1]",
        "print(*[11,12,112,1123],sep=\"\\n\");n=\"11|2|3\";x=2;t=\"\";j=0\nwhile 1:\n for y,z in enumerate(''.join([str(w)[::-1] for w in n.split(\"|\")[1:][::-1]])):\n  t+=str(y+1)*int(z)\n  if j==0:t+=\"|\"\n  j+=1;k=y+2\n n=t+''.join(map(lambda z:'|'+str(z),list(range(k,k+(len(n)-len(n.lstrip('1')))))))\n print(n.replace(\"|\",\"\"));t=\"\";j=0"
    ],
    "shortlex-predecessor": [
        "A=lambda\tB:(C:=B.pop())>97and\tB+[C-1]or\tA(B)+[122]if\tB>[97]else[]",
        "A=\"\";B=1\nfor C in input()[::-1]:A=chr((ord(C)-97-B)%26+97)+A;B*=C<\"b\"\nprint A[B:]"
    ],
    "build-me-a-room": [
        "f=lambda d,w=0:d and[f(d[1:],x)for x in[1,*[w]*(d[0]-2),1]]or w",
        "f=lambda d,o=0:d and[f(t:=d[1:],1),*[f(t,o)]*(d[0]-2),f(t,1)]or o"
    ],
    "find-the-submatrix-with-the-smallest-mean": [
        "f=lambda M:M[2:]and min(sum(sum(zip(*M[:3])[:3],()))/9,f(M[1:]),f(zip(*M)[1:]))",
        "h=lambda a:[map(sum,zip(*s))for s in zip(a,a[1:],a[2:])]\nlambda a:min(map(min,h(zip(*h(a)))))/9.",
        "lambda m,r=range:min(sum(sum(m[y+i][x:x+3])for i in r(3))/9for x in r(len(m[0])-3)for y in r(len(m)-3))"
    ],
    "give-me-triangles": [
        "def f(n,i=1):print((n-i)*' '+(2*i-1)*'#');n>i and f(n,i+1)",
        "def f(n,i=1):1/n;print\" \"*~-n+\"#\"*i;f(n-1,i+2)",
        "n,i=input(),1\nexec\"print(n-i)*' '+(2*i-1)*'#';i+=1;\"*n",
        "n=input();v=1\nwhile n:n-=1;print' '*n+'#'*v;v+=2"
    ],
    "compatible-strings": [
        "lambda t:len({sum(ord(c)+3for c in w)%9for w in t})",
        "def f(a):\n x,y=[sum((ord(i)-97)%9+1for i in z)for z in a]\n g=lambda t:sum(int(i)for i in str(t))\n while x>9:x=g(x)\n while y>9:y=g(y)\n return x==y"
    ],
    "repdigit-base-finding": [
        "f=lambda x,b=2:~-b*x in[i%b*~-b**(i/b)for i in range(b*x)]and b or f(x,-~b)%~-x",
        "n=input()\nb=1\nwhile b<n-2:\n i=n;b+=1\n while i%b==i/b%b:i/=b\n if i<b:print b",
        "lambda x:{b for b in range(2,x-1)for d in range(x)if x*~-b==x%b*~-b**d}"
    ],
    "find-the-recursive-size-of-a-list": [
        "l=lambda a:0if len(a)==0else len(a)+sum(l(i)for i in a if type(i)==list)",
        "f=lambda x:x*0==[]and len(x)+sum(map(f,x))"
    ],
    "make-it-prime-with-the-smallest-suffix": [
        "def f(n,x=1):k=int(n+`x`);return all(k%i for i in range(2,k))or-~f(n,x+1)",
        "def x(n,i=1):k=int(f\"{n}{i}\");return all(k%j for j in range(2,k))and i or x(n,i+1)"
    ],
    "verify-eigenpairs": [
        "lambda a,b,c:c*b==a.dot(b)",
        "f=lambda m,s,e:all(m.dot(s)==e*s)",
        "lambda A,L,v:all(L*y==sum(i*j for i,j in zip(x,v))for x,y in zip(A,v))"
    ],
    "reorder-a-matrix-twice": [
        "lambda a,u:[[[a[y][x]for x in t]for y in t]for t in[u,[u.index(i)for i in range(len(u))]]]",
        "lambda m,p:[m[x][:,x]for x in(p,p.argsort())]"
    ],
    "cuban-primes": [
        "P=k=1\nwhile 1:P*=k*k;x=k;k+=1;P%k>0==((x/3)**.5%1)*((x/3+.25)**.5%1-.5)and print(k)",
        "isPrime(1+\u230a\u00ben\u00b2\u230b) else n++"
    ],
    "school-moving-out-day-1": [
        "lambda g,c:s(g)==s(map(min,zip(s(g)[::-1],s(c)[::-1])))\ns=sorted",
        "g,r=map(sorted,input())\nwhile g:g.pop()>r.pop()>y"
    ],
    "eiffel-towers-create-a-large-a-from-as": [
        "lambda n:'\\n'.join(f\"{'A'+' A'[i==n//2]*2*i:>{n+i}}\"[:-1]+'A'for i in range(n))",
        "lambda n:'\\n'.join(' '*(n+~i)+('A'+' A'[i==n/2]*n*2)[:i*2]+'A'for i in range(n))",
        "lambda n:'\\n'.join(f\"{'A'+(x>0)*('A '[x!=n//2]*(x*2-1)+'A'):^{n*2-1}}\"for x in range(n))",
        "lambda n:['%*sA\\n'%(n+i,('A'+i*2*' A'[i==n/2])[:-1])for i in range(n)]"
    ],
    "carve-a-square-from-a-string": [
        "def f(i):\n i=i.split('\\n');x=0\n while all(v[x:]for v in i[:x+1])*i[x:]:x+=1\n for v in i[:x]:print v[:x]",
        "def f(s):s=s.split(\"\\n\");return[\"\\n\".join([l[:j+1]for l in s[:j+1]])for j,v in enumerate(s[0])if all(len(l)>j for l in s[:j+1])][-1]",
        "l=input().split('\\n')\ni=0\nwhile zip(*l[:i+1])[i:]:i+=1\nfor x in l[:i]:print x[:i]"
    ],
    "is-this-a-truncated-triangular-number": [
        "f=lambda n,b=1:b>n+1or(8*n-2+3*b*b)**.5%1>0<f(n,b+1)",
        "lambda n:1in set([((8*(n+(i*(i+1)/2)*3)+1)**0.5)%4==1for i in range(n)])or n in[0,1]"
    ],
    "code-golf-golf-score": [
        "p,s=input()\nb=\"Bogey\"\nl={s==1:\"Hole in one\",5<p==s+4:\"Condor\",4<p==s+3:\"Albatross\",3<p==s+2:\"Eagle\",s==p-1:\"Birdie\",s==p:\"Par\",s==p+1:b,s==p+2:\"Double \"+b,s==p+3:\"Triple \"+b,s>p+3:\"Haha you loser\"}\nfor r in l:\n if r:print l[r]",
        "s=int(input())\np=int(input())\na=\"Bogey\"\nif s==1:b=\"Hole in one\"\nelif p-4==s:b=\"Condor\"\nelif p-3==s:b=\"Albatross\"\nelif p-2==s:b=\"Eagle\"\nelif p-1==s:b=\"Birdie\"\nelif p==s:b=\"Par\"\nelif p+1==s:b=a\nelif p+2==s:b=\"Double \"+a\nelif p+3==s:b=\"Triple \"+a\nelse:b=\"Haha you loser\"\nprint b",
        "i=input();j=input()\nif j==1:print\"Hole in one\"\nif(j==i-4)&(i>5):print\"Condor\"\nif(j==i-3)&(i>4):print\"Albatross\"\nif(j==i-2)&(i>3):print\"Eagle\"\nif j==i-1:print\"Birdie\"\nif j==i:print\"Par\"\nif j>i:\n k=j-i\n if k<4:\n  print[\"\",\"Double \",\"Triple \"][k-1]+\"Bogey\"\n else:\n  print\"Haha you loser\"",
        "def c(s,p):a=\"Bogey\";print[\"Condor\",\"Albatross\",\"Eagle\",\"Birdie\",\"Par\",a,\"Double \"+a,\"Triple \"+a,\"Haha you loser\",\"Hole in one\"][([[s-p+4,8][s-p>3],9][s==1])]"
    ],
    "fix-my-fat-fingers": [
        "s=\"1234567890-=qwertyuiop[]\\\\asdfghjkl;'\\nzxcvbnm<>?\"\ndict(zip(s,'`'+s)).get",
        "lambda x,k=\"`1234567890-=qwertyuiop[]\\\\asdfghjkl;'\\nzxcvbnm<>?\":k[k.\u200c\u200bfind(x)-1]"
    ],
    "cover-a-region-with-rectangles": [
        "def g(r):\n for p in r:\n  for q in r:\n   for h in 0,1:\n    if p[h::2]==q[h::2]and p[1-h]+p[~h]==q[1-h]:p[~h]+=q[~h];r.remove(q);return g(r)\n return r\nf=lambda P:g([x+[1,1]for x in P])",
        "a=sorted(input())\nb=[]\nr=range\nfor i in a:\n c=set(a)-set(b);w=h=1;x,y=i\n if i in b:continue\n while not{(x,y+h)}-c:h+=1\n while all((x+w,y+j)in c for j in r(h)):w+=1\n for j in r(w):\n  for k in r(h):b+=(j+x,k+y),\n print x,y,w,h",
        "{(0,0),(1,0),(0,1),(1,1),(2,1),(1,2),(2,2)}"
    ],
    "the-binary-square-diagonal-sequence": [
        "lambda i:int(''.join(bin(x+1)[2:]for x in range(i**3))[sum(x*x for x in range(i))::i+1][:i],2)",
        "i=n=1;s=''\nwhile 1:\n s+=bin(i)[2:];i+=1\n if s[n*n:]:print int(s[:n*n:n+1],2);s=s[n*n:];n+=1",
        "lambda n:int(''.join(bin(x+1)[2:]for x in range(n**3))[n*~-n*(2*n-1)/6:][:n*n:n+1],2)"
    ],
    "correct-errors-using-hamming7-4": [
        "f=lambda x,n=0,e=3:e&~-e and f(x,n+1,(n&8)*14^(n&4)*19^(n&2)*21^n%2*105^x)or~-n",
        "f=lambda i,b=3:i&7|i/2&8if chr(i)in'\\0%*3<CLUZfip'else f(i^b/2,b*2)"
    ],
    "how-to-print-the-below-format-in-the-fewest-bytes": [
        "def f(n):w=zip(*[iter(range(1,n*n+1))]*n);print(w+w[::-1])[::2]",
        "def f(n):a=range(n);print[[i*n-~j for j in a]for i in a[::2]+a[~(n%2)::-2]]"
    ],
    "unicode-fractions": [
        "lambda n:'\u215b\u2151\u215c\u00be\u2157\u2154\u215a\u2156\u215d\u2158\u215e\u2152\u00bd\u2153\u00bc\u2155\u2159\u2150'[int(n[::2])%50%36%31%18]",
        "lambda m,n:'\u00bd \u2153\u2154 \u00bc_\u00be \u2155\u2156\u2157\u2158 \u2159___\u215a \u2150 \u215b_\u215c_\u215d_\u215e \u2151 \u2152'.split()[n-2][m-1]"
    ],
    "hexplosive-ascii-art-challenge": [
        "n=input();m=n-1\nwhile n+m:n-=1;j=abs(n);c='34'[0<j<m];print' '*j+c+' '+'46  '[j<m::2]*(2*m+~j)+c",
        "def h(n):m=n-1;t=[' '*(m-r)+' '.join(('46'[r>0]*(r+m-1)).join('34'[r%m>0]*2))for r in range(n)];print'\\n'.join(t+t[-2::-1])"
    ],
    "symbolic-differentiation-of-polynomials": [
        "s=input().split(' + ')\ny='x'in s[0]\nL=map(lambda x:map(int,x.split('x^')),s[2-y:])\nprint(' + '.join([s[1-y][:-1]]+['x^'.join(map(str,[a*b,b-1])).rstrip('^1')for a,b in L]))",
        "print' + '.join(['%d%s%s'%(b[0]*b[1],'x'*(b[1]>1),'^%d'%(b[1]-1)*(b[1]>2))for b in[map(int,a.split('x^')if 'x^'in a else[a[:-1],1])for a in input().split(' + ')if 'x'in a]])",
        "S=str.split\ndef d(t):e=\"^\"in t and int(S(t,\"^\")[1])-1;return`int(S(t,\"x\")[0])*(e+1)`+\"x\"[:e]+\"^%d\"%e*(e>1)\nprint\" + \".join(d(t)for t in S(raw_input(),\" + \")if\"x\"in t)"
    ],
    "penney-conway-odds": [
        "lambda p,S,i=0:sum(p**(i:=i+1)*(S[:i]==S[-i:])for _ in S)",
        "f=lambda p,l,i=0:l==l[:i]or(l[:i]==l[-i:])+p*f(p,l,i+1)"
    ],
    "power-ending-patterns": [
        "lambda n:[*{n**i%10:0for i in[1,2,3,4]}]",
        "lambda n:list(dict.fromkeys(n**i%10for i in(1,2,3,4)))"
    ],
    "recursive-collatz-conjecture": [
        "f=lambda n,k=0,j=0:n-1and-~f(k*[n/2,n*3+1][n%2]or f(j/99or n,1),k,j+1)",
        "c and t or f"
    ],
    "every-possible-cycle-length": [
        "n=input();print([n[1:]+n[0],n]['0'in n])",
        "n=input()\na=b=1\nwhile a+b<=n:a+=b;b+=1\nprint(n+~a)%b+a",
        "f=lambda n,k=1:n>k and k+f(n-k,k+1)or n%k+1"
    ],
    "ten-pin-bowling-score-world-bowling-edition": [
        "lambda s:sum(map(f'123456789/{6**24}X'.find,s),len(s))",
        "lambda I,p='-123456789/'+20*'X':sum(p.rfind(i)for i in I if i in p)",
        "lambda l:sum(map(('123456789/'+'X'*20).rfind,l))+len(l)"
    ],
    "calculate-the-partitions-of-n": [
        "def f(n,i=1,l=[]):n or print(l);i>n or[f(n-i,i,[i]+l),f(n,i+1,l)]",
        "f=lambda n:{(*sorted([*p,i]),)for i in range(1,n)for p in f(n-i)}|{(n,)}"
    ],
    "the-baum-sweet-sequence": [
        "g=lambda n:n*[0]and g(n-1)+[n]['0'in`bin(n)[1:].split('00')`:]",
        "f=lambda n,k=1:n/k*[1]and[k]+f(n,k-~k)+f(n,4*k)",
        "def o(n):\n r=0\n for i in bin(n)[2:]:\n  if i=='1':\n   if r&1:return 0\n   r=0\n  else:r+=1\n return ~r&1\nlambda n:[i for i in range(1,n+1)if o(i)]",
        "lambda n:[x for x in range(1,n+1)if 1-any(i%2for i in map(len,bin(x).split('1')))]"
    ],
    "all-possible-ways-to-interleave-two-strings": [
        "f=lambda a,b,c='':[c+x for x in[a+b][a>''<b:]or f(a[1:],b,a[0])+f(a,b[1:],b[0])]",
        "f=lambda*p:[x[0]+t for x,y in p,p[::-1]for t in x and f(x[1:],y)]or['']"
    ],
    "interval-notations": [
        "t=a,b=input()\nfor j in 1,0:\n for i in 1,0:print\"%%s%d,%d%%s = \"%t*2%('[('[i],'])'[j],'[]'[i],']['[j])+\"{%d<%sx%%s<%s%d}%s = \"%(a,'='[i:],'='[j:],b,' '*(i+j))*2%('','&&x')+`a+i`+'..'+`b-j`",
        "a,b=input()\nfor i in 4,3,2,1:x,y=i%2,i>2;e='=';p=`a`+','+`b`;print'(['[x]+p+'])'[y],e,']['[x]+p+']['[y],e,2*('{%d<%s<%s%d} %s= '%(a,e*x+'%sx',e[y:],b,i/2*' '))%('','x&&')+`a+1-x`+'..'+`b-y`",
        "def f(a,b):\n l=[['(',')','[','<',1],['[',']',']','<=',0]]\n r=[0,1]\n for i in r:\n  for j in r:\n   print(('%s%d,%d%s='*2+'{%d%sx%s%d}={%d%sx&&x%s%d}=%d..%d')%((l[j][0],a,b,l[i][1],l[1-j][2],a,b,l[i][2])+(a,l[j][3],l[i][3],b)*2+(a+l[j][4],b-l[i][4])))",
        "lambda a,b:[eval('f\"'+\"{%r[j]}{a},{b}{%r[i]} = \"*2%('([',')]','][','[]')+\"{{{a}<{'='[:j]}x%s<{'='[:i]}{b}}}{'  '[i+j:]} = \"*2%('','&&x')+'{a+j}..{b-i}\"')for i in(1,0)for j in(1,0)]",
        "a,b=input()\nfor d in 0,1:\n for m in 0,1:k=`a`+','+`b`;o='{'+`a`+'<'+m*'=';c='x<'+d*'='+`b`+'}'+'  '[m+d:];print' = '.join(['(['[m]+k+')]'[d],']['[m]+k+'[]'[d],o+c,o+'x&&'+c,`a+1-m`+'..'+`b-1+d`])"
    ],
    "thar-she-blows": [
        "A,R,r=int,input()/360.*32,' by #South#north#West#East#south#North#west#east#-#/#Between#and'.split('#')\na=''.join(r[A(c,16)]for c in'6A608A6928A6802A68A6808A4928A402A4A405A4958A1808A18A1805A1958A108A1A107A1957A1705A17A1707A3957A305A3A302A3927A6707A67A6702A6927A607').split('/')\nif R%1==.5:print r[11],a[A(R)],r[12],\nprint a[A(round(R))]",
        "n='north'\ne='east'\ns='south'\nw='west'\nb=' by '\ndef f(H):x,y,z=(n,e,s,w,e,s,w,n,n+e,s+e,s+w,n+w)[int(H%360/90)::4];return(x,x+b+y,x+'-'+z,z+b+x,z,z+b+y,y+'-'+z,y+b+x)[int(H%90*4/45)].capitalize()\nh=input()+5.625\nprint h%11.25and f(h)or'Between '+f(h-1)+' and '+f(h)"
    ],
    "an-expanding-array": [
        "f=lambda A,B=0,d=2:A*(A==B)or f(sum([[(l+r)/d,r][(l+r)%d>0:]for l,r in zip(A,A[1:])],A[:1]),A,d+1)",
        "A=input()\nm=d=1\nwhile m:\n m=o=0;d+=1\n while A[o+1:]:\n\to+=1;s=A[o-1]+A[o]\n\tif s%d<1:A[o:o]=s/d,;m=1;o+=1\nprint A",
        "y=input()\nx=d=1\nwhile x!=y:\n d+=1;x=y;y=x[:1]\n for a,b in zip(x,x[1:]):c=a+b;y+=[c/d,b][c%d>0:]\nprint x"
    ],
    "almost-a-columbo-episode": [
        "C='6PX2OHRR3M431R8RODFNHWX44MRFXJFPZ3FH5D9920XJ6DQRBGY02VNRZETRUTVB0TH9V3T0C0VKA5NLPVQ6T9IUVNSSHXMDQORLA842O8MJQEM46Y6BKW9IQWXOL02MTRLM5L1APZFUXO1EY880ECSXKW0GO1YJPTW7P56X0B6ZSMJBUDS2FZIQ4XPAS5PHQL6HEICDMJQKQZXGISSQ4F0KBLG0ODLEJXYUVNUP5IS27GIMC5FBZFAK6PU5WOEFBOJZHXBGBJYMB8Z0GQH5VFJW6JQ0BVJAQAW7KJ56R0DF35U5IGBO2U22VQPWMBIP8IAH0Y1TU9VGRWDHR59G4HELD8491GJECIQNH9ERA2IRMOBM2DMYSN87Z1NBLEBMEYI4AV40ZPP2MC4DPQRMOT16IUAACE'\nH=[int(C[i::69],36)for i in range(69)]\nP=\"acbedgfihkjmlonqpsrutwvyxz\";P+=P.upper()+\" '-,.:\"\nf=lambda s:[t for h,t in[(hash('B'+s.replace('*','%s')%(i,j))%(36**6),i+j)for i in P for j in P]if h in H][0]",
        "00000000: 2363 6f64 696e 673a 3433 370a 696d 706f  #coding:437.impo\n00000010: 7274 2072 652c 7a6c 6962 0a6c 616d 6264  rt re,zlib.lambd\n00000020: 6120 733a 7265 2e66 696e 6461 6c6c 2873  a s:re.findall(s\n00000030: 2e72 6570 6c61 6365 282a 222a 2e22 292c  .replace(*\"*.\"),\n00000040: 7a6c 6962 2e64 6563 6f6d 7072 6573 7328  zlib.decompress(\n00000050: 2222 2278 da65 54cb 96da 3810 fd95 da65  \"\"\"x.eT...8....e\n00000060: 93e9 0fc8 ce40 80ce 810e c13d a74f 9605  .....@.....=.O..\n00000070: 2eb0 4ecb 2a46 8f10 cfd7 e796 0c9d d702  ..N.*F..........\n00000080: b08d 54f7 2937 a997 4459 a9a9 179f 7d47  ..T.)7..DY....}G\n00000090: 4b4e bdd3 201d 6d4b ec24 d2ce f378 e0e3  KN.. .mK.$...x..\n000000a0: 2b3d f742 730d e9e2 2267 8de9 bee0 df60  +=.Bs...\"g.....`\n000000b0: df2b cf29 d15e 5226 1768 277c 94f7 b48d  .+.).^R&.h'|....\n000000c0: e901 7b7c 190e 4a6b bd1a d4c2 b127 be6f  ..{|..Jk.....'.o\n000000d0: 5ef0 f98c 1f3d 51c6 f8ad 0b60 a0f1 ac39  ^....=Q....`...9\n000000e0: 4ba0 0d77 23cd 7c91 4b74 21d3 49e3 7d9b  K..w#.|.Kt!.I.}.\n000000f0: 71d9 2ab0 e6b1 1c6d e08a 073c e157 7c09  q.*....m...<.W|.\n00000100: a6ef 249e e498 df96 472d 070f 4d2f 9c05  ..$.....G-..M/..\n00000110: cc1b 9a73 1243 7d1c 8612 5c5c 1ee9 b193  ...s.C}...\\\\....\n00000120: 90ed 621e 5d72 893e e6d2 8949 9979 13bf  ..b.]r.>...I.y..\n00000130: e4e9 0e02 7ea1 301b e51f 7ca8 7d1d 69ed  ....~.0...|.}.i.\n00000140: ce3d 3d7e b9ff 5d01 7651 d231 ba4b 86a3  .==~..].vQ.1.K..\n00000150: 1f7e f3eb a8df eaa5 701a 69e3 2c05 b337  .~......p.i.,..7\n00000160: ea35 5013 e8e3 772c 71a9 422e 39b3 3766  .5P...w,q.B.9.7f\n00000170: 0db5 6078 eced 2158 42f0 a2ca c2ea 8ba6  ..`x..!XB.......\n00000180: 12e5 cdea 8d7b bd4d 7c02 abec dd09 6b85  .....{.M|.....k.\n00000190: 730f 9679 fae3 1354 5d34 4302 32b8 8677  s..y...T]4C.2..w\n000001a0: 50cc d11b 176c f8e9 ef82 03f2 d182 b4d9  P....l..........\n000001b0: a077 5c30 74a9 2744 018f ed6a 9abb 91d0  .w\\0t.'D...j....\n000001c0: 2518 bf66 2488 47b0 5aea a406 e6a3 0be6  %..f$.G.Z.......\n000001d0: f54d 7f0d f9b3 c9df f2d8 cb40 ad7c 27db  .M.........@.|'.\n000001e0: 561b c031 3ab1 1119 f9b9 6f82 0140 ce53  V..1:.....o..@.S\n000001f0: 47d6 1ad4 ac2d bf19 3a67 a424 80fe 9f63  G....-..:g.$...c\n00000200: 6754 11d2 572d 91d6 c21e dc56 7122 7594  gT..W-.....Vq\"u.\n00000210: 1a44 7ab3 e90d 749a 035c 30a6 bd22 ed36  .Dz...t..\\0..\".6\n00000220: 73a4 27a5 6733 b976 f6a7 b72b 9d8e 0cee  s.'.g3.v...+....\n00000230: bd9c 851e 33bc 6bbc afed c0b0 dac4 0de2  ....3.k.........\n00000240: 8599 b392 e14c ee51 d01b c68b 03a1 6745  .....L.Q......gE\n00000250: 8b38 8c80 c818 f684 8301 bef0 0122 dcf0  .8...........\"..\n00000260: f0f0 40cd 197e f29f 8d5f 4591 d043 21e2  ..@..~..._E..C!.\n00000270: 2be1 8ce4 dbe2 325b 056c e532 f2e0 c219  +.....2[.l.2....\n00000280: eca3 a506 4fba 9378 af57 2bfc ccc5 ee4e  ....O..x.W+....N\n00000290: d142 3294 0d23 e196 7dc9 5565 6da0 0e83  .B2..#..}.Uem...\n000002a0: 76fa 4b97 d034 707c 517f 4292 63f5 6c5e  v.K..4p|Q.B.c.l^\n000002b0: ab80 8356 0f28 86be b0cb 86dc d4e8 211c  ...V.(........!.\n000002c0: 06e6 2973 0bfb 56d3 b637 6f6f 7ab0 6b8b  ..)s..V..7ooz.k.\n000002d0: 5a1f ca5f c656 138b 0371 cc14 f310 e99f  Z.._.V...q......\n000002e0: 7c05 6a7b 9cc3 6483 e1c5 789f 7518 eba6  |.j{..d...x.u...\n000002f0: 99ea 7dfc 073b 2c02 ca3b 8d70 c365 da73  ..}..;,..;.p.e.s\n00000300: 483a 549f 782a 2812 304a 31d3 d21c 6daf  H:T.x*(.0J1...m.\n00000310: 76af 50b1 97ff 8a93 fbda 257b 3fb9 6a9d  v.P.......%{?.j.\n00000320: 9033 d756 eef1 82b3 3259 f93a d799 5a5b  .3.V....2Y.:..Z[\n00000330: 3e1d cb06 d1da bbd4 c08d 3563 b3c6 e1c6  >.........5c....\n00000340: ed3d b583 e245 654e 9a9e 299f 256c 0e35  .=...EeN..).%l.5\n00000350: a185 48f7 0304 28f2 1d22 2222 2929       ..H...(..\"\"\"))"
    ],
    "turn-a-string-inside-out": [
        "k=y=input().translate(' '*40+')(')\nwhile k:\n k=y=y[1:]+y[0]\n for _ in y:k=k.replace('()','')\nprint(y)",
        "r=[0];S=''\nfor c in input():b=c>'(';r+=[r[-1]+2*b-1];S+=')('[b]\nn=r.index(min(r))\nprint S[n:]+S[:n]"
    ],
    "unzip-some-numbers": [
        "lambda p:'\\n'.join(' '*min(p,l)+'-'+(2-(l==9))*(p-l)*str(l+1)+'-'for l in range(10))",
        "n=input()\nfor x in range(10):print' '*min(x,n)+'-'+`x+1`*(n-x)*(2-(x>8))+'-'",
        "lambda n:'\\n'.join(' '*min(i,n)+'-%s-'%(str(i+1)*(n>i>8or(n-i)*2))for i in range(10))",
        "n=input()/10\nfor i in range(10):print(' '*min(i,n)+'-'+2*(n-i)/-~(i>8)*`i+1`+'-')",
        "G=input();i=1;exec\"print' '*[~-i,G][i>G]+'-%s-'%[`i`*(2*-~G-i*2),'10'][(i>9)*G>9];i+=1;\"*10",
        "def r(n):\n  n/=10\n  for i in range(1,11):\n    if n<0:print\"%s--\"%p\n    elif i>9:print\" %s-10-\"%p\n    else:p=\" \"*~-i;print\"%s-%s-\"%(p,`i`*2*n);n-=1",
        "n=input()\nx=0\nexec\"print' '*x+'-'+`x+1`*(n-x<<1-x/9)+'-';x=min(x+1,n);\"*10"
    ],
    "get-the-closest-value-to-number": [
        "lambda n,a:min((abs(n-i),i)for i in a)[1]",
        "a=input()\nprint sorted(input(),key=lambda x:abs(a-x))[0]"
    ],
    "collapse-adjacent-duplicates": [
        "f=lambda a:a and(a[:1]+f(a[1:]))[2*(a[:1]==f(a[1:])[:1]):]",
        "r=[]\nfor x in input():r+=x,;r[-2:]*=r[-2:-1]!=[x]\nprint r"
    ],
    "reverse-range-successors": [
        "def f(n):\n k=0;a=[n]*n\n while k<n-1:print(a);k+=a[k]==k+1;a[k]-=1",
        "n=int(input())\nx=[n]*n;print(x)\nfor i in range(n):\n    for j in[0]*(n-i-1):x[i]-=1;print(x)",
        "i=input();l=[i]*i;print l\nfor x in range(i):\n while l[x]>x+1:l[x]-=1;print l",
        "i=I=input()\nl=[I]*I\nexec\"exec'print l;l[-i]-=1;'*max(~-i,2);i-=1;\"*~-I",
        "def f(n):\n p=print;m=[n for_ in range(n)];p(m)\n for i in range(n):\n    while m[i]>1+i:m[i]-=1;p(m)"
    ],
    "calculating-collatz-cousins": [
        "s={1}\nfor k in range(input()):\n p,s=s,set()\n for t in p:s.add(2*t);t>4and(t-1)%6==3and s.add((t-1)/3)\nprint sorted(s)",
        "f=lambda n,k=1:sorted([k][n:]or(k>4==k%6and f(n-1,k/3)or[])+f(n-1,k*2))"
    ],
    "how-many-blackjack-sequences-in-that-list": [
        "def b(s,a=[],r=range):\n S=map(lambda x:\":\">x>\"1\"and int(x)or 10-(x==\"A\")*9,s)\n for i in r(12):\n  for j in r(13):\n   if 21in[x*10+sum(S[i:j])for x in r(S[i:j].count(1)+1)]and s[i:j]not in a:a+=s[i:j],\n return len(a)",
        "lambda x:len({x[i:j]for i in range(12)for j in range(13)if sum(min(26,ord(c)-48)%16for c in x[i:j])in([11,21][~('A'in x[i:j]):])})"
    ],
    "arnolds-cat-map": [
        "def f(a):exec'a=[l[-i:]+l[:-i]for i,l in enumerate(zip(*a))];'*2;return a",
        "lambda M:eval(\"[r[-i:]+r[:-i]for i,r in enumerate(zip(*\"*2+\"M))]))]\")"
    ],
    "monday-mini-golf-4-jarvis-just-another-rather-vast-set-of-integer-sequences": [
        "def g(n):y=reduce(lambda i,x:i*int(x)or i+1,`n`,1);return[n]+(g(y)if n>9else[])",
        "def j(n,m=1):\n print(n)\n if n>9:\n  for d in str(n):m=m*int(d)or m+1\n  j(m)"
    ],
    "the-rod-cutting-problem": [
        "lambda p,n:max(map(sum,d(p,n)))\nd=lambda p,n:[[p[n-1]]]+[m+[p[i]]for i in range(n-1)for m in d(p,n+~i)]",
        "f=lambda l,n:n and max(x+f(l,n:=n-1)for x in l[:n])"
    ],
    "build-this-pyramid": [
        "x,y=input()\nn=-70*x-y\ni=1\nwhile n<0:i+=1;n+=i*i\nprint~-i,n/i,n%i",
        "lambda x,y:[(a-1,b//a,b%a)for a in range(25)for b in range(a*a)][70*x+y]"
    ],
    "sums-of-digits-1-through-7": [
        "n=input()\nfor i in range(8**7):\n for j in len(set('%o0'%i))/8*range(128):\n    s=''\n    for c in'%o'%i:s+='+'[:j%2*len(s)]+c;j/=2\n    if eval(s)==n:print map(int,s.split('+'));1/0",
        "def f(n,s=set('1234567'),l='0,'):[f(n,s-{x},l+x+c)for c in(',','')for x in s]or n-sum(eval(l))or~print(l[2:])"
    ],
    "koch-snowflake-codegolf": [
        "for s in \"eJyVkNENACEIQ/+dgg1YiIT9tzgENRyWXM4/pH1tIMJPlUezIiGwMoNgE5SzQvzRBq52Ebce6cr0aefbt7NjHeNEzC9OAalADh0V3gK35QWPeiXIFHKH8seFfh1zlQB6bjxXIeB9ACWRVwo=\".decode('base64').decode('zlib').split('\\n'):print s+'  '*(27-len(s))+'\\\\'.join([c.replace('\\\\','/')for c in s[::-1].split('/')])",
        "n='\\n'\nS='_a/G\\F I\\n'\nA=dict(zip(S,('III','   ','__/','  G','\\  ','F__','   ','III','')))\nB=dict(zip(S,('III','   ','\\  ',' aF','/a ','  G','   ','III','')))\nC=dict(zip(S,('___','aaa','/  ','GII','II\\\\','  F','   ','III','')))\ndef T(s):\n a=b=c=d=r=u''\n for k in s:\n    a+=A[k];b+=B[k];c+=C[k]\n    if k=='I':a=a[:-3]+('II\\\\'if'a '==d[1:3]else'GII'if' a'==d[:2]else 3*k)\n    d=d[3:]\n    if k==n:d=c.replace('____','__/F').replace('aaaa','aa  ').replace('/  a','/a  ').replace('a  F','  aF');r+=a+n+b+n+d+n;a=b=c=''\n return r\nprint T(T(T('__\\n\\G\\n'))).translate({97:95,71:47,73:32,70:92})",
        "#coding:u8\nprint u\"\u789c\ued54\u410e\uc020\u08bb\ufb0a\u7fc0\u8748\uf8ff\u2f16\u35ce\u82b0\u60bc\ucec3\ue2b0\ub694\u34d6\uea2f\u1162\u9112\u9c56\u6e1f\u728e\uc73d\uea98\u9083\u6dc1\u6322\u31cc\uec76\ua3b8\u26cf\u507e\uf70a\u0ff5\ud5dd\uf013\u7587\u98b2\u3b24\u7b81\u9d29\u6cac\u9945\uc54e\u21b3\\ufaa4\u8ef5\ubab3\ud34b\u97ce\ue4c0\u5dc3\u0e67\u74e0\uae61\u672a\ub2b3\u84a4\ua574\u2075\u19b8\u495d\u4e21\u48da\u87c6\u9f3a\u4f0d\u5327\u4102\uc562\u54ea\u2848\u2059\u0ca4\u4e78\ued95\u1223\u66a5\u0e26\ua2df\u37a8\u07af\u2ffe\u5ebe\ubedb\u0c1c\u2ecf\u71c0\ue633\u4c9e\uf200\u9dd7\ufaff\".encode(\"utf-16be\").decode(\"zlib\")"
    ],
    "fizz-buzz-with-unique-characters-in-columns": [
        "i=0;exec\"print ord('<<<<>@<<BD=F?@HABJCNP=@RT?VABXCBZ<^`=>bdDf>?hBCjEn'[i])%60*' '+(i%3/2*'Fizz'+i%5/4*'Buzz'or`-~i`);i+=1;\"*50",
        "a=eval(`[{0}]*99`);i=0\nexec\"f=i%3/2*'Fizz'+i%5/4*'Buzz'or`i+1`;i+=1;g=0\\nwhile any(b>{c}for b,c in zip(a[g:],f)):g+=1\\nmap(set.add,a[g:],f);print' '*g+f;\"*50"
    ],
    "ascii-maya-numbers": [
        "def f(n):d,m=divmod(n%20,5);h=[\" \"*(2-m/2)+\".\"*m+\"\\n----\"*d,\"<  >\"][n%20<1];n/=20;return(f(n)+\"\\n\\n\"if n else\"\")+h",
        "def m(n):\n h=[[\"\",\" \"*(2-n%5/2)+\".\"*(n%5)+\"\\n\"][n%5!=0]+\"----\\n\"*(n%20/5),\"<  >\\n\"][n%20==0]\n n/=20\n if n>0:\n  h=m(n)+\"\\n\\n\"+h\n return h[:-1]"
    ],
    "move-to-the-printable-ascii-front": [
        "*d,=range(127)\nfor c in input():y=d.index(ord(c));d[:32]+=d.pop(y),;print(chr(y),end='')",
        "e=d=map(chr,range(32,127))\nr=\"\"\nfor c in raw_input():n=e.index(c);r+=d[n];e=[e[n]]+e[:n]+e[n+1:]\nprint r"
    ],
    "happy-fibonacci-day": [
        "a=b='i'\nl=a,\nexec\"l+='_',b,;a,b=b,b+a;\"*~-input()\nfor r in map(None,*l+l[::-1])[::-1]:print''.join(x or' 'for x in r)",
        "def f(r):\n a=b=1\n while r:yield a;a,b=b,a+b;r-=1\nn=list(f(input()))\nn.remove(1)\nh=max(n)-1\nr=1\nwhile h:\n l='  '*(len(n)+1)+('i '*r)[:-1];print(l+l[::-1]);h-=1\n if h in n:r+=1;n.pop()\nl='i_'*r+'i_i'\nprint l+l[::-1]"
    ],
    "warped-chessboard": [
        "def f(x):\n b=['1'];n=1\n for i in range(x):P=max(j*(n%j<(j<=n**.5))for j in range(1,1+n));n+=P;b=[l+P*`j/P%2^i%2`for j,l in enumerate(b)];s=len(b[0]);b+=[((v*P+`1^int(v)`*P)*s)[:s]for v in b[0][len(b):]]\n return b",
        "def h(j,a=['1'],R=range):\n for i in R(j):L=len(a);k=max(x for x in R(1,L+1)if(x*x<=L)>L%x);a=[a[m]+k*`(i+m/k)%2`for m in R(L)]+[((`i%2`*k+`~i%2`*k)*L)[:L+k]]*k\n return a"
    ],
    "time-travelling-stock-trader": [
        "f=lambda x:reduce(float.__mul__,(a/b for a,b in zip(x[1:],x[:-1]) if a>b),1.)",
        "f=lambda t:2>len(t)or max(t[1]/t[0],1)*f(t[1:])"
    ],
    "0-1-maximal-phase-counter": [
        "a=input()\nl=len(a)\nn=p=0\nfor i in range(l):\n for j in range(l-1,i+3,-1):\n  if(j>p)>(.15<sum(a[i:j+1])/(j+1.-i)+a[i]+a[j]<2.85):n+=1;p=j;break\nprint n",
        "[0,1,0,1,0]"
    ],
    "half-exponential-function": [
        "d={};a=n=1\nwhile 1:print a;a=d.get(n,a+1);d[1%n*a]=2**n;n+=1",
        "def f(x):\n a=range(1,2**x)\n for i in range(1,x):a[i]=max(a[i],a[i-1]+1);a[a[i]]=max(a[a[i]],2**i)\n return a[:x]"
    ],
    "rotate-a-camera-save-an-astronaut": [
        "def g(x):w,z=map('?0123456789abcdef'.index,x);d=w-z;return min(d,d+17*(d<=0 or -1),key=abs)*21\ndef f(s):s=''.join(map('{:2x}'.format,s.encode()));return[*map(g,zip(s+'?','?'+s))]",
        "h=reduce(lambda l,r:l+(r/16,r%16),map(ord,input()),())\nprint[(((r-l+8)%17)-8)*21for l,r in zip((-1,)+h,h+(-1,))]"
    ],
    "print-the-stack-exchange-favicon": [
        "x,y=\"_ \"\nb=y*19\nc='-'*21\ne=y*11\nf=f\"{c}\\n|{b}|\\n\"\nprint(fr''' {x*19}\n/{b}\\\n{f*2+c}\n\\{x*10+y*4+x*5}/\n{e}|  /\n{e}| /\n{e}|/''')",
        "p,u,q,v,r,s,F=' ','_','/','|','-'*21,'\\\\',lambda f,m:f+m*19+f;B=lambda n:p*11+v+p*n+q\nprint'\\n'.join([F(p,u),q+p*19+s,r,F(v,p),r,F(v,p),r,s+u*10+p*4+u*5+q,B(2),B(1),B(0)])",
        "t,u,v,w,x,y,z='\\n -/\\\\_|';k=w+t+11*u+z;i=t+21*v+t\nprint u+19*y+t+w+19*u+x+(i+z+19*u+z)*2+i+x+10*y+4*u+5*y+k+u,k,k+w",
        "a,b,d,e,f,g,h=' _-|/\\\\\\n';r=d*21+h+e+a*19+e+h;n=f+h+a*11+e;print a+b*19+h+f+a*19+g+h+r*2+r[:22]+g+b*10+a*4+b*5+n+a*2+n+a+n+f",
        "s=\" \"*19;e=\"-\"*21;a=\" \"*9;print\" %s\\n/%s\\\\\\n%s\\n|%s|\\n%s\\n|%s|\\n%s\\n\\%s    %s/\\n%s|  /\\n%s| /\\n%s|/\"%(\"_\"*19,s,e,s,e,s,e,\"_\"*8,\"_\"*7,a,a,a)",
        "print''.join(' \\n-/|\\\\_'[ord(x)/8-4]*int('1245abjl'[ord(x)%8],36)for x in' V(8&H(7(@&@(7(@&@(7(HT\"S8(%@!8(%@ 8(%@8')"
    ],
    "counting-in-binary-nybbles": [
        "i=11\nwhile i:i-=1;print(f\"{i:04b}\")",
        "for x in range(11):print bin(x)[2:].zfill(4)",
        "n=16;exec\"print bin(n)[3:];n+=1;\"*11"
    ],
    "count-the-changes-in-an-array": [
        "f=lambda x=0,*y:y>()and(x!=y[0])+f(*y)",
        "lambda a:sum(x!=y for x,y in zip(a,a[1:]))",
        "f=lambda y:sum(y[1:]-y[:-1]!=0)"
    ],
    "hello-world-fibonacci-distribution": [
        "print'092020090920200948656c6c6f20776f726c642121212009200909200920'.decode('hex').strip()",
        "print \"Hello world%s\"%(\"!\"*int(3.141592653589793238462643383279502884197169399375105820))"
    ],
    "print-this-multiplication-table": [
        "for k in[\" \".join([\"%ix%i=%i\"%(j,i,j*i)for j in range(1,i+1)])for i in range(1,10)]:print k",
        "range(10)",
        "r=range(1,10)\nfor b in r:print(*[f\"{a}x{b}={a*b:<2}\"for a in r[:b]])",
        "i=1;exec\"j=1;exec'print\\\"%sx%s=%-2s\\\"%(j,i,j*i),;j+=1;'*i;print;i+=1;\"*9",
        "r=range(1,10)\nfor i in r:print''.join('%sx%s=%-3s'%(j,i,i*j)for j in r[:i])",
        "for i in range(1,10):print''.join(('%s\u00d7%s=%s'%(j,i,i*j)).ljust(7)for j in range(1,i+1))"
    ],
    "draw-an-ascii-rectangle": [
        "p=\"|\"\ndef r(w,h):m=w-2;b=p+\"-\"*m+p;return b+\"\\n\"+(p+m*\" \"+p+\"\\n\")*(h-2)+b",
        "def d(x,y):return'\\n'.join(('|'+('-'*(x-2)if n<1or n==~-y else' '*(x-2))+'|')for n in range(y))",
        "w,h=input()\nfor c in'-%*c'%(h-1,45):print'|'+c*(w-2)+'|'",
        "def r(w,h): print '\\n'.join(['|'+('-' if i%(h-1)==0 else ' ')*(w-2)+'|' for i in range(h)])",
        "[a,b]=input().split()\ndef d(e):print(\"|\"+e*(int(a)-2)+\"|\")\nd(\"-\")\nfor f in range(2,int(b)):d(\" \")\nd(\"-\")",
        "def f(a,b):\n c='|'+'-'*(a-2)+'|\\n';print(c+c.replace(*'- ')*(b-2)+c)",
        "def f(a,b):c=\"|\"+\"-\"*(a-2)+\"|\\n\";print c+c.replace(\"-\",\" \")*(b-2)+c"
    ],
    "the-staircase-challenge": [
        "n=24;exec\"print' '*n+'_'*5+'|'*(n<24)+('\\\\n'+~-n*' '+'|')*4*(n>0);n-=6;\"*5",
        "n=21\nexec\"n-=1;print n/5*6*' '+' _'[n%5<1]*5+'|'*(n<20);\"*n"
    ],
    "am-i-an-automorphic-number": [
        "lambda n:n*~-n%10**len(`n`)<1",
        "endswith()",
        "lambda n:`n*1L`in`n**2L`",
        "str.endswith()"
    ],
    "raise-integer-x-to-power-x-without-exponentiation-built-ins": [
        "s,x=1,input();exec('s*=x;')*x;print s",
        "f=lambda g,z=1:z>g or g*f(g,z+1)",
        "def f(x,i=0):i=i or x;return x*f(x,i-1)if i>1else x",
        "lambda n:eval('1'+'*n'*n)"
    ],
    "run-length-decoding": [
        "s=input()\nt=''\nwhile s:a,b,*s=s;t+=a*int(b)\nprint(t)",
        "x=iter(raw_input())\nprint''.join(a*int(next(x))for a in x)",
        "f=lambda s:s and s[0]*int(s[1])+f(s[2:])",
        "print''.join([c*int(n)for c,n in zip(*[iter(raw_input())]*2)])"
    ],
    "the-next-colour": [
        "c='Red Orange Yellow Green Blue Indigo Violet'.split()\nf=lambda x:c[(c.index(x)+1)%7]",
        "z=\"Red Orange Yellow Green Blue Indigo Violet\".split()*2\ndict(zip(z,z[1:])).get",
        "def f(c):a=\"red orange yellow green blue indigo violet\".split();print a[-~a.index(c)%7]"
    ],
    "wheres-my-value": [
        "lambda l,v:filter(lambda i:l[i]==v,range(len(l)))",
        "lambda y,x:[i for i,j in enumerate(x)if j==y]"
    ],
    "semidivisibility": [
        "lambda n,k:n*10%k==0<n%k",
        "n*10%k = 0"
    ],
    "count-my-change": [
        "lambda s:s.sort(key=\"npr\".strip)",
        "lambda x:x.sort(key=lambda s:(s*2)[5])",
        "lambda a:a.sort(key=lambda x:x[-5:])"
    ],
    "when-does-santa-enter-the-basement-aoc-day-1": [
        "f=lambda s,i=1:i and-~f(s[1:],i-1+2*(s<')'))",
        "def f(x):\n c=q=0\n while-~c:c+=1-(x[q]>'(')*2;q+=1\n return q",
        "lambda m:[sum([2*(z<')')-1for z in m][:g])for g in range(len(m)+1)].index(-1)",
        "try:input()\nexcept Exception,e:print e[1][2]",
        "f=lambda s,p=0,v=0:p if v<0else f(s[1:],p+1,v+2*(s[0]<')')-1)"
    ],
    "first-occurrence-in-the-sixers-sequence": [
        "f=lambda n,s='612',i=18:n-int(s[:2])and-~f(n,s[2:]+`i`,i+6)",
        "lambda n:[*zip(*[iter(''.join(map(str,range(6,1951,6))))]*2)].index((*'%02d'%n,))"
    ],
    "add-up-the-letters-in-a-word": [
        "print(sum(ord(x)%32for x in input()if x.isalpha()or z))",
        "print sum(map(\" abcdefghijklmnopqrstuvwxyz\".index, raw_input().lower()))",
        "s=0\nfor i in raw_input().lower():\n s+=(\"abcdefghijklmnopqrstuvwxyz\".index(i)+1)\nprint(s)",
        "w=raw_input().lower()\ns=0\nfor l in w:s+=range(97,123).index(ord(l))+1\nprint s",
        "d=input().lower()\nprint(d in open(\"d\").read()and sum(['',ord(c)-96]['`'<c<'{']for c in d)or'f')",
        "print sum(['',ord(i)-64]['@'<i<'[']for i in raw_input().upper())"
    ],
    "pairs-with-sum-divisible-by-5": [
        "lambda n,m:sum((i//n+i%n)%5==3for i in range(n*m))",
        "f=lambda m,n:m and(m%5+n)/5+f(m-1,n)",
        "lambda m,n:(m*n+abs(m%5-~n%5))/5"
    ],
    "exploded-suffixes": [
        "f=lambda s,i=0:s[i:]and-~i*s[i]+f(s,i+1)or s and'\\n'+f(s[1:])",
        "def f(s):return'\\n'.join(''.join(s[j:][i]*(i+1)for i in range(len(s)-j))for j in range(len(s)))",
        "def f(s):f(s[1:print(''.join(i*c for i,c in enumerate(s[0]+s)))])"
    ],
    "count-ones-in-range": [
        "lambda x,y:`map(bin,range(x,y+1))`.count('1')",
        "lambda a,b:''.join(map(bin,range(a,b+1))).count('1')",
        "f=lambda x,y:y/x and bin(x).count('1')+f(x+1,y)"
    ],
    "prime-power-switch": [
        "n=input()\np=2\nwhile n%p:p+=1\nP=p**n-1\nprint(n**n/P%P)**p",
        "n=input()\np=2\nq=-1\nwhile n%p:p+=1\nwhile n:n/=p;q+=1\nprint q**p"
    ],
    "vandalizing-marquees": [
        "lambda a,b:''in[b:=b[b[:1]in' '+c:]for c in a]",
        "def p(s,v,a=1):\n for c in v:_,x,s=s.partition(c);a*=c==x;s=(s,\" \"+s)[x!=\" \"]\n return a"
    ],
    "how-many-states-do-i-border": [
        "if-else",
        "lambda s:[i for i,S in enumerate('AKHI ME FLSCWA CACTLANHNJNDERIVT ALWINCKSMDMSMTXOR MAZOHGANMIMNVWVA A KYCO MOTN'.split())if s in S]or 6",
        "lambda a:dict(WA=2,WI=4,WV=5,FL=2,NH=3,NJ=3,NM=5,NC=4,ND=3,RI=3,NV=5,CO=7,CA=3,GA=5,CT=3,OH=5,KS=4,SC=2,KY=7,OR=4,DE=3,HI=0,TX=4,LA=3,TN=8,VA=5,AK=0,AL=4,VT=3,IN=4,AZ=5,ME=1,MD=4,MA=5,MO=8,MN=5,MI=5,MT=4,MS=4).get(a,6)"
    ],
    "am-i-a-golfy-array": [
        "def g(a):sum(a)>len(a)*a.pop()or g(a)",
        "lambda A:all(k*j>=sum(A[:j])for j,k in enumerate(A))"
    ],
    "build-a-checkerboard": [
        "x=0;exec\"print`x/8+x/24*2`+','+`x%8+x/8%2`+'rb'[x/24];x+=2;\"*24",
        "for i in 0,1,2,5,6,7:j=i%2;exec\"print`i`+','+`j`+'rb'[i>4];j+=2;\"*4"
    ],
    "let-the-trigonometry-begin": [
        "x,n=map(float,input().split())\nk=2*n\nt=1\nwhile k>1:k-=1;t=1+t*1j*x/k\nprint('%.6f\\n'*2%(t.imag,t.real))",
        "x,n=map(eval,raw_input().split())\nf=lambda n:n<2and 1or n*f(n-1.)\nfor i in[1,0]:print\"%.6f\"%sum((1-j%2*2)*reduce(lambda o,p:o*p,[x]*(i+2*j),1)/f(i+2*j)for j in range(n))"
    ],
    "playing-with-the-musical-turtle": [
        "lambda s:'ORBGYO.BROYGBR'.find(s)/7",
        "lambda i,a='ROYGBRO':(i in a)-(i[::-1]in a)",
        "lambda i:'ROYGBRO ORBGYOR'.find(i)/7"
    ],
    "is-my-integer-significant": [
        "i=input()\nprint(sum(map(int,i))>2*sum(map(int,i[len(i)//2:])))",
        "lambda x:sum(x[i]-x[~i] for i in range(len(x)//2))>0",
        "n=[int(i) for i in list(input())];sum(n[:len(n)//2])*2>sum(n)",
        "lambda s:sum(s[:len(s)/2])*2>sum(s)"
    ],
    "highlight-the-bounding-box-part-i-cartesian-grid": [
        "def c(i):\n m=n=();e,z=enumerate,'for j,r in e(i):\\n for k,c in e(r):%s'\n exec z%'\\n  if\"#\"==c:m+=j,;n+=k,'\n exec z%'\\n  if min(m)<=j<=max(m)<[]>min(n)<=k<=max(n):i[j][k]=\"#\"'\n return i",
        "def b(a):j=len(a[0]);g=range;z=g(len(a));h=[i for i in z if'#'in a[i]];w=[i for i,c in[(i,[r[i]for r in a])for i in g(j)]if'#'in c];return[[any((r<h[0],h[-1]<r,c<w[0],w[-1]<c))and'.'or'#'for c in g(j)]for r in z]",
        "r=lambda w:list(zip(*w[::-1]))\nf=lambda w,n=4:list(map(''.join,n and(('#'in w[0])and r(r(r(f(r(w),n-1))))or[w[0]]+foo(w[1:],n))or['#'*len(w[0])]*len(w)))"
    ],
    "the-jumping-up-sequence": [
        "def f(x):\n n=a=0\n l=list(range(x*x))\n while n<x:print(l[a+n],*l[a+2-(n<3):a+n],end=' ');a=a+n-(a>0);n+=1",
        "def f(z):[s.extend([s[-1]+n]+[x for x in range(s[-1]+1,s[-1]+n)if not x in s]) for n in range(1,z)if len(s)<z];return s"
    ],
    "find-the-bcd-difference-of-a-number": [
        "b=\"\".join(format(int(n),\"04b\")for n in`input()`)\nb=[int(b[s:]+b[:s],2)for s in range(len(b))]\nprint max(b)-min(b)",
        "k=''.join(f'{int(i):04b}'for i in input())\nv=[int(k[i:]+k[:i],2)for i in range(len(k))]\nprint(max(v)-min(v))",
        "def f(a):a=''.join([format(int(i),'#010b')[-4:]for i in str(a)]);b=[int(''.join(a[-i:]+a[:-i]),2)for i in range(len(a))];return max(b)-min(b)"
    ],
    "remove-common-leading-spaces": [
        "s=input().split('\\n')\nfor k in s:print k[min(x.find(x.strip())for x in s):]",
        "def f(s):t=s.split(\"\\n\");return\"\\n\".join([c[min([len(c)-len(c.lstrip(\" \"))for c in t]):]for c in t])",
        "f=lambda s:'\\n'.join(l[min(l.find(l.strip()) for l in s.split('\\n')):] for l in s.split('\\n'))",
        "def f(s):return '\\n'.join([l.strip() for l in s.splitlines()]);"
    ],
    "reverse-odd-runs": [
        "o=t=[]\nfor i in input():o+=~i%2*(t+[i]);t=i%2*([i]+t)\nprint o+t",
        "o=l=[]\nfor c in input().split():\n if int(c)%2:l=[c]+l\n else:o+=l+[c];l=[]\nprint(\" \".join(o+l))",
        "def f(x):\n i=j=0\n for n in x+[0]:\n    if~n%2:x[i:j]=x[i:j][::-1];i=j+1\n    j+=1",
        "def r(l):\n def k(n):o=~n%2<<99;k.i+=o*2-1;return k.i-o\n k.i=0;l.sort(key=k)"
    ],
    "find-an-unrelated-number": [
        "lambda x,y:x+9<<y+9",
        "lambda a,b:(a+b+9)**(a+b+9)",
        "lambda x,y:int(`x`+`y`)+3",
        "'1'.join",
        "x,y=input()\nf=lambda x,y:[x+y,x*y,x**y,int(`x`+`y`)]\nprint max(f(x,y)+f(y,x))+1"
    ],
    "not-too-hard-to-code-this-right": [
        "l,t=S='|~'\nfor s in range(20):a=[l]*61;a[s]=a[60-s]=t;a[40-s]=a[20+s]=S[s>9];print`a`[2::5]",
        "for y in range(20):print(''.join('~'if 20-y==abs(10-abs(x))else'|'for x in range(-30,31)))"
    ],
    "partial-sums-of-the-kempner-series": [
        "def f(n,i=.0,s=0):\n while n:\n\ti+=1\n\twhile\"9\"in`i`:i+=1\n\ts+=1/i;n-=1\n return s",
        "f=lambda k,n=1,b=0:k<2or b/n+f(k-b,n+1,1.-('9'in`~n`))"
    ],
    "finding-your-partner": [
        "lambda x,y:dict(x+map(reversed,x))[y]",
        "lambda l,v:sum(l,())[sum(l,()).index(v)^1]"
    ],
    "draw-a-big-ascii-x": [
        "n=input()\nx=n*'*'+n*'  '\nexec\"print`map(max,x,x[::-1])`[2::5];x=' '+x[:-1];\"*(n-~n)",
        "x=a=0\nn=c=input()\nwhile x<2*n+1:\n    print ' '*a+'*'*n+' '*c+'*'*(2*n-2*a-c)\n    x+=1\n    a=n-abs(n-x)\n    c=max(0, n-2*a)"
    ],
    "kevincs-triangular-decidigits-sequence": [
        "lambda o:sum([sum([int(i)for i in s])for s in map(lambda x:str(1.0/o)[2:x],range(3,3+o))])",
        "lambda n:sum(10**-~k/n%10*(n-k)for k in range(n))"
    ],
    "how-much-reputation-does-a-steam-user-have": [
        "q=('\\n'+input()).count;print q('\\n+rep ')-q('\\n-rep ')",
        "lambda x:sum([\"- +\".index(i[0])-1for i in x.split('\\n')if i[1:4]==\"rep\"])"
    ],
    "how-many-cubes-can-be-built": [
        "lambda V:[*[(n*-~n/2)**2for n in range(V+1)],V].index(V)%-~V",
        "f=lambda V,n=1:V>0and f(V-n**3,n+1)or(not V)*n-1"
    ],
    "a-knights-graph-on-an-n-by-n-board": [
        "lambda n:[sum(2==abs((i/n-k/n)*(i%n-k%n))for k in range(n*n))for i in range(n*n)]",
        "lambda n:[sum((d*c>d)+(d*c>c)for d in(y%n,n-y%n-1)for c in(y/n,n-y/n-1))for y in range(n*n)]"
    ],
    "are-these-identifiers-equivalent": [
        "lambda x,y:r(x)==r(y)\nr=lambda x:x[0]+x[1:].lower().translate(None,\"-_\")",
        "lambda a,b:f(*a)==f(*b)\nf=lambda f,*r:[f+k.lower()for k in r if~-(k in'-_')]"
    ],
    "make-me-a-blanket": [
        "for a in(40,4496,6200,5456,3240,1188,720,228)*3:print((`a%6561/2178`+`a%2178/729`+`a%729/243`+`a%243/81`+`a%81/27`+`a%27/9`+`a%9/3`+`a%3/1`)*6).replace('0','\\\\').replace('1','/').replace('2',' ')",
        "print(\"\\n\".join(o*6for o in(\"bbbb////\",\" bb//// \",\"  ////  \",\" ////bb \",\"////bbbb\",\"b//  bbb\",\"bb    bb\",\"bbb  //b\")*3).replace(\"b\",\"\\\\\"))",
        "R=range(24)\nfor i in R:print''.join(\" \\// \\/\\\\\"[i+~j>>2&1^i+j>>1&2^i&4]for j in R*2)",
        "a,b,c=r\"\\\\\",\"/\"*4,\" \"\nf,g=c*2,c+a+b+c\nd=(a*2+b)*6,g*6,(f+b+f)*6,g[::-1]*6,(b+a*2)*6,('\\\\//'+f+a+\"\\\\\")*6,(a+f*2+a)*6,(a+\"\\\\\"+f+'//\\\\')*6\nfor e in 0,1,2:print'\\n'.join(d)"
    ],
    "find-the-result-of-some-assignment-statements": [
        "g={}\nfor s in input():\n k=s.pop()\n for n in s:g[n]=g.get(k,k)\nprint g",
        "def f(s):\n\tg={}\n\tfor k in s:\n\t\tif'='in k:\n\t\t\t*v,l=k.split('=')\n\t\t\tfor r in v:\n\t\t\t\ttry:g[r]=int(l)\n\t\t\t\texcept:g[r]=g[l]\n\treturn g",
        "def f(x):\n g={}\n for*u,k in x:g|={n:g.get(k,k)for n in u}\n return g"
    ],
    "string-to-ascii-art-text": [
        "x,y,z='123456789abcdefghi','ABCDEFGHIJKL','MNOPQRST'\nk=dict(zip(x[9:],'10 11 12 13 14 17 21 24 25'.split()))\nfor c in x[:9]:k[c]=c\nk.update(dict(zip(y,'2 3 4 5 6 8 9 10 11 16 17 18'.split())))\nk.update(dict(zip(z,'2 3 4 5 6 7 8 15'.split())))\nY='v'*11+'aP2-vv9R9-v9R9-vv6Pa-vvvh-6Pa-vp'+'9Z'*11+'9/040 -9Z9Z8/A040p9Z8/A040p9Z9Z5Z9Z9Z9Z8Qa-5|0409-9Z'+'x40'*7+'xO0x40x40xO0xO0-8/A0O0xO08t07-8/A0408t07-8/A040x40p4/A040xO0xO0xO0p7z9-5|:0O0x40p8'+'t07'*7+'-7Vp8U7-8U7-7Vp7V-7/C|3|p7/C|3|p6s6t07-6s6t07t07-4U7-7Vp7Vp7Vp7z9-5zp8U7-p'+'6s6-'*7+'6V9-9U6-9U6-6V9-6V -6/D|3|p6/D|3|p5/F0405-6s6-5/F0405-6s6-6s6-5U6-6V9-6V9-6r3_/N6&9U6-p'+'5rU5-'*7+'5Va-aU5-aU5-5Va-5V2-5/E|3|p5/E|3|8u~~U4-5rU5u~~U4-5rU5-5rU5-6U5-5Va-5Va-5r3/0405&aU5-8uMU4uMU4u2U4u2U4uMU4uMU4u2U4uO/b-bU4-bU4uO/b-4V3uz8uzp3r4U3uMU4-3r4U3uMU4uMU4-7U4-4VbuO/bu3/A0O04&bU4-pmm3r4U3-3r4U3-mm3r4U3-3/C040b-b/C0403-b/C0403-3/C040b-3V4-3r zp3r zp2V U2-m2V U2-m4X3U3t03-3Vckc-3r3V4&cU3-pnn2V U2-2V U2-nn2V U2-2s3P2-2O4s2-2P3s2-2/E0O0S2-2V5-2r2|A|N|Q2-2r2z P2- rO/3XO0 -n rO/3XO0 -n2NX3U2-6s2-2V6P2k5P2-2r3r3_/N2-7z9-5|A|N|Q2-dU2-p rX3UorX3X N0oV3UoV3X N0orX3UorX3UoV3X N0orU /040o/0302rUo/040 rUor0I040oV6- r3|F040or3z/040 -|B|4|5|B|4|- rX3XO0 -|B|4|5|B|4|- rX3XO0o/03X3U -5rUorO/6/040 k4/040orNr3/040oQ|A|N|N O -5/F040 -eU -pr2X3XO0-rMX30B|4|-rO/5XO0-rO/50B|4|-rMX3XO0-r2X3XO0-rO/2N0B|4|-r2X4/A0O0-/A030r2XO0-/A04r2XO0-r2|I0O0-rO/7-r4|G0O0-/A /4|A|3/A0O0-|B|O|5|B|4|-r2X30B|4|-|B|O|5|B|O|-r2X30B|4|-/A03X3XO0u2XO0-|B|4/6/A0O0k3/A0O0-|B|3r3/A0O0-|K|4|-4/H0O0-TXO0-p0A/4X2V-X3X)U6y-U5/B|O|-X3X3y-0A/4X3y-U /0)0A/4X2V-X2r4y-X2r4y-0A/3|A|~~~|~~~~~5-U7-y ~~~~~V-y|A|2V- U3V -0A/4X) X3_0NV -0A/3|C0)X3X3y-3r4y-|B|O05Vk2V-|B|Mr3V-|K|O|-3r~~~~/~~6-0Lq-p w XVoX3XVoU6woU3VoX3X3wow X3woX4/A0 yow XVoXV woXV wo0/Oza- U6- w6Vow |A| V -2U V2- 0/P/XV -2X |A| V2- 0/O|D0VoX3X3w -2V woU3V k VoXr3Vo~~~~~~|A|~~~|~~~6-2V9- 0J/O/ -pa0Eq2-2X30Eq2-2Ud-2U V2-2X3U5-aU5-2X3X w2-a0Eq2-20Eqa-20Eqa-7za-2U5-dV2-9|A|V2-3X4V3-a0Eq2-3X|A|V3-7|Gq2-2X3U5- Va-2U V2-4|A|O|V2-20E/3V2-7z9- Va-2X~~~~0~~~~~~7-pb0Cq3-3X30Cq3-3Uc-3X4V3-3X3XO04-bXO04-3X3XO04-b0Cq3-30C/O/b-30Cqb-7za-3U4-cV3-9|Eq3-4XMV4-b0Cq3-40Hq4-7|A|0Cq3-3X3XO04-Vb-3X4V3-4|Iq3-30C/NV3-7z9-Vb-3Uc-pbV4-4X2V4-4Ub-4X2V4-4X3y4-cy4-4X2V4-bV4-4Ub-4yc-7za-4U3-bV4-9|Dq4(c0A/O/4(7|A| 0A/O/4-4X2V4-yc-4XMV4-40H/O/4-4XMV4-7z9-yc-4Ub-paV5-5XV5-5Ua-5XV5-5X3w5-dw5-5XV5-aV5-5Ua-5wd-7za-5U2-aV5-9|Cq5ld~~al7|A|2~|a-5XV5- wd(5~~~~~~~~~~a(7z9- wd-5Ua-p9V6l6U9l6U9-il9V6-6U9-i-7za-6U -9V6-9V6!i-70C/O/7-7zalglil7z9-g-6U9-p8V7!7XO0p70Cq7-7XO0pi!8V7-7XO0pi-70A|3|a-7XO0-8V7-8V7-ji-8|A|4|p70A|3|a!g!i!7z9-g-7XO0pp8ypj8ypj8ypi-j8yp8ypi-80:|3|a-8y-8yp8yp9~~e-i-8|A|O|p80:|3|a-8ypg-ji-j7|A|N|9-g-8ypp9w9-9~~e-9w9-9~~e-9w9-i-i-9w9-9w9-i-90|N|a-9w -9w9-9w9-i-i-9~~e-90|N|a-9w9-g-9~~e-i-9~~e-8~~e-g-9w9-p'+'i-'*11+'f-'+'i-'*7+'g-i-i-i-h-g-i-8'\nd=zip('nmlkj!&()UVXZzyxwvutsrqpo','2/E03U2- 3/C03U3- -60Eq6- -4|A|4| 80A/O/p -70Cq7- -7z9-5zp -50Fq5- 2/B|O|- X40 r4/ 0B0 /0409- |A|3| 0Aq 8-8/A0 0/O/ aPa- -4/B/ -7/C04 /E040 /B/ /4/ 8-'.split()+[' - '])\nfor a in d:Y=Y.replace(a[0],a[1])\nY=Y.split('-')\nv=[]\nfor l in Y:\n r=''\n for c in l:\n  if c in x:r+=' '*int(k[c])\n  elif c in y:r+=':'*int(k[c])\n  elif c in z:r+='_'*int(k[c])\n  elif c=='0':r+='\\\\'\n  else:r+=c\n v.append(r)\nX=zip(*[v[i:i+27]for i in range(0,len(v),27)])\ni=input()\nfor j in range(22):\n s=''\n for c in i.lower():l=26if c==' 'else ord(c)-97;s+=X[l][j]\n print s",
        "s=raw_input()\ni=22\nwhile i:i-=1;print''.join('''BINARY_STUFF'''.decode('zip').split('@')[ord(c)%32][i::22]for c in s)"
    ],
    "how-many-consecutive-descending-numbers-in-my-number": [
        "e=enumerate\nt=int\nh=lambda n,s=1:max([1]+[i-len(n[j:])and h(n[j:],s+1)or s+1for j,_ in e(n)for i,_ in e(n[:j],1)if(t(n[:j])-t(n[j:j+i])==1)*t(n[0])])",
        "lambda n:max(j-i for j in range(n+1)for i in range(-1,j)if''.join(map(str,range(j,i,-1)))==`n`)",
        "R=range\nI=int\nL=len\ndef g(n,m,t=1):\n for i in R(1,L(m)+1):\n  if I(m)==I(n[:i])+1:\n   if i==L(n):return-~t\n   return g(n[i:],n[:i],t+1)\n return 1\ndef f(n):\n for i in R(L(n)):\n  x=n[:i]\n  for j in R(1,L(x)+1):\n   if (I(x)==I(n[i:i+j])+1)*I(n[i]):return g(n[i:],x)\n return 1",
        "l=lambda n,a=0,c=0,s=\"\":c*(n==s)or a and l(n,a-1,c+1,s+`a-1`)or l(n,a-~c)"
    ],
    "fluctuating-ranges": [
        "lambda n:n[0:1]+sum([range(x,y,2*(y>x)-1)[1:]+[y]for(x,y)in zip(n,n[1:])],[])",
        "d=diff\nwhile any(d(x)**2>1):i=argmax(d(x)**2);x[:i+1]+=[x[i]+sign(d(x)[i])]"
    ],
    "find-the-maximum-deviation": [
        "lambda v,d:max(map(lambda g:max(g)-min(g),[v[i:i+d]for i in range(-~len(v)-d)]))",
        "f=lambda v,d:v and max(max(v[:d])-min(v[:d]),f(v[1:],d))or 0"
    ],
    "smallest-diversifying-exponent": [
        "f=lambda n,i=1:len({*str(n**i)})>9or 1+f(n,i+1)",
        "f=lambda n,k=1:11>len(set(`k`))and-~f(n,n*k)"
    ],
    "largest-number-with-no-repeating-digit-pairs": [
        "f=lambda a,*b:(b and a+a+a.join(b)+f(*b)[:-1]or a)+a",
        "def f(x):\n\tk=[]\n\tfor i in range(x,0,-1):k+=sum([[i-j,i]for j in range(i)],[])+[0]\n\treturn k+[0,x]"
    ],
    "convert-superscripts-to-mathjax": [
        "def m(a):\n\tb='\u2070\u00b9\u00b2\u00b3\u2074\u2075\u2076\u2077\u2078\u2079';r=c=0;o='\\\\$'\n\tfor l in a:\n\t\tif l in b:\n\t\t\tn=str(b.index(l))\n\t\t\tif not r:o+='^{'+n;r=1\n\t\t\telif r:o+=n\n\t\t\tif c==len(a)-1:o+='}'\n\t\telif l not in b and r:o+='}'+l;r=0\n\t\telse:o+=l\n\t\tc+=1\n\treturn o+'\\\\$'",
        "def k(s):\n g=\"\u00b9\u00b2\u00b3\u2074\u2075\u2076\u2077\u2078\u2079\u2070\";h=\"\\$\"\n for y,x in enumerate(s):\n  if s[y]in g:h+='^{'+x;continue\n  if(x not in g)and(s[y-1]in g):h+='}'\n  h+=x\n return h+'\\$'"
    ],
    "find-the-missing-numbers-in-the-fibonacci-sequence-mod-k": [
        "def t(n,r=[1]):\n while n*n>len(r):r+=[sum(r[-2:])%n]\n return{*range(n)}-{*r}",
        "f=lambda n,m,a=0,b=1:a%m if n<=0else f(n-1,m,b,a+b)\np=lambda n,i=2,y={0}:y^{*range(n)}if f(i,n)==1>f(i-1,n)else p(n,i+1,y|{f(i,n)})",
        "lambda n:{*range(n)}-{*f(n*n,n)}\nf=lambda c,m,l=[1,0]:f(c-1,m,[(l[0]+l[1])%m]+l)if c else l",
        "def m(K):M=0,1;exec(K*6*'M+=sum(M[-2:])%max(K,2),;'+'print({*range(K)}-{*M})')",
        "m=input();r=set(range(m))\na=b=1\nexec\"a,b=b,a+b;r-={a%m};\"*m*6\nprint r"
    ],
    "make-a-proof-generator": [
        "k=a,b=input()\nd=a-b\nfor a,b in k,[2*a,2*b],[d,-d],[d*d]*2:print a,'=',b",
        "f=lambda a,b:f\"{a}={b}\\n{2*a}={2*b}\\n{a-b}={b-a}\\n{(a-b)**2}={(a-b)**2}\"",
        "for x in'input()','2*a,2*b','a-b>>1,b-a>>1','a*a,'*2:a,b=eval(x);print a,'=',b"
    ],
    "keep-drop-increase-sequence": [
        "f=lambda x,y=0,z=0:y<x and f(x,y+z,z+1)or~-y+x",
        "def f(n):a=round((2*n)**.5);return~-n+a*-~a//2",
        "def f(n):\n a=i=0\n while a<n:a+=i;i+=1\n return~-a+n",
        "lambda n:(round((2*n)**.5)+.5)**2//2+n-1"
    ],
    "given-a-number-print-out-its-collective-sum": [
        "lambda n:sum([int(str(n)[:int(i)])if i!='0'else 0for i in str(n)])",
        "lambda n:sum(int('0'+n[:int(x)])for x in n)"
    ],
    "convert-from-base-10-to-base-2-without-built-in-base-conversions": [
        "x=input();print\"\".join(\"01\"[x>>i&1]for i in range(15,-1,-1))",
        "b=lambda n:n<2 and'01'[n]or b(n//2)+b(n%2);print(b(int(input())))"
    ],
    "make-two-numbers-co-prime-while-preserving-their-least-common-multiple": [
        "def f(a,b):\n c=[1,1];p=2\n while p<=a*b:\n\tt=m=1\n\twhile(a*b)%p<1:m*=p;t=b%p<1;a/=p**(a%p<1);b/=p**t\n\tp+=1;c[t]*=m\n return c",
        "def f(x):n=1;exec'n+=1;j=k=1\\nwhile x[j]%k<1:k*=n**j;j^=1\\nx[j]/=k/n;'*x[0]"
    ],
    "are-there-n-consecutive-occurrences-of-a-number-in-a-row-column-in-a-matrix": [
        "lambda M,n:(', 0'*n)[5:]in`[map(cmp,l,l[1:])for l in M+zip(*M)]`",
        "def f(n,m):\n a=b=c=0;m+=zip(*m)\n for r in m:\n  for i in r:b,a=[1,b+1][a==i],i;c=max(c,b)\n return n<=c",
        "def f(n,x):x=[map(str,i)for i in x];print any(`[i]*n`[1:-1]in`x+zip(*x)`for i in sum(x,[]))"
    ],
    "numbers-decrease-while-letters-increase": [
        ".append()",
        "lambda X:[x-1if type(x)==int else chr(97+(ord(x)+8)%26)for x in X]",
        "lambda a:[i-1if''!=i*0else chr(97+(ord(i)+8)%26)for i in a]"
    ],
    "determine-ranges-from-a-list-of-values": [
        "[#, #, #, #, ..., #]",
        "N=sorted(map(int,raw_input().split(' ')));print(''.join((''if n+1in N else'-'+`n`)if n-1in N else' '+`n`for n in N)[1:])"
    ],
    "length-of-string-using-set-theory": [
        "s='{'\nfor _ in input():s+=s+'}'\nprint(s+'}')",
        "o=['{}']\nfor a in input():o+=['{'+''.join(o)+'}']\nprint(o.pop())"
    ],
    "can-i-type-this-with-my-left-hand": [
        "lambda K,S:{r.pop(0)for r in K for i in r}>={*S}",
        "lambda k,s:all(t.find(c)*2<len(t)for t in k for c in s)",
        "lambda k,w:all(max(map(r.find,w))<len(r)/2for r in k)"
    ],
    "proportion-of-self-avoiding-walks-on-a-square-lattice": [
        "f=lambda n,S=[0]:n>=len(S)and sum(f(n,S+[S[-1]+d])for d in[-n,-1,1,n])/4.or len(set(S))>n",
        "f=lambda n,p=0,*S:n<1or sum(f(n-1,q,p,*S)for q in{p-1,p+1,p-1j,p+1j}-{*S})/4"
    ],
    "reverse-a-rubiks-cube-algorithm": [
        "lambda a:[(v+\"'\")[:2-(\"'\"in v)]for v in a[::-1]]",
        "lambda l:[i.strip(\"'\")+\" '\"[len(i):]for i in l[::-1]]",
        "lambda s:[i[0]+(len(i)-2and\"'\"or\"2\"*(\"2\"==i[1]))for i in s[::-1]]"
    ],
    "socket-plug-compatibility": [
        "lambda s,p:any([s==p,p in\"CEF\"and s in\"DEFHKO\",s==\"B\"<p,s in\"JLN\"and\"C\"==p])",
        "lambda p,s:s in{\"A\":\"AB\",\"C\":y+\"CJLN\",\"E\":y,\"F\":y}.get(p,p)\ny=\"DEFHKO\""
    ],
    "find-the-sum-of-the-first-n-bouncy-numbers": [
        "i=s=0\nn=input()\nwhile n:b=`i`>`sorted(`i`)`[2::5]<`i`[::-1];n-=b;s+=b*i;i+=1\nprint s",
        "n=input()\nx=s=0\nwhile n:b={-1,1}<=set(map(cmp,`x`[:-1],`x`[1:]));s+=x*b;n-=b;x+=1\nprint s",
        "n=input()\na=0\nb=0\ns=0\nwhile a<n:\n    v=str(b)\n    h=len(v)\n    g=[int(v[f])-int(v[0]) for f in range(1,h) if v[f]>=v[f-1]]\n    d=[int(v[f])-int(v[0]) for f in range(1,h) if v[f]<=v[f-1]]\n    if len(g)!=h-1 and len(d)!=h-1:\n       a+=1\n       s+=b\n    b+=1\nprint s"
    ],
    "digitangular-numbers": [
        "def f(x):\n while x>1:\n  x=sum(-~int(z)*int(z)/2for z in`x`)\n  print x",
        "f=lambda k,s=0:k+s<2and[1]or[k]*(s<1)+f(*[k/10,s,s+k%10*(k%10+1)/2][k<1::2])",
        "f=lambda x:x<2and[1]or[x]+f(sum(-~int(i)*int(i)/2for i in`x`))"
    ],
    "output-the-aloned-numbers": [
        "L=range(2,input()+1)\nwhile L[0]*2<=L[-1]:L.remove(L[0]*2);L=L[1:]\nprint L",
        "lambda n:[i+1for i in range(n/2,n)if-~i&~i&4**n/3>>(-~i&i<1)]"
    ],
    "factor-poor-numbers": [
        "q=lambda n:sum(n%i<all(i%j for j in range(2,i))for i in range(2,n+1))\ni=2\nwhile 1:\n i+=1\n if q(i-1)>q(i)<q(i+1):print i",
        "n,g=9,lambda m,k=2,p=1:m//k and(m%k<p%k)+g(m,k+1,p*k*k)\nwhile 1:n+=1;g(n-1)>g(n)<g(n+1)!=print(n)"
    ],
    "numbers-with-similar-powers": [
        "set(f)",
        "def s(n):\n i=1;d={}\n while n-1:\n  i+=1\n  if n%i<1:d[i]=d.get(i,0)+1;n/=i;i=1\n return d.values()\na=input()\nj=a+1\nwhile s(a)!=s(j):j+=1\nprint j"
    ],
    "compress-a-sparse-matrix": [
        "lambda m:zip(*[[v,i]for k in m for i,v in enumerate(k)if v])+[reduce(lambda a,b:a+[len(b)-b.count(0)+a[-1]],m,[0])]",
        "lambda m:list(map(list,zip(*[[e,i,j] for i,r in enumerate(m) for j,e in enumerate(r) if e!=0])))"
    ],
    "sierpinski-layers": [
        "n=i=input()\nwhile i:print' '*i+''.join(\"/ \\ \"[j&i+1>0::2]for j in range(n-i+1));i-=1",
        "N=input()\nb,V,m,n=' V/\\\\'\ns=b*~-N+m+n\nR=str.replace\nwhile N:print s;N-=1;s=R(R(R(R(s+b,b+m,V),n+b,V),n+m,b+b),V,m+n)",
        "i=input()\nx=1\nwhile i:i-=1;print \" \"*i+bin(x)[2:].replace(\"0\",\"  \").replace(\"1\", \"/\\\\\");x^=2*x"
    ],
    "is-it-a-wordinian": [
        "lambda w,d,r=range:all(any(i in d for i in j)for j in[[w[i:i+s]for i in r(len(w)+1-s)]for s in r(1,len(w))])",
        "lambda w,d:len({len(x)for x in d if x in w})==len(w)"
    ],
    "all-your-base-palindromic-belong-to-us": [
        "def f(a):b,c=2,0;exec'd,m=[],a\\nwhile m:d+=[m%b];m/=b\\nc+=d[::-1]==d;b+=1;'*a;print c",
        "c=1;n=int(input())\nfor b in range(2,n):\n\ta=[];z=n\n\twhile z:a+=[z%b];z//=b\n\tc+=a[::-1]==a\nprint c"
    ],
    "find-the-odd-one-out-in-a-sequence": [
        "def f(a,i=0):s=set(a)-{2**j+1for j in range(i,i+5)};return len(s)<2and s or f(a,i+1)",
        "s=set(input());i,=d={1}\nwhile~-len(s-d):i*=2;d=d-{i/32+1}|{i+1}\nprint s-d"
    ],
    "draw-me-the-weird-unit-circle": [
        "lambda n:\"\\n\".join(\"\".join(\" X\"[(y*y+x*x)%n==1]for x in range(n))for y in range(n))",
        "n=int(input());r=range(n);p=print\nfor i in r:\n for j in r:p(end=' 'if(i*i+j*j)%n-1else'X')\n p()",
        "f=lambda n,k=0:k<n>f(n,k+1)!=print(''.join(' X'[(k*k+j*j)%n==1]for j in range(n)))"
    ],
    "egyptian-fractions": [
        "a,b=input()\nwhile a:\n    i=(b+a-1)/a\n    print\"1/%d\"%i\n    a,b=a*i-b,i*b",
        "x,y=input()\ndef R(n,a,b):\n if n<2:return[b/a][b%a:]\n for m in range((b+a-1)/a,b*n/a):\n  L=R(n-1,a*m-b,m*b)\n  if L:return[m]+L\nn=L=0\nwhile not L:n+=1;L=R(n,x,y)\nprint L"
    ],
    "how-should-you-arrange-your-chairs": [
        "lambda n:min((abs(~i-n/~i)+n/~i*~i,i+1,0-n/~i)for i in range(n))[1:]",
        "lambda n:max((~-i*~min(i,n/i),0-n/i,-i)for i in range(-n,0))[1:]"
    ],
    "triangles-of-hexagons": [
        "i=n=input()\nwhile i:a=i%2;print' '*(n-i)+'\\%s/'%['_',((-~i/2)*'/   \\  |'[a::2])[a:~a]][i>1];i-=1",
        "i=n=input()\nwhile i:print' '*(n-i)+'\\%s/'%' '.join(['/\\\\'*(-~i/2),['_',' '+'| '*(i/2)][i>1]][i%2]);i-=1",
        "n=N=input()\nwhile N:print' '*(n-N)+'\\\\'+(('/   \\|  '[N%2::2]*n)[:N*2-1],'_')[N<2]+'/';N-=1",
        "i=k=input()\nwhile i:i-=1;print(\" \"*(k+~i)+\"\\\\\"+i*' /  |\\  '[i%2::2])[:k-~i]+\"_/\"[i>0:]"
    ],
    "indexing-the-extended-fibonacci-numbers": [
        "f=lambda v,a=0,b=1,i=1:v*v>=a*a and[i]*(v==b)+[1-i]*((-1)**i*a==v)+f(v,b,a+b,i+1)or[]",
        "f=lambda x,l=[],i=0,a=0,b=1:i<x*x+2and f(x,l+[i][:a==x]+[-i][:i%2*2*a-a==x],i+1,b,a+b)or{*l}",
        "x=input()\ni=a=0;b=1\nwhile x*x>=a:\n if 0<a==x:print i\n if[-a,a][i%2]==x:print-i\n a,b=b,a+b;i+=1"
    ],
    "fibonacci-factorization": [
        "g=lambda k:1/k|any(abs(round(5**.5*i)**2-5*i*i)==4>k%i<g(k/i)for i in range(k+1))\nf=lambda n,k=1:n and f(n-g(k),k+1)or~-k",
        "f=lambda n,a=2,b=3:n<2or n%a<f(n/a)or n-a>0<f(n,b,a+b)\ng=lambda k,n=1:k and-~g(k-f(n),n+1)",
        "j=x=int(input())\ny=1,1\nexec('y+=y[-2]+y[-1],;'*x)\ni=c=0\nwhile c<x:\n    if j>=x:j=0;i+=1;t=i\n    if t%y[~j]<1:t/=y[~j];j-=1\n    if t<2:c+=1;j=x\n    j+=1\nprint(i)",
        "g=lambda k:1/k+any(k%i==0<g(k/i)for i in F)\nF=2,3;k=0;n=input()\nwhile n:F+=F[k]+F[-1],;k+=1;n-=g(k)\nprint k"
    ],
    "compress-a-maximal-discrepancy-2-sequence": [
        "print bin(int('28x0lphxjx8ze4uuhtdzo0oebr25amtmuxm62cbit0ibdwjm2sf50clh2ejq0a73ndseo5tove8uqca6nf66bo4abbkg867woh2b435at0o3pddvqmsqp29b6as5bd4eo28xgwkkj607gp66icba1q4n9fc13dltp45j340mpzbc56wsrbb3oejnczsbzfgh82xdi8aku8m4wlmwuxkgy4yaew7pu4p1g',36))[2:]",
        "#coding:437\nprint(bin(int.from_bytes('\u00fbKe\u2593\u2554L\u2551[\\r\u00fbO%2\u2563d\u2593\u258c,\u00fb\u2554e\u00e8\u00b1lr[\\x1a\u2524Ke\u00c6\u2518\u00c4.Y\u00a1\\x16K-\u00fbiZ\u00fb[*T\u03b4\\r\u2569Yl\u2591\u258c\\r\u00c6\u2566e\u00c6\u2566d\u255dY\u00c4\u00fb\u00a5%\u2502\\x0bl69,\u2553\u2554m\\x12\u2518\u00f1\u2562\u2554c\u00fbN9<il\u2593S3\u2500\u2567#8\u2321$\u00bb\\x19d\u2562\u2566%\u00dc\u2552\\x0e\u00aa\u2552(\u2553\u2564\u00fa\u00fb\u2554\u00a3\u00aa]-2\u2566E\u00dc\u00ecd\u2562\u00a5)\u00fb/4\u00aaYL\u2551X\u23212\u2554-\u2591\u03c4R\u00ec5\u2310\u2500'.encode('437'),'big'))[2:])",
        "r=[1]\nc=int('bmqnh8j8rdo4mirjos6uxbfthu8t39pjy6up43axryzwbwcu5d528nsakitjwqbo6dnnozy0oybhk6jduaoc53lqkzdb04opj5t50a24w9he5y7qbgd2',36)\nwhile c:t=sum(sum(r[::-k])/3for k in range(1,264)if len(r)%k<1);r[-1:]=cmp(0,t)or c%2*2-1,1;c>>=t==0\nprint r"
    ],
    "pick-flatten-a-list": [
        "g=lambda y=[],*z:[w+[n]for n in y for w in g(*z)]or[y]\nf=lambda x:x<[]and[x]or sum(g(*map(f,x)),[])",
        "def f(l,p=0):m=reduce(int.__mul__,[i*0<[]or len(i)for i in l]);return p*(p==l)or f(sum([(([i],i)[i*0>0]*m)[:m]for i in l],[]),l)",
        "def f(A,p):[F.append((len(A)*p,a))if a*0<[]else f(a,len(A)*p)for a in A]\nF=[];f(input(),1);R=[]\nfor v in F:R+=max(F)[0]/v[0]*[v[1]]\nprint R"
    ],
    "rapunzel-rapunzel-let-down-your-hair": [
        "lambda h,t:(\"BA\"+(abs(h-t)*2+1)/3*\"oa\"+\"h\"+(abs(h-t)+1)/3*\"ao\"+\"h!!\")[h>t::2]",
        "lambda l,h:[\"B\"+\"o\"*round((h-l)*2/3)+\"h\"+\"o\"*round((h-l)/3),\"A\"+\"a\"*(l-h)+\"h\"][l>h]+\"!\""
    ],
    "zipper-multiplication": [
        "lambda m,n:(1-(n*m<0)*2)*int(''.join([f\"{int(a)*int(b):02}\"for a,b in zip(str(abs(n))[::-1],str(abs(m))[::-1])][::-1]))",
        "a,b=input();o=0;p=1-2*(a*b<0);a,b=abs(a),abs(b)\nwhile a:o+=a%10*(b%10)*p;p*=100;a/=10;b/=10\nprint o"
    ],
    "intermediate-string-array-reflection": [
        "lambda l,n,A:[[[A[a][b],A[~b][~a]][sum(map(l.count,[A[a][b],A[~b][~a]]))%2]for b in range(n)]for a in range(n)]",
        "lambda s,a:[a[[i,~i][(s.count(c)+s.count(a[~i]))%2]]for i,c in enumerate(a)]"
    ],
    "change-the-timezone": [
        "def T(t,a):f=[int.__add__,int.__sub__][\"-\"in a];m=f(int(t[3:5]),int(a[7:9]));print`f(int(t[0:2])+m/60,int(a[4:6]))%24`+\":\"+`m%60`",
        "def f(t,z):i=int;r=60*(i(t[:2])+i(z[3:6]))+i(t[3:])+i(z[3]+z[7:]);print r/60%24,r%60"
    ],
    "simple-markdown-rendering": [
        "def f(x):\n\tfor l in x.split(\"\\n\"):L=l.find(\" \");print(L>3or L+len(l.lstrip(\"#\"))-len(l)and l or\"\\n\".join([\"\".join(c*(5-L)for c in l[L+1:])]*(5-L)))",
        "while 1:l=raw_input();i=l.find(' ');v=5-i*(l[:i]in'###');exec\"print[l,''.join(c*v for c in l[i+1:])][v<5];\"*(v>4or v)"
    ],
    "draw-a-permutation-path": [
        "l=map(int,raw_input().split())\nf=n=len(l)\no=s=n*' \\ /'\nwhile f+n%2:\n f-=1;i=f+n&1;a=s[2*i:][:2*n]+'\\n|   '[::2-i]\n while~i>-n:a+='|X'[l[i+1]<l[i]]+'   ';l[i:i+2]=sorted(l[i:i+2]);i+=2\n o=a+f%2*'|'+'\\n'+o\nprint o[:-2*n]",
        "def g(o,u=1):\n s=['|']*o\n for i in range(o,n-1,2):v=r[i+1]in a[:a.index(r[i])]*u;s+=['|X'[v]];r[i:i+2]=r[i:i+2][::1-2*v]\n print'  '*(1-o)+'   '.join(s+['|']*(o^n%2))*u+'\\n'*u+(' / \\\\'*n)[2*o:][:n*2]\na=map(int,raw_input().split())\nn=len(a)\nr=range(1,n+1)\no=1\ng(1,0)\ng(0)\nwhile r!=a:g(o);o^=1"
    ],
    "chess-find-all-legal-moves-except-castling-and-en-passant": [
        "b,Q=raw_input(),range;R=Q(8);D=\"w\"in b\nfor i in Q(9):b=b.replace(`i`,\"_\"*i)\nif D:b=b.swapcase()\ndef X(h,v,c):\n h+=x;v+=y\n if c and h|v in R and\"a\">b[v*9+h]:print chr(65+x)+`8-y`+chr(65+h)+`8-v`;return\"_\"==b[v*9+h]\nfor y in R:\n for x in R:\n  z=y*9+x;p=b[z];N=p==\"n\";j=[p in\"qrk\"]*4+[p in\"qbk\"]*4\n  if\"p\"==p:j[D]=k=(1,-1)[D];X(1,k,b[z+10*k]<\"_\");X(-1,k,b[z+8*k]<\"_\")\n  for i in Q(1,(2,(y==(1,6)[D])+2,8)[\"kp\".find(p)]):\n   for k in R:j[k]=X((0,0,-i,i,-i,i,-i,i)[k],(i,-i,0,0,-i,-i,i,i)[k],j[k])\n  for v,h in((2,1),(1,2)):X(v,h,N);X(-v,-h,N);X(-v,h,N);X(v,-h,N)",
        "exec\"\"\"p=raw_input()\nfor x in\"12345678\":p=p.replace(x,\"~\"*int(x))\nb=map(ord,\"#\"*21+p[:71].replace(\"/\",\"##\")+\"#\"*21)\nd,e=-10,126\nif not\"w\"in p:b,d=[x^32*(64<x<e)for x in b],10\nB=[-9,9,-11,11]\nR=[-1,1,-d,d]\nQ=B+R\nc=Zx:chr(96+x%10)+chr(58-x/10)\nfor x,p in enumerate(b):\n def O(y):\n    if 111<b[y]:print c(x)+c(y)\n s=ZL:[O(x+X)for X in L];m=ZL,z=x:L&(O(z+L[0]),m(L,z+L[0])if e==b[z+L[0]]else m(L[1:]))\n if p==80:e==b[x+d]&(O(x+d)or e==b[x+d*2]&35==b[x-d*2]&O(x+d*2)),111<b[x+d-1]<e&O(x+d-1),111<b[x+d+1]<e&O(x+d+1)\n p==75&s(Q),p==78&s([-12,12,-8,8,-21,21,-19,19]),p==82&m(R),p==66&m(B),p==81&m(Q)\"\"\".replace(\"Z\",\"lambda \").replace(\"&\",\" and \")"
    ],
    "somewhat-pedantic-birthday-paradox": [
        "d=146097\nb=d/400\nc=97/d\ne=lambda n:n<2and 1-97/d or e(n-1)*(366-n)/b\nf=lambda n:n<2and c or f(n-1)*(367-n)/b+e(n-1)*c\na=lambda n:1-e(n)-f(n)",
        "f=.2425\ng=365+f\na=lambda n:(n and(365-n)*a(n-1)or 365)/g\nb=lambda n:(n<2and f or(367-n)*b(n-1)+a(n-2)*f)/g\np=lambda n:1-a(n-1)-b(n)"
    ],
    "singly-lossy-integers-concatenated-sequences-missing-a-single-element": [
        "t,h,n,k,q*=range,input(),1,2,\nwhile h>len(q)or n*k<=len(str(q[h])):\n q+=[int(\"\".join([str(c+s)for c in t(k+1)if c-y]))for s in t(10**~-n,10**n)for y in t(1,k)]\n if~-n:n*=k;k+=1\n else:n,k=k+1,2\n while n//k*k-n:k+=1\n n//=k;q.sort()\nprint(q[:h])",
        "r=range\nf=lambda n:sorted(int(''.join(str(i+k)for i in r(1,j)if l-i))for k in r(n)for j in r(4,n)for l in r(2,j-1))[:n]"
    ],
    "determine-the-winner-of-a-game-of-war": [
        "f=lambda x,y,z=1:f(*((x,y,z+2),(x[z:]+y[:z]+x[:z],y[z:]),(x[z:],y[z:]+x[:z]+y[:z]))[(x[z-1]>y[z-1])+(x[z-1]<y[z-1])*2])if len(y)>z<len(x)else len(x)>len(y)",
        "def f(a,b):\n if a==\"\"or b==\"\":return b==\"\"\n p=a[0];q=b[0];a=a[1:];b=b[1:]\n if p>q:a+=q+p\n if p<q:b+=p+q\n while p[-1]==q[-1]:\n  if len(a)<2 or len(b)<2:return len(b)<2\n  v=a[1];w=b[1];p+=a[0:2];q+=b[0:2];a=a[2:];b=b[2:]\n  if v>w:a+=q+p\n  if v<w:b+=p+q\n return f(a,b)"
    ],
    "determining-yes-or-no": [
        "lambda s:'yn'[s.count('n')%2]",
        "lambda s:'yn'[int(s,35)%2]"
    ],
    "determine-if-an-array-contains-something-other-than-2": [
        "f=lambda l:l>=[]and all(map(f,l))or l==2",
        "f=lambda a:all(type(x)!=int and f(x)for x in a if x!=2)",
        "lambda l:l.strip('[],2')==l*('22'in l)"
    ],
    "stringsplode-the-string": [
        "f=lambda s:s and f(s[:-1])+s",
        "lambda s:''.join(s[:i]for i in range(len(s)+1))"
    ],
    "calculate-the-internal-angles-of-a-regular-polygon-with-n-sides": [
        "lambda n:(n-2)*180/n",
        "lambda s:180-360/s"
    ],
    "make-a-minimal-and-maximal-2-digit-number-from-digits-of-two-3-digit-numbers": [
        "lambda*l:[m(m(set(l[i])-{'0'})+m(l[~i])for i in(0,1))for m in min,max]",
        "lambda a,b:[m(k for i in a for j in b for k in(i+j,j+i)if'1'<k)for m in(min,max)]"
    ],
    "pendulum-encoding": [
        "lambda s:s[-1::-2]+s[::2]",
        "lambda l:l[1::2][::-1]+l[::2]"
    ],
    "opposite-of-the-digital-root": [
        "lambda n:[x for x in range(100)if~-n==~-x%9or x==n]",
        "lambda n:n and range(n,100,9)"
    ],
    "generate-boxes": [
        "def f(x,y):a=\"=\"*(4*y+1);print(a+\"\\n=\"+\"   =\"*y+\"\\n\")*x+a",
        "def f(x,y):a,b,c=\"=\"*4,\"   =\",\"\\n=\";print \"=\"+a*y+(c+b*y+c+a*y)*x",
        "def d(x,y):\n    for i in[1]*x:print'='*(4*y+1)+'\\n'+'=   '*(y+1)\n    print'='*(4*y+1)"
    ],
    "draw-a-mountain-given-altitude": [
        "a=input()\nn=max(a)\nwhile~n:print''.join(' x'[x==n]for x in a);n-=1",
        "lambda x:[[v==i and'*'or' 'for v in x]for i in range(max(x),-1,-1)]"
    ],
    "check-if-an-array-or-equivalent-has-the-same-number-of-odd-and-even-numbers": [
        "lambda x:sum(i%2for i in x)==len(x)/2",
        "lambda l:sum(n%-2|1for n in l)==0",
        "lambda x:sum(i%2-.5for i in x)"
    ],
    "count-the-lucky-tickets-within-the-given-range": [
        "lambda a,b:sum(sum(map(int,str(i)))==2*sum(map(int,str(i)[-3:]))for i in range(a,b+1))",
        "lambda a,b:sum(sum(map(int,`v/1000`))*2==sum(map(int,`v`))for v in range(a,b+1))",
        "def x(a,b):\n    n=0\n    for i in range(a,b+1):\n        if sum(map(int,str(i//1000)))==sum(map(int,str(i%1000))):n+=1\n    print(n)"
    ],
    "implement-a-cleave-function": [
        "print[f(n)for f in l]",
        "lambda L,n:[g(n)for g in L]"
    ],
    "make-me-a-smore": [
        "lambda w,g,c,m:zip(*['G'*g+'C'*c+'M'*m+'G'*g]*w)",
        "def s(w,g,c,m):g=['G'*w]*g;print g+['C'*w]*c+['M'*w]*m+g"
    ],
    "hofstadter-h-sequence": [
        "a=lambda n:n and n-a(a(a(n-1)))",
        "def f(n):\n    a=[0];i=0\n    while n:i+=1;a+=[i-a[a[a[i-i]]]];n-=1\n    return a[i]",
        "a=r,=0,\nexec'r=len(a)-a[a[r]];a+=r,;'*input()\nprint r"
    ],
    "sort-the-months-of-the-year": [
        "lambda x,y,m=(lambda a:'2&9<@FD6A?L%'.find(chr(sum(map(ord,a[:3]))%77))):m(x)<m(y)",
        "lambda x,y,m='anebarprayunulugepctovec':m.index(x[1:3])<m.index(y[1:3])",
        "lambda x,y,g='bMAanlseovc'.find:g((x*4)[10])<g((y*4)[10])"
    ],
    "cool-untitled-sequence-thingy": [
        "lambda n,k:sum(range(k,0,-n))",
        "f=lambda n,k:sum(sorted(range(1,k+1)*n)[:k])",
        "lambda n,k:sum(i/n+1for i in range(k))",
        "lambda n,k:(k+k%n)*(k/n+1)/2"
    ],
    "implement-the-torian": [
        "t=lambda x,z=0:x*(x-z)and t(x-1,z-1)*t(x,z+1)or x",
        "f=lambda x,y:f(x,y-1)*f(x-1,y)if x*y else(y>0)+x"
    ],
    "binary-reduce-a-list-by-addition-with-a-right-bias": [
        "lambda l:[t:=sum(l[:len(l)//2]),sum(l)-t]",
        "[right, left]"
    ],
    "the-redundant-boolean": [
        "print+bool(input(31*'0'))",
        "__mod__",
        "lambda n:'0'*31+'01'[n]"
    ],
    "who-has-a-comma-for-a-middle-name": [
        "k=input().split()\nprint(k[-1]+',',' '.join(k[:-1]))",
        "lambda s:s.split()[-1]+\", \"+\" \".join(s.split()[:-1])",
        "f,l=input().rsplit(' ',1);print l+',',f"
    ],
    "inverse-deltas-of-an-array": [
        "lambda l:[l[0]]+[x-(x-l[0])*2for x in l[1:]]",
        "lambda x:[x[0]*2-n for n in x]"
    ],
    "date-multiplying-challenge": [
        "r=range\ndef n(Y):\n a,b,c=31,30,0\n for x in r(12):\n  for y in r([a,(28if Y%4else 29),a,b,a,b,a,a,b,a,b,a][x]):\n   if(x+1)*(y+1)==int(str(Y)[2:]):c+=1\n return c",
        "f=lambda y,d=62:d-59and((d/31+1)*(d%31+1)==y)+f(y,-~d%372)",
        "[k/32%13*(k%32)for k in range(96,509)].count",
        "lambda y:sum(y%i<(y/i<29+i%2*3)for i in range(1,13))",
        "01223242434261334151533172234161321260115040331061312042410060032130113060021220420051013051110140127"
    ],
    "time-to-adjust-some-prices": [
        "lambda l:[max(5,(n+3)/5*5-(n-2)/5%2)for n in l]",
        "a=eval(input())\nfor i in a:print(round(i,-1)+[5,-1][max(4,i-2)%10>4])"
    ],
    "center-of-mass-from-a-list-of-coordinates-and-their-masses": [
        "lambda a,b:[sum(x*y/sum(b)for x,y in zip(L,b))for L in zip(*a)]",
        "lambda c,m:list(map(sum,zip(*[[i[0]*j/sum(m),i[1]*j/sum(m)]for i,j in zip(*([c,m]))])))"
    ],
    "generate-an-acronym": [
        "lambda s:[b for a,b in zip(' '+s,s)if'@'<b<'['>a in' -']",
        "lambda x:[c[0]for c in x.replace(\"-\",\" \").split()if c[0].isupper()]",
        "lambda n:[n[x]for x in range(len(n))if'@'<n[x]<'['and(' '+n)[x]in' -']"
    ],
    "recover-the-power-from-the-prime-power": [
        "f=lambda n,i=2:i/n or(n%i<1)+f(n,i+1)",
        "f=lambda n,x=2:n%x and f(n,x+1)or n/x<2or-~f(n/x)",
        "def f(n,p=2,i=0):\n\twhile n%p:p+=1\n\twhile n>p**i:i+=1\n\treturn i"
    ],
    "displaying-n-with-n": [
        "lambda n:'\\n'.join('xxx  x x'[int(i):][:3]for i in oct(0x3028000adba93b6b0000c0ad36ebac30180c0)[:-1][n::10]).replace('x',`n`)",
        "lambda n:(3*f\"%s%s{n}\\n%s %s\\n\")[:30]%(*[n if i//(2**n)%2else\" \"for i in[1021,1005,881,927,893,892,325,1019,877,877]],)"
    ],
    "whole-number-powers": [
        "lambda n:[i/n for i in range(n*n)if(i%n+1)**(i/n)==n]",
        "lambda n:[i for i in range(1,n)if round(n**(1/i))**i==n]"
    ],
    "converting-a-number-from-zeckendorf-representation-to-decimal": [
        "a=b=n=1\nfor i in input()[::-1]:n+=b*int(i);a,b=b,a+b\nprint(n-1)",
        "a=b=0\nfor x in input():b+=a+x;a=b-a\nprint b"
    ],
    "the-written-digits-sequence": [
        "f=lambda n,k=0:n and f(n-1,k+sum(632179420>>3*int(d)&7for d in`k`))or k",
        "n=0\nexec\"for c in`n`:n+=(4-2*int(c))/3%3+3\\n\"*input()\nprint n"
    ],
    "get-the-sequence-steps": [
        "def f(l):d=[y-x for x,y in zip(l,l[1:])];g=len(l);print[d[:k]for k in range(1,g+1)if g/k*d[:k]==d][0]",
        "def f(a,n=1):d=[y-x for x,y in zip(a,a[1:])];return d[:-n]==d[n:]and d[:n]or f(a,n+1)"
    ],
    "single-swaps-of-an-array": [
        "lambda n:[r(i)+[j]+r(i+1,j)+[i]+r(j+1,n)for j in r(n)for i in r(j)]\nr=range",
        "r=range(input())\nfor j in r:\n for i in r[:j]:t=r*1;t[i]=j;t[j]=i;print t",
        "r=range(input())\nprint[map({i:j,j:i}.get,r,r)for i in r for j in r[:i]]",
        "f=lambda n,r=range:n*[n]and[a+[n]for a in f(n-1)]+[r(1,i)+[n]+r(i+1,n)+[i]for i in r(1,n)]"
    ],
    "help-the-dealer-rebuild-the-deck": [
        "lambda s:' '.join(i+j for i in[*'A23456789JQK','10']for j in'HDSC'if(i+j)not in s)or'No missing cards'",
        "r=input()\nprint' '.join(n+x for n in list('23456789JQKA')+['10']for x in'HDSC'if n+x not in r)or'No missing cards'",
        "print(' '.join(set(`x`+y for x in range(2,11)+list('JQKA')for y in'HDSC')-set(raw_input().split()))or'No missing cards')",
        "print(' '.join({x+y for x in[*'23456789JQKA','10']for y in'HDSC'}-{*input().split()})or'No missing cards')"
    ],
    "binary-countdown-length": [
        "lambda n:bin(n^n/2).count('1')",
        "f=lambda n:n and-n%4/2+f(n/2)"
    ],
    "make-a-triangularity-program-valid": [
        "s=input()\nl=int(len(s)**.5)\nfor i in range(l):print s[i*i:][:i-~i].center(l*2-1,'.')",
        "i=input();u=int(len(i)**.5)\nfor t in range(u):g=\".\"*(u+~t);print g+i[t*t:][:t-~t]+g"
    ],
    "embiggen-your-input": [
        "k=list(filter(str.isalnum,input()))\nq=range(5);o=['']*5;r=k*25;d=0\nfor c in'uM\u0004<L\u0010x\u0014Se#ye\u000f>El4NpD@$\tgh>\u001d\u0010\u0015I,\u000em]a\u000e\u0003B>e\u0015,\f]\u0003?kFL\u0001\u000byglxV!\u0018\u0016\f\u000b\u0010\u000b%w832wGj%uT{Hr*K,*[P\\n6.&ED#T\f}^\u001c\u000fD\u0017LI&p7\u0017f\\d`*\u0001l\u001bG\u0012!Fac\u0005\b\u000eG\\rz?!\u001aA':d*=126;d+=ord(c)-1\nfor c in k:\n for i in q:\n\tfor y in q+[999]*2:o[i]+=d>>int(c,36)*25+i*5+y&1and r.pop(0)or' '\nprint'\\n'.join(o).upper()",
        "s=filter(str.isalnum,input().upper());x=s\nR=['']*5\nfor c in s:\n i=0;exec\"n=int('RAAAOQQ2RBAQBQRRBDRRDCDDAQ8QBRDDDDDRXDDF0XX6CCDDCDCCCD00ECNLDDEDC0DDD66YYABH0A3RQQRQCDOOFR00OCHHDQIQA0D6H0000DXL0CXYXDDDCDCCDD00ECDFDCEEX0D6N6044AQARRQYQADQBQRCBDRKDRDDAC9DQ0A0DD0R'[i*36+ord(c)%55%45],36);R[i]+=bin(n+36*(n<30)<<2)[3:].replace(*'0 ').replace(*'1.');i+=1;\"*5\n while'.'in`R`:R=eval(`R`.replace('.',x[0],1));x=x[1:]+s\nprint'\\n'.join(R)"
    ],
    "divisible-by-1000003-easy-just-multiply-the-last-digit-by-300001-and-add": [
        "P=input();i=P/3\nwhile i*10%P-1:i-=1\nprint i",
        "lambda n:3/(n%5*2-5)*n/10+1",
        "lambda n:(n%5*2-5^2)*n/10+1",
        "f=lambda a,x=-1:(a%10*x+a/10)%a and f(a,-x-(x>0))or x"
    ],
    "find-the-squarish-root": [
        "n=k=input()\nwhile(k*k>n)+n%k:k-=1\nprint k",
        "def f(x):\n l=x**.5//1\n while x%l:l-=1\n return l"
    ],
    "how-many-chapters-do-i-have": [
        "lambda s:[c for x,c in zip('A|m|C|h|2|th|2 Co|D|y|E|Ep|Ec|x|ze|G|Ge|H|gg|He|Ho|I|Jo|oe|oh|na|sh|Ju|dg|Ja|Je| J|1 J|K|2 K|L|Le|Lu|M|ch|rk|tt|N|Ne|Nu|O|P|Pr|Ph|pp|Pe|2 P|R|Ro|Ru|S|Sa|2 S|T| T|2 T| Ti|2 Ti|Z|Zep'.split('|'),(28,9,4,29,36,16,13,12,34,10,6,12,40,48,6,50,3,2,13,14,66,42,3,21,4,24,1,21,5,52,1,5,22,25,5,27,24,7,4,16,28,3,13,36,1,150,31,1,4,5,3,22,16,4,8,31,24,3,5,3,6,4,14,3))if x in s.title()][-1]",
        "lambda n:ord('A(\"4,|O|;|>||_ /\\xb5$+_>| _7|a|5-##_\"_G\"_/|7) $_$-|<|$_\"&|||_;S_% |:_45_#||#|%7\"_,_\\'_)|_\"|C_#|/_I|$_ \"|,|_%|_8_Q|+||||_!|_C#'.replace('|','__')[hash(n)%839%434%152])-31"
    ],
    "compute-minimax-of-an-array": [
        "f=lambda l,n:l[n-1:]and min(max(l[:n]),f(l[1:],n))",
        "lambda x,n:min(max(x[b:b+n])for b in range(len(x)-n+1))"
    ],
    "counting-from-1-to-n-without-any-consecutive-numbers": [
        "q=lambda s,x,n:sum(q(s-{v},v,n)for v in s if(v-x)**2>1)if s else x<n;f=lambda n:q({*range(2,n)},1,n-1)",
        "lambda n:reduce(lambda a,i:a+[i*a[-5]+a[-4]+2*(1-i)*a[-3]+4*a[-2]+(i+2)*a[-1]],range(2,n),[0,1]+4*[0])[n]"
    ],
    "adaptive-randomisation": [
        "f=lambda m,g:(l:=[g()for x in\"1\"*m]).count(1)==1and-~l.index(1)or f(m,g)",
        "h=lambda m,n,f:h(m,n,f)if(s:=sum(n**k*f()for k in range(m)))>=m else s"
    ],
    "convert-to-and-from-base-94": [
        "f=lambda n:n*\"?\"and f(n/94)+chr(n%94+33)",
        "n=input();r=''\nwhile n:r=chr(n%94+33)+r;n/=94\nprint r",
        "len(s)",
        "def t(n):return\"0\"if n<1 else t(n//94).lstrip(\"0\")+''.join(map(chr,range(33,127)))[n%94]\ndef f(n):return ord(n)-33 if len(n)<2 else f(n[1:])+(ord(n[0])-33)*(94**(len(n)-1))"
    ],
    "text-compression": [
        "a,b=\"Peter Piper picked\",\" peck of pickled peppers\"\nexit(f\"{a} a{b}.\\nA{b} {a}.\\nIf {a} a{b},\\nWhere's the{b} {a}?\")",
        "a=\"Peter Piper picked\"\nb=\" peck of pickled peppers\"\nprint a,\"a%s.\\nA\"%b+b,a+\".\\nIf\",a,\"a%s,\\nWhere's the\"%b+b,a+\"?\""
    ],
    "extract-local-maxima": [
        "lambda l,k=[0]:[j for x,j in enumerate(l)if(k+l+k)[x+2]<=j>=(k+l+k)[x]]",
        "f=lambda l,*p:l and l[:p<=l[:1]>=l[1:2]]+f(l[1:],l[0])"
    ],
    "generate-a-parity-bit": [
        "lambda s,p:`map(bin,map(ord,p+s))`[9:].count('1')%2",
        "lambda s,p:sum(bin(ord(c)).count(\"1\")for c in s)&1!=p>'e'"
    ],
    "it-was-just-an-input-bug": [
        "def f(s):l=len(s)-1;[print((' '*abs(i)).join(s[:0:-1]+s).center(2*l*l+1))for i in range(1-l,l)]",
        "f=lambda s:'\\n'.join([' '*(len(s)-1)*abs(len(s)-abs(i)-2)+(' '*abs(i)).join(s[::-1]+s[1:]) for i in range(2-len(s),len(s)-1)])"
    ],
    "im-lazy-close-my-superparens": [
        "5!=x or",
        "o=\"\"\nk=[0]\nfor c in input():\n\tif\"[\"<c:o+=\")\"*k.pop();k=[0]+k\n\telif\"Z\"<c:k+=[1];o+=\"(\"\n\telif\")\">c:k[-1]+=1;o+=c\n\telse:k[-1]-=1;o+=c\nprint(o)"
    ],
    "pyramid-scheme-negation": [
        "def f(n):\n\tg=[[\" \"]*5for _ in'  '*-~n];a=[\"^\",\"/!\\\\\",\"---\"]\n\tfor i in range(n):\n\t\tfor r,R in zip(a,g[i*2:]):R[(i-n)%2*2+(r>\"]\"):]=r\n\tg[-2][1]=\"^\";g[-1][1]=\"-\";return g",
        "def f(n):x=n%2;print' '*x*2,'^'+(-~n/2*\"\\n/!\\\\\\n---^\\n  /!\\\\\\n ^---\")[x*9:]+'\\n -'",
        "i=input();print i%2*2*\" \"+\" ^\"\nwhile i:print['/!\\\\\\n---^','  /!\\\\\\n ^---'][i%2];i-=1\nprint\" -\"",
        "lambda n:n%2*'  '+' ^%s\\n -'%(-~n/2*r\"\"\"\n/!\\\n---^\n  /!\\\n ^---\"\"\")[n%2*9:]",
        "lambda n:n%2*'  '+' ^\\n'+'\\n'.join(['/!\\\\\\n---^','  /!\\\\\\n ^---'][i%2]for i in range(n,0,-1))+'\\n -'"
    ],
    "the-letter-e-with-e": [
        "def p(a,b,c,d,e):q=c+e*(a-2)+c;return(q+'\\n'+(d+'\\n')*b)*2+q",
        "lambda a,b,c,d,e:d.join(\"\\n\"*-~b).join([c+e*(a-2)+c]*3)"
    ],
    "contradictory-polyglots": [
        "a=eval((0and gets or input()))\nb=a.sort()\nx,y=(b or a)\nz=0 or 1\nx==y or print([[y,x][z],[x+y,y-x][z]])",
        "6c 61 6d 62 64 61 20 78 2c 79 3a 5b 6d 61 78 28    lambda x,y:[max(\n78 2c 79 29 2c 78 2b 79 5d 2a 28 78 21 3d 79 29    x,y),x+y]*(x!=y)\n0a 23 7f fa 2c d3 f7 d3 cd 04                      .#.\u00fa,\u00d3\u00f7\u00d3\u00cd."
    ],
    "is-this-number-a-hill-number": [
        "def f(s):x=map(cmp,s,s[1:]);s[:sorted(x)==x]!=s[-1]>_",
        "def f(r):\n l=[*r]\n for i in-1,0:\n  while 1<len(l)and l[i]<l[(1,-2)[i]]:l.pop(i)\n return 2>len({*l})and r[0]==r[-1]",
        "lambda n:all((n[0]==n[-1])*sorted(set(x))==list(x)[::d]for x,d in zip(n.split(max(n)*n.count(max(n)),1),[1,-1]))"
    ],
    "build-an-alphabet-pyramid": [
        "r=range\ns=int(raw_input())\na=map(chr,range(65,91))\nfor i in r(0,s)+r(0,s-1)[::-1]:\n print (' '.join(a[:i+1]+a[:i][::-1])).center(s*4-2,' '))",
        "R=range\ndef g(a):\n def f(x,y,z):\n  for i in R(x,y,z):print \"  \"*(i-1),\" \".join([chr(65+j) for j in R((a-i))]+[chr(65+(a-i-2)-j) for j in R((a-i-1))])\n f(a,0,-1);f(2,a,1)"
    ],
    "divisor-rich-and-poor-numbers": [
        "f=lambda i,n=1,a=[[],[]]:zip(*a)[i:]or f(i,n+1,[a[j]+[n]*(cmp(*[sum(x%y<1for y in range(1,x))for x in int(`n`[::-1]),n])==1|-j)for j in 0,1])",
        "def f(n):\n a,b=[],[];i=1\n while not(a[n:]and b[n:]):[[],b,a][cmp(*[sum(m%-~i<1for i in range(m))for m in i,int(`i`[::-1])])]+=[i];i+=1\n return a[n],b[n]",
        "n=input()\np=[];r=[];c=1\nwhile min(len(p),len(r))<=n:[[],r,p][cmp(*[sum(x%-~i<1for i in range(x))for x in c,int(str(c)[::-1])])]+=[c];c+=1\nprint p[n],r[n]"
    ],
    "finite-cantors-diagonal": [
        "d,r=1,\"\"\nfor n in input():r+=`1+-~n/d%9`;d*=10\nprint r",
        "lambda x,n:int(`x`[1::n+3])%(10**n/2)+10**n/9"
    ],
    "the-minimum-fibonacci-challenge": [
        "while 1:\n s=input()\n if not s:break\n s=n=int(s);f=[1];t=[]\n while f[-1]<n:f+=[sum(f[-2:])]\n for i in f[::-1]:\n  if s>=i:s-=i;t+=[i]\n print(n,'=','+'.join(map(str,t))or 0)",
        "f=lambda a,b,n:b>n and a or f(b,a+b,n)\ng=lambda n:n>0and\"%d+%s\"%(f(0,1,n),g(n-f(0,1,n)))or\"\"\ntry:\n while 1:\n  n=input()\n  print \"%d: %s\"%(n,n<1and\"0\"or g(n).strip(\"+\"))\nexcept:0"
    ],
    "make-zero-from-first-n-numbers": [
        "lambda x:[s for s in[[~j*[1,-1][i>>j&1]for j in range(x)]for i in range(2**x)]if sum(s)==0]",
        "f=lambda n,*l:f(n-1,n,*l)+f(n-1,-n,*l)if n else[l]*(sum(l)==0)"
    ],
    "binary-prime-chunks": [
        "s='1';i=x=1\nexec\"s=s[i:];i+=1\\nwhile~-all(i%x for x in range(2,i)):i+=1\\nexec's+=bin(x)[2:];x+=1;'*i;\"*input()\nprint s[:i].count('1')",
        "n=input();k=m=1;p=[0];s=''\nexec's+=bin(k)[2:];p+=m%k*[k+p[-1]];m*=k*k;k+=1;'*n*n*2\nprint s[p[n-1]:p[n]].count('1')"
    ],
    "is-it-a-shuffle": [
        "x={0}\nfor v in input():x=x-{v-1}|{v}\nlen(x)<3>q",
        "l=input()\nn=0\nfor x in l*2:n+=n==x\nl[n]"
    ],
    "deep-search-a-list": [
        "def f(a,n,l=[],d=0):\n for e in a:l+=[d]*(e==n);0*e==[]and f(e,n,l,d+1)\n return{*l}",
        "f=lambda l,k,d=-1:l>[]and f(l[0],k,d+1)|f(l[1:],k,d)or{d}-{d+(l==k)}",
        "f=lambda l,k,d=0:set([d]*(k in l)).union(*[f(x,k,d+1)for x in l if[]<x])"
    ],
    "visualize-a-large-int": [
        "f=lambda s,p=\"\":s and f(s[:-3],p[1:]+\"kMGT\")+s[-3:]+p[:1]",
        "i=input();o=\"\"\nfor x in\"kMGT \":o=(i,x+i[-3:])[len(i)>3]+o;i=i[:-3]\nprint o",
        "f=lambda n,p=' kMGT':(n>M and f(n/M,p[1:])or'')+`n%M+M`[-3:]+p[0]\nM=1000",
        "f=lambda n,p='\u1d4f\u1d39\u1d33\u1d40':len(n)<4 and n or f(n[:-3],p[1:])+p[0]+n[-3:]"
    ],
    "sum-the-diagonals": [
        "lambda M:reduce(lambda x,y:map(sum,zip([0]+x,y+[0]*len(x))),M)",
        "x=input()\nf=lambda k:[x[i+k][i]for i in range(len(x)-k)]\na=map(f,range(4)[::-1])\nx=zip(*x)\nprint(map(sum,a+map(f,range(1,4))))"
    ],
    "from-0-to-2n-1-in-popcorn-order": [
        "N=1<<input()\nfor k in range(N*N):\n if bin(k%N).count('1')==k/N:print k%N",
        "F=lambda n:`sorted(range(1<<n),key=lambda x:bin(x).count('1'))`\n\n>>> F(3)\n'[0, 1, 2, 4, 3, 5, 6, 7]'"
    ],
    "whats-my-lucky-factor": [
        "x=input()\nR=range(1,x+1)\nfor i in R:i+=i<2;del R[i-1::i];x>R[-1]<exit(i)",
        "f=lambda n,k=2:n>=k and(f(n+n//k*~-t,k+1)if(t:=k>2<=f(k))+n%k else k)",
        "def f(x):\n\tm=1;n=range(1,x+1)\n\twhile x in n and max(n)>m:m=min(q for q in n if q>m);n=[q for i,q in enumerate(n)if-~i%m]\n\tprint 1-(x in n)and m"
    ],
    "minimum-number-of-platforms-required-for-a-railway-station": [
        "lambda l:max(sum([a<=h<=b,not b<h<a][a>b]for a,b in l)for h in range(24))",
        "lambda l:max(sum(a-b^b-h^h-a<1for a,b in l)for h in range(24))"
    ],
    "lets-decompress-a-bit": [
        "def f(s):\n for k in'0123456789':i=s.find(k);s=[s,s[:i]+s[i+1:].replace(k,s[i-2:i])][i>0]\n print s",
        "s=input()\nfor k in'0123456789':a,*b=s.split(k);s=a+a[-2:].join(b)\nprint(s)",
        "f=lambda s,k=0:(g:=s.find(m:=str(k)))+1and f(s[:g]+s[g+1:].replace(m,s[g-2:g]),k+1)or s"
    ],
    "mirrored-digital-clock": [
        "for h in range(1440):\n q=[[[0,(a+\"52\")[(a==\"2\")+(a==\"5\")*2]][a in\"01825\"]for a in c]for c in[(\"%02d\"%e)[::-1]for e in[h%60,h/60]]]\n if all(q[0]+q[1]):\n\tz=[int(''.join(j))for j in q]\n\tif(z[1]<60)*(z[0]<24):print\"%02d:%02d - %02d:%02d\"%(h/60,h%60,z[0],z[1])",
        "R=range(11)\nfor t in['0000111122201250125012'[j::11]+':'+'0001112255501501501015'[i::11]for i in R for j in R]:print t+' - '+''.join(map(dict(zip('0125:','0152:')).get,t))[::-1]"
    ],
    "number-of-distinct-non-empty-subsequences-of-binary-expansion": [
        "f=lambda x,a=1,b=1:x and f(x/2,a+~x%2*b,x%2*a+b)or a+b-2",
        "def f(x):\n v=[2,1];c=1\n for i in bin(x)[3:]:k=int(i);c+=v[k];v[1-k]+=v[k]\n return c"
    ],
    "seeking-secret-swapping-sequences": [
        "lambda n:n*(n+1)*(n+2)/3if 0<=n<=3else n*(n**2+5)/3#A162626",
        "lambda x:len(`x**(sum(map(int,'A000012'[1:]))==22)`)",
        "n=int(input())\nprint(sum(1for i in\"A017016\"if i>\"0\")*-~n//-~n)",
        "a=lambda a,n=((int(\"A000027\",11)-0x103519a)%100%30+1)/2:a//(14-n)",
        "lambda n:((sum(map(ord,'A000079'))*2)%8)**n"
    ],
    "within-fibonacci-numbers": [
        "f=lambda n,l=[1,0]:str(n)in str(l[1])and(len(l)-2,l[1])or f(n,[l[0]+l[1]]+l)",
        "f=lambda n,i=0,a=0,b=1:`n`in`a`and(i,a)or f(n,i+1,b,a+b)"
    ],
    "easy-binary-triangle": [
        "lambda n:[i*`i%2`+`~i%2`+i*`i%2`for i in range(n)]",
        "lambda n:[[i%2]*i+[~i%2]+i*[i%2]for i in range(n)]"
    ],
    "bake-me-a-cake": [
        "w,t,d=input()\na=\"\\n|\"+w*\" \"+\"|\"\nprint\"_\"+w*\"=\"+\"_\"+(d-1)*a+t*(a+\"\\n+\"+w*\"_\"+\"+\")",
        "i,j,k=input()\nl=[\"|\"+\" \"*i+\"|\"]\nfor x in[\"_\"+\"=\"*i+\"_\"]+l*(k-1)+(l+[\"+\"+\"_\"*i+\"+\"])*j:print x"
    ],
    "simpson-diversity-index": [
        "lambda s:sum(a!=b for a in s for b in s)/len(s)/~-len(s)",
        "lambda s:1-sum(x-1for x in map(s.count,s))/len(s)/~-len(s)",
        "def f(s):l=len(s);return sum(s[i%l]<>s[i/l]for i in range(l*l))/(l-1.)/l"
    ],
    "incremental-betting": [
        "def y(a,s):\n for l in s.split('W'):\n    a+=1;k=2**len(l)\n    if k>a:return int(bin(a)[3:],2)\n return a-k",
        "def g(r,a,b=1):\n    if r>\"\">a>=b:a=g(r[1:],*[(a+b,1),(a-b,b*2)][r[0]<\"W\"])\n    return a",
        "def g(a,s,n=1):\n for c in s:\n    if a>=n:a,n=((a+n,1),(a-n,2*n))[c<'W']\n return a",
        "def g(a,r,b=1):\n for l in r:\n  if l>\"L\":a+=b;b=1\n  else:a-=b;b*=2\n return a"
    ],
    "translate-ascii-text-to-braille": [
        "l=map((\" a c,bif/e d:hjg'k m;lsp o n!rtq%12s. w -u x v   z y\"%'').find,raw_input().lower())\nfor i in 1,4,16:print'  '.join('.o.o    ..oo'[(n&i*3)/i::4]for n in l)",
        "for l in input():\n a=ord(l)-96\n if a<0:a=0\n print(\"\u2800\u2801\u2803\u2809\u2819\u2811\u280b\u281b\u2813\u280a\u281a\u2805\u2807\u280d\u281d\u2815\u280f\u281f\u2817\u280e\u281e\u2825\u2827\u283a\u282d\u283d\u2835\"[a],end=\"\")"
    ],
    "determine-if-land-is-fully-enclosed-by-fences": [
        "g=raw_input()\nm=g.find(' ')\ng=g.replace(' ','')\nV={}\ndef D(V,x):\n if V.get(x,0)or g[x]=='1':return\n V[x]=1;[D(V,x+i)for i in 1,-1,m,-m if 0<=x+i<len(g)]\nD(V,g.find('0'))\nprint len(V)==g.count('0')",
        "def f(n):\n m=[int(c) for c in n if c!='\\n']\n for i in range(len(m)):\n  if m[i]<1:m[i]=2;break\n g(m,n.find('\\n'),i);return not 0in m\ndef g(n,w,i):\n for x in i-w,i-1,i+1,i+w:\n  if 0<=x<len(n):\n   if n[x]<1:n[x]=2;g(n,w,x)",
        "def f(n):\n x,y=0,0\n z=lambda x,y:y<len(n)and x<len(n[0])and n[x][y]!=1\n while not z(x,y):\n  y+=1\n  if y==len(n):\n   y=0\n   x+=1\n  if x==len(n[0]):\n   return False\n t=set([(x,y)])\n v=set()\n while t:\n  (x,y)=t.pop()\n  v|=set([(x,y)])\n  if z(x+1,y):\n   t|=set([(x+1, y)])\n  if z(x,y+1):\n   t|=set([(x, y+1)])\n return len(v)+sum(map(sum,n))==len(n)*len(n[0])"
    ],
    "code-golf-image-downloader": [
        "img<n>.<ext>",
        "img src="
    ],
    "fibonacci-program-lengths": [
        "s='s=%s;c=s;l=len(s%%c)+4;a,b=1,1\\nwhile b<l:a,b=b,a+b\\nc+=\"1\"*(b-l-1);print s%%`c`;a=1'\nc=s\nl=len(s%c)+4\na,b=1,1\nwhile b<l:a,b=b,a+b\nc+=\"1\"*(b-l-1)\nprint s%`c`",
        "p,c=55,89;exec(s:=\"print((a:=f'p,c={c},{p+c};exec(s:=%r)'%s)+'#'*(c-len(a)))\")",
        "a,b=55,89;exec(s:=\"print((f'a,b={b,a+b};exec(s:=%r)#'%s*b)[:b])\")",
        "g=\"%(s,b,a+b);print o.ljust(b-1)\";s,a,b=\"s,a,b=%r,%i,%i;o=s%\"+g,89,144;exec(\"o=s\"+g)#####"
    ],
    "differences-of-maxmin-divisor-pairs-dmdp": [
        "lambda i:len(filter(lambda n:n<i,[reduce(lambda x,y:y-x,[[x,n/x]for x in range(1,int(n**.5+1))if n%x<1][-1])for n in range(1,10001)]))",
        "lambda x:sum(x>min(abs(y/t-t)for t in range(1,y+1)if y%t<1)for y in range(1,10001))"
    ],
    "maximise-the-squared-difference": [
        "lambda n:[(i^min(i,~i%n)%-2)%n for i in range(n)]",
        "n=input()\nr=([],[n/2+1])[n%2]\nfor i in range(n/2,0,-1):k=[n+1-i];r=([i]+r+k,k+r+[i])[i%2]\nprint r",
        "n=input();a=n%2;b=n/2;x=[b+1,b+a][a:]\nfor i in range(b+a-1):f=1-i%2*2;x=[x[-1]-f]+x+[x[0]+f]\nprint x"
    ],
    "the-middle-square-method": [
        "def f(n,A=[],l=0):l=l or len(`n`)/2;return-(n in A)or-~f(n*n/10**l%100**l,A+[n],l)",
        "def f(s,p=-1,n=0,m=[]):\n x=len(str(s))*2\n while n not in m:m+=[s];y=str(s*s).zfill(x);n=int(y[x/4:x*3/4]);p+=1;s=n\n return p",
        "s=`input()`;u=[];l=len(s)/2\nwhile not s in u:u+=[s];s=`int(s)**2`.zfill(l*4)[l:3*l]\nprint~-len(u)"
    ],
    "build-a-bizzfuzz-program": [
        "F,B,Z,I='Fizz','Buzz','Fuzz','Bizz'\nfor i in range(1,101):a,b=i%4,i%5*4;print i if a+b in [1,4] else {5:Z,19:I,a:B,b:F,3:B+F,16:F+B,0:I+Z}.get(a+b,i)",
        "a='Fizz'\nb='Buzz'\nc='Bizz'\nd='Fuzz'\ne=c+d\nf=a+b\ng=b+a\ni=1\nexec\"print eval('ediifiiiaibiaiigiiic'[i%20]);i+=1;\"*100",
        "F,B,Z,I='Fizz','Buzz','Fuzz','Bizz'\nfor i in range(1,101):print{5:Z,19:I,i%4:B,i%5*4:F,3:B+F,16:F+B,0:I+Z,1:i,4:i}.get(i%4+i%5*4,i)"
    ],
    "roll-for-initiative": [
        "{\"name\":[SPD, DEX, WHT],...}",
        "lambda c:sorted(c,key=lambda x:x[3]-x[1]**2//abs(x[2]**.5))"
    ],
    "jump-the-array": [
        "l=lambda a,b,c,d:(b,c)in d and len(d)-d.index((b,c))or l(a,(a[b]+[0,b][c])%len(a),~c,d+[(b,c)])\nj=lambda a:max(l(a,b,c,[])for b in range(len(a))for c in(0,1))/2",
        "eSmhxtu+G%@Q+eG@QeGlQUQ]ddUQ",
        "a=input()\nz=len(a)\nb=[]\nfor i in range(z):\n    s,c,t=[],\"\",0\n    while(c in s[:-1])-1:j=(i*t+a[i])%z;c=`t`+`i`;s+=[c];t^=1\n    b+=[len(s)-s.index(c)-1]\nprint max(b)/2"
    ],
    "calculate-the-mu-numbers": [
        "n=input()\nl=[2,3]\nexec't=sorted(x*y for i,x in enumerate(l)for y in l[i+1:]);l+=min(t,key=(l+t).count),;'*n\nprint l[n]",
        "a=[2,3];exec'p=[x*y for x in a for y in a if x-y];a+=min(q for q in p if p.count(q)+(q in a)<3),;'*input();print a[-2]"
    ],
    "does-this-line-pass-through-that-square": [
        "lambda a,b,c,m,n:abs(2*(a*m+b*n+c)+a+b)<=abs(a)+abs(b)",
        "def f(a,b,c,m,n):\n if b:d=sorted((-a*x-c)/float(b)for x in(m,m+1));return d[0]-1<=n<=d[1]\n return m<=-c/a<=m+1",
        "lambda a,b,c,m,n:min(0,a,b,a+b)<=-a*m-b*n-c<=max(0,a,b,a+b)",
        "def f(a,b,c,m,n):f=-(a*m+c)/b;g=f-a/b;print(min(f,g)<=n<=max(f,g))"
    ],
    "garbled-phone-numbers": [
        "lambda s:g(*''.join(q<n<\"[\"and`(int(n,36)-4-(n>\"R\")-(n>\"Y\"))//3`or n for n in s).split(\" / \"))\ndef g(a,b,s=str.startswith):\n if b:c,d,e,f=a[0],a[1:],b[0],b[1:];b=(c==e and[c,q][c==\"_\"]or\"_\"in c+e and min(c,e)or[q,c,e][s(f,q)-s(d,q)])+g(d[s(d,q):],f[s(f,q):])\n return b\nq=\"?\"",
        "def f(e,z,q=\"?\",u=str.isnumeric):\n if e+z in(e,z):return\"\"\n o,O,t,T,*x=e[0],e[1:2],z[0],z[1:2],e[1:],z[1:]\n if\"?\"in o+t:return f([e,x[0]][o==q],z)\n if u(o):\n  if u(t):return t+f(*x)if O==q!=T else o+f(*x)if o==t or T==q!=O else 1\n  return o+f(*x)\n if u(t):return t+f(*x)\ndef g(s):\n for a,b in zip(map(chr,range(65,91)),\"2223334445556667777888999\"):s=s.replace(a,b)\n return f(*s.split(\" / \"))"
    ],
    "belarus-rushnyk": [
        "00000000: 2363 6f64 696e 673a 4c31 0a66 6f72 2079  #coding:L1.for y\n00000010: 2069 6e20 7261 6e67 6528 2d33 302c 3331   in range(-30,31\n00000020: 293a 733d 666f 726d 6174 2869 6e74 2827  ):s=format(int('\n00000030: 0137 ec80 937f f739 027d 7209 37e7 395c  .7.....9.}r.7.9\\\n00000040: 30cc ef73 108c 1fff fe41 b14e fb14 1bfe  0..s.....A.N....\n00000050: d364 09ce f7ff fc81 18c6 c811 8cec 8111  .d..............\n00000060: 272e 656e 636f 6465 2827 6865 7827 295b  '.encode('hex')[\n00000070: 6162 7328 7929 3a3a 3331 5d2c 3136 292c  abs(y)::31],16),\n00000080: 2730 3132 6227 293b 7072 696e 7420 732b  '012b');print s+\n00000090: 735b 2d32 3a3a 2d31 5d                   s[-2::-1]",
        "S=[bin(int(''.join(w),36))[2:].rjust(31,'0')for w in zip(*[iter(\"RBRG5FDLAJ2O77MSE012OBJWJUSWDQ464UKNYZIE8JYGS0JRFOCIJY7U5F983X0LYW20WNTE\")]*6)]\nfor s in S[:0:-1]+S:print s[:0:-1]+s"
    ],
    "the-bridge-and-torch-problem": [
        "lambda t:t.sort()or reduce(lambda x,c:x+[min(x[-2]+x[1]*2,x[-1])+c+x[0]],t[2:],t[:2])[-1]",
        "Theorem 1, A2:09",
        "f=lambda s:s[0]+s[-1]+min(2*s[1],s[0]+s[-2])+f(s[:-2])if s.sort()or 3<len(s)else sum(s[len(s)==2:])"
    ],
    "the-strange-life-of-a-beehive": [
        "w=300\ns=w*w\nx=[0]*297\nh=[1,1,0]+x+[1,0,1,1]+x+[1]+x*s\nexec('h=[1<sum(h[(i+x)%s]for x in[-1,-w-1,-w,1,w+1,w])<5-h[i]for i in range(s)];'*input())\nprint sum(h)",
        "P=[0,2,3,1j,1+1j,1-1j]\nfor i in' '*input():Q=[p+d for d in(1,-1,1j,-1j,1j-1,1-1j)for p in P];P=set(p for p in Q if 1<Q.count(p)<5-(p in P))\nprint len(P)"
    ],
    "exit-code-string-output": [
        "i=input()\nr=\"%s\"\nk=\"\"\nfor c in i:r%=\"print(%s\\\"%%s%s\\\");exit(%i)\"%(k,k,ord(c));k+=k+\"\\\\\"\nprint(r%\"\")",
        "p='exit(0)'\nfor c in input()[::-1]:p='print(%r);exit(ord(%r))'%(p,c)\nprint(p)",
        "lambda i,s='''i=%r;s=%r\ntry:print s%%(i[1:],s,i[0])\nexcept:0\nexit(ord(%r))''':s%(i[1:],s,i[0])"
    ],
    "cooke-and-wheatstone-telegraph-five-needle": [
        "lambda x:r'/|||\\/|||/\\|||/|\\||/||\\|/||'['APONM LKIHY GFEWU DBTSR'.find(x):][:5]",
        "def f(c):s=[\"|\"]*5;a=0xdb52384ebd9f46caa72899c838d50/25**(ord(c)-65)%25;s[a/5]=\"/\";s[a%5]=\"\\\\\";return''.join(s)"
    ],
    "directory-calculation": [
        "def p(a,n,r=[],S=\"/\"):\n for s in[s for s in((n[:1]!=S)*a+S+n).split(S)if\".\"!=s and s]:e=s!=\"..\";r=[s]*e+r[1-e:]\n return S+S.join(r[::-1])",
        "y=lambda:[x for x in raw_input().split(\"/\")if x!=\"\"and x!=\".\"]\na=y();n=y();m=len(a)-1\nwhile m>0:\n if a[m]==\"..\"and m>0:del a[m];del a[m-1];m-=1\n elif a[m]==\"..\":del a[m]\n m-=1\nfor i in n:\n if i==\"..\"and len(a)>0:del a[-1]\n else:a+=i,\nprint\"/\"+\"/\".join(a)"
    ],
    "bowl-filled-with-water": [
        "V,W=input()\nr=1\nwhile r*r<V:a=V/r-r;k=1;exec\"if(a+k)*k==W*(V%r<1):i=1;exec\\\"print' '*~-i+'\\%s/'%(' _~'[(i==r)-(i==r-k)]*(a+2*(r-i)));i+=1;\\\"*r;r=V\\nk+=1\\n\"*r;r+=1",
        "def f(b,w,i=1,e='while s<%s:j+=2;s+=j'):\n while 1:\n    i+=1;j=s=i;exec e%w\n    if s==w:p=j;exec e%b\n    if s==b:break\n h=(j-i)/2+1;t=w=i+(h-1)*2+1\n for j in range(h):r,s,t=((' '*(t-2),'_'*(i-1))[j==h-1],'~'*(t-2))[j==h-(p-i)/2-2],(w-t)/2,t-2;print\" \"*s+\"\\\\\"+r+\"/\"+\" \"*s"
    ],
    "are-these-lists-equal": [
        "d=id\ndef q(a,b,w):\n w[(d(a),d(b))]=0\n if d(a)==d(b):return 1\n if(a>[]and[]<b)-1:return a==b\n if len(a)!=len(b):return 0\n for x,y in zip(a,b):\n  if((d(x),d(y))in w or q(x,y,w))-1:return 0\n return 1\nlambda a,b:q(a,b,{})",
        "g=lambda c,*p:lambda a,b:c in p or all(map(g((id(a),id(b)),c,*p),a,b))if a>[]<b else a==b\ng(0)"
    ],
    "the-note-of-destiny-place-a-note-on-a-staff": [
        "R=range\nN='J'+raw_input()+' '\nX=N[1]>'G'\na,b,c=N[X:3+X]\nz=266-ord(a)/2*7+(ord(b)-4)%7\nZ=[list((' '*5,(' ---','-'*5)[8<r<18])[r%2])for r in R(21)]\nZ[z][2]='o'\nif' '<c:Z[z][1]=c\nQ=(z<13)*2\nfor i in(1,2,3):Z[z+i*Q-i][Q+1]='|'\nfor r in R(max(17,z),min(z-1,8),-1):print''.join(Z[r])",
        "M=' -'\nN=raw_input()+M\na,b,c=('J'+N)[N>'G':][:3]\nz=ord(a)*7/2-246-(ord(b)+3)%7\nfor r in range(21):\n L=M[r%2];F=M[2<r<12and r%2]\n if min(3,z)<=r<=max(11,z):print F+((L,'|')[8>z<r<z+4],(L,c)[M<c])[r==z]+(L,'o')[r==z]+(L,'|')[z-4<r<z>7]+F"
    ],
    "i-saw-that-coming": [
        "n=input()*3-3\na=-n-6\ns=' %s_\\n| %s|\\n|%s_|'%(a*'_',a*' ',a/3*'_/\\\\')\nif n>0:s='|%s|\\n|%s|'%(n/3*'\\\\_/',n*'_')\nprint s",
        "c=int(input())\np,w,n,u=list('| \\n_')\na=abs(c)-1\nd=3*a\nif c>0:\n s=p+\"\\\\_/\"*a+p+n+p+u*d+p\nelse:\n d=d+1\n s=w+u*d+n+p+w*d+p+n+p+\"_/\\\\\"*a+u+p\nprint s"
    ],
    "find-the-number-of-leading-zeroes-in-a-64-bit-integer": [
        "f=lambda n:-1<n<2**63and-~f(2*n|1)",
        "lambda n:67-len(bin(-n))&~n>>64"
    ],
    "which-character-to-change-cops": [
        "r=(1,)*8**9\nr=r,len,\nr=r,str,sum\nprint(len(str(r)))",
        "print min(0,0)>min(0,0)",
        "print pow(2,2**1337133713371337,195889276175237072760362930940173700767)"
    ],
    "robbers-square-times-square-root": [
        "lambda x:x**2.5",
        "s=e=x=y=input()**0.5\nprint'%.3f'%(y**(5.0))",
        "php38af4r2aoot2srm0itpfpmm0726991i=     (lambda x:x**2.5*1*1/1);",
        "f=lambda x:x**2.5or'1*77*8+8/5/(((aafothipie.xml)))'",
        "print int(raw_input())**(0+000000000000.5*5)",
        "print    (input()**(5.0/(2*5554448893999/5554448893840))-0)"
    ],
    "counter-counter": [
        "print(sum(map(input().count,\"#0469@ADOPQRabdegopq$%&8B$%&8B\")))",
        "print sum('#0469@ADOPQRabdegopq$%&8B'.find(x)/20+1for x in input())"
    ],
    "is-it-a-rainbow-color": [
        "PYTHONHASHSEED=2537",
        "lambda s:hash(s)%683%2",
        "lambda s:(s[0]<'c'<'r'==s[1])==(s[0]in'pcm')"
    ],
    "antiferromagnetic-ordering": [
        "n=r\"/|\\\\|/\"*input();print n+\"\\n\"+n[::-1]+\"\\n\"+n",
        "def f(n):x=\" /|\\\\ \\\\|/\"*n;print x+\"\\n \"+x[::-1]+\"\\n\"+x"
    ],
    "compare-the-averages-of-my-lists": [
        "lambda N,M:cmp(1.*sum(N)/len(N),1.*sum(M)/len(M))",
        "lambda p:cmp(*[sum(l)*1./len(l)for l in p])",
        "def c(M,N):\n  j=sum(N)/len(N)-sum(M)/len(M);print('N')if j>0else print('MT'[j==0])"
    ],
    "calculator-that-adds-char-values": [
        "print(sum(map(ord,input())))",
        "lambda x:sum(x.encode())",
        "print(sum([ord(c) for c in input()]))"
    ],
    "get-the-day-of-the-year-of-a-given-date": [
        "lambda",
        "lambda m,d:31*~-m-(539785049600>>3*m&7)+d"
    ],
    "count-up-replace-repeat": [
        "lambda n:[1+bin(i)[::-1].find('1')for i in range(1<<2*n-1)if bin(i).count('1')==n]",
        "def f(n):a=[n];exec'a=sum([range(1,i+1)for i in a],[]);'*n;print a",
        "def f(k):N=[k];exec('A=N;N=[]\\nfor i in A:N+=range(1,i+1)\\n'*k+'print(N)')",
        "lambda i:eval(\"[i \"+\"for i in range(1,i+1)\"*i+\"]\")"
    ],
    "english-to-alien-translator": [
        "lambda s:\"\".join((\"ouiaiOUIAI bnnpkbnnpk ouiiiouiii\"+c)[\"aeiouAEIOU\".find(c)::11] for c in s)",
        "lambda s:\"\".join([str,str.capitalize][ord(l)<91]({\"a\":\"obo\",\"e\":\"unu\",\"i\":\"ini\",\"o\":\"api\",\"u\":\"iki\"}.get(l.lower(),l))for l in s)"
    ],
    "write-a-brain-flak-classic-interpreter": [
        "[1,2,...]",
        "c,s=input();s=s,[]\na=s[0]\ndef w():global a,s;s=s[::-1];a=s[0];return 0\ndef p(c):a.append(c);return c\ndef n(c):print c;return c\nz=lambda c:0\ndef l(f):\n global a\n while a and a[-1]:f()\n return 0\nfor x,y in zip(\"() ( [] {} <> [ < { } ] >\".split(),\"+1 +p( -1 +(len(a)and(a.pop())) +w() +n( +z( +l(lambda: ) ) )\".split()):c=c.replace(x,y)\nexec c\nprint a"
    ],
    "create-a-codeblock-tool": [
        "print' '*4+'\\n    '.join(input().split('\\n'))",
        "lambda s:' '*4+s.replace('\\n','\\n    ')"
    ],
    "display-a-chain-of-little-mountains-with-an-odd-number-on-the-top-of-it": [
        "lambda n:\" 1  3  5  7  9\"[:-~n/2*3]+'\\n'+-~n/2*\"/ \\\\\"",
        "lambda n:' '.join(n%2*`n`for n in range(n+1))+'\\n'+-~n/2*'/ \\\\'",
        "lambda s:\" \"+\"  \".join(`range(s+1)`[4::6])+\"\\n\"+-~s/2*\"/ \\\\\""
    ],
    "print-the-tetration": [
        "f=lambda a,b:b<1or a**f(a,b-1)",
        "lambda a,b:eval('**'.join([a]*b))"
    ],
    "pythagorean-triples-given-the-hypotenuse": [
        "lambda c:[(a,b,c)for a in range(1,c)if(b:=(c*c-a*a)**.5)==b//1>a]",
        "lambda n:[(j,i,n)for i in range(n)for j in range(i)if i*i+j*j==n*n]"
    ],
    "is-the-word-coprime": [
        "lambda s:all(sum(c%96%x<1for c in s)<2for x in range(2,24))",
        "lambda a:all(sum(ord(v)%96%i<1for v in a)<2for i in range(2,26))"
    ],
    "generate-list-of-numbers-and-their-negative-counterparts": [
        "def f(a,b):print-a,a;a<b<f(a+1,b)",
        "f=lambda a,b:b//a*[0]and[a,-a]+f(a+1,b)"
    ],
    "sum-the-odd-square-numbers-less-than-n": [
        "lambda n:sum(i*i for i in range(1,n,2)if i*i<n)",
        "f=lambda n,i=1:+(i*i<n)and i*i+f(n,i+2)",
        "f=lambda n,i=1:i*i<n and i*i+f(n,i+2)",
        "lambda",
        "s=(1-input()**.5)//2*2;print(s-s**3)/6"
    ],
    "find-the-interwoven-source-codes-cops": [
        "ppprirnriipnnprtp rrpti\"piirnrinio\"ntt n n\"bt\"Tunht\" t\"is \"\"dot n\"t ohhe\"el\"\"w lo\"aleal\"l\"s\"",
        "execexec'prin'\"\"it`sum(map(ormpd,(stor.rparrt\"\"('\"\"thellitio\"on.__n\"'ame_)'_*\".3**/7\".__len.__()re)pl[ace++-2(]))**061`[+*+2]'.re'\"_pl'a)ce(*\"+:\")"
    ],
    "the-fibonacci-rectangular-prism-sequence": [
        "f=lambda n,a=0,b=1:n+2and(n<2)*b*b+f(n-1,b,a+b)",
        "lambda n:((3-5**.5)/2)**~n//5*4+2"
    ],
    "ones-and-twos-for-days": [
        "i=1\nwhile 1:print(1,*[2]*i,1);i+=2",
        "i=1\nwhile 1:print('1'+'2'*i+'1');i+=2",
        "lambda n:2-(-n%n**.5<.5)",
        "def g(n):return(2,1)[not((n+1)**.5%1and(n+2)**.5%1)]",
        "i=0\nwhile i:=100*i+121:print(i)"
    ],
    "the-max-is-not-enough": [
        "k=eval(input())\nif~-len(set(k)):print max(k)",
        "a=input();print('',max(a))[len(set(a))>1]",
        "if~-len(a:=set(eval(input()))):print(max(a))",
        "a=input();m=max(a);m>min(a)>exit(`m`)"
    ],
    "compactify-the-input": [
        "lambda s:s[0]+s[1:].translate(None,'aeiou')",
        "lambda s:s[0]+''.join(filter(lambda x:x not in'aeiou',s[1:]))",
        "lambda a,*s:[a]+[c[c in\"aeiou\":]for c in s]",
        "lambda s:s[0]+''.join(c for c in s[1:]if{c}-{*'aeiou'})"
    ],
    "block-of-digits": [
        "r=range(1,11)\nprint[[x*y%11%10for y in r]for x in r]",
        "n=1\nexec\"print('01234567890'*n)[n::n];n+=1;\"*10",
        "n=10\nwhile n:print('00987654321'*n)[n::n];n-=1"
    ],
    "repeat-the-nth-elements": [
        "f=lambda x,n,i=0:x[i:]and[1,n][i%n<1]*x[i]+f(x,n,i+1)",
        "lambda s,n:''.join(c*[1,n][i%n<1]for i,c in enumerate(s))",
        "STDOUT",
        "f=lambda x,n,i=0:x[i:]and n**(i%n<1)*x[i]+f(x,n,i+1)"
    ],
    "binomial-transform": [
        "def f(h,*t):print(h);f(*[h-(h:=x)for x in t])",
        "f=lambda a:len(a)>1and f([x-y for x,y in zip(a,a[1:])])or a[0]"
    ],
    "g%c3%b6del-numbering-of-a-string": [
        "s=input()\nP=k=r=1\nwhile s:r*=P%k<1or k**(3+2*'s~|A()'.find(s.pop(0)));P*=k*k;k+=1\nprint r",
        "def f(x):\n    P,p=[2],3\n    while len(P)<len(x):\n        P.append(p)\n        while 1:\n            p+=1\n            for i in P:\n                if p%i==0:break\n            else:break\n    i=1\n    for d,n in zip(x,P):i*=n**(2*\"0s~|A()\".find(d)+1)\n    return i"
    ],
    "calculate-power-series-result": [
        "lambda x,n:n+1if x<2else(x**(n+1)-1)/(x-1)",
        "f=lambda x,n:n<1or x*f(x,n-1)+1",
        "lambda x,n:sum(x**k for k in range(n+1))",
        "f=lambda x,n:n>=0and x**n+f(x,n-1)",
        "f(x,n-1)+x**n"
    ],
    "binary-representation-of-a-number-is-palindrome-or-not": [
        "n=bin(input())[2:]\nprint'YNEOS'[n!=n[::-1]::2]",
        "n=bin(input())[2:]\nprint'YES'if n==n[::-1]else'NO'"
    ],
    "evaluate-polynomial-expression-string": [
        "lambda p,x:eval(p.translate({94:\"**\",120:\"*x\"}))",
        "lambda p,x:eval(p.replace('^','**').replace('x','*x'))"
    ],
    "counting-characters": [
        "x=\"(x+2*chr(34)+'x=;f=eval(x)').count\";f=eval(x)",
        "`'``*2.count'*2`.count"
    ],
    "triangle-area-side-side-side": [
        "t=input()\ns=a=sum(t)/2.\nfor x in t:a*=s-x\nprint a**.5",
        "a,b,c=input()\ns=(a+b+c)*.5\nprint(s*(s-a)*(s-b)*(s-c))**.5"
    ],
    "find-the-serialized-integer": [
        "f=lambda k,i=0:-2*(k<0)or-~f(k-len(`i`),i+1)",
        "f=lambda k,s='',i=1:k>len(s+`i`)and f(k,s+`i`,i+1)or~-i",
        "i,j,k='',1,input()\nwhile len(i+`j`)<k:i+=`j`;j+=1\nprint~-j"
    ],
    "drawing-one-liner": [
        "lambda a:sum(n%2for n in a)in(0,2)",
        "lambda l:sum(n%2for n in l)|2<3"
    ],
    "is-there-a-shorter-way-to-assign-one-of-two-variables-in-python": [
        "exec\"xy=z\"[b:]",
        "exec`b`[0]+\"=z\""
    ],
    "make-a-scrabble-word-finder": [
        "C(x)<=C(w)",
        "lambda s,l:[w for w in l if all(w.count(c)<=s.count(c)for c in w)]"
    ],
    "check-my-tunneling-arrays": [
        "f=lambda l:sum(i==l[i]or len(l)<=l[i]or 0<=l[i]and i!=l[l[i]]for i in range(len(l)))<1",
        "lambda l:all(len(l)>v!=i==l[v]for i,v in enumerate(l)if-1<v)",
        "lambda l:all(l[v:]>[]and v!=i==l[v]or v<0for i,v in enumerate(l))"
    ],
    "merging-two-strings": [
        "lambda x,y:\"\".join([k if k!=\".\"and k else j for j,k in map(None,x,y)])",
        "lambda s,t:`map(max,s.upper(),t)`[2::5].lower()"
    ],
    "attacking-the-hydra": [
        "H,a=input()\nH*=[0]\nfor i in a:H[i:i+1]=[max(H)+1]*2\nprint H",
        "n,a=input()\nh=[0]*n\nfor c in a:h[c:c+1]=[max(h)+1]*2\nprint h"
    ],
    "rotational-average": [
        "lambda*n:10**len(n)//9*sum(n)/len(n)",
        "def f(a):b={int(`a`[i:]+`a`[:i])for i in range(len(`a`))};print sum(b)/len(b)"
    ],
    "incremental-cipher": [
        "r,*s=input()\nb=r\nfor a in s:d=(ord(a)-ord(b))%26;r+=['>'*d,'<'*(26-d)][d>13]+'*';b=a\nprint(r)",
        "r,*s=input();p=r\nfor c in s:d=(ord(p)-ord(c)-13)%26-13;r+='<'*d+'>'*-d+'*';p=c\nprint(r)"
    ],
    "self-replicating-numbers": [
        "def f(n,i=1):\n if sum(`i`in`i*~k`for k in range(i))==n:print i\n f(n,i+1)",
        "def am(m,n):\n k=lambda n:[i*n for i in range(1,n+1)if str(n)in str(i*n)];l=[];i=1\n while len(l)<m:\n  q=k(i)\n  if len(q)==n:l.append(q[0])\n  i+=1\n return l"
    ],
    "the-21-hairstyles-of-the-apocalypse": [
        "h=[x*3for x in\"_,o=+#*|)(x^&\"]\nfor i,*l in(6,\"-*~*-\"),(9,\"_/7\"),(13,\"@__\",\"((_\",\">X<\",\"'*`\"),(18,\")|(\",\"\\|/\"):h[:i]+=l\n*x,=map(int,input().split())\nl=len(x)\np=print\np(*(h[i].center(13)for i in x))\np(\"    (o o)     \"*l)\np(\"ooO--(_)--Ooo-\"*l)",
        "def f(a):s=t=u='\\n';i=0;exec\"s+=(\\\"_,o=+#-*|_)(x@(>'^)\\\\&_,o=+#**|/)(x_(X*^||&_,o=+#~*|7)(x__<`^(/&\\\"[a[i]::21]+'*-'*(a[i]==6)).center(14);t+='    (o o)     ';u+='ooO--(_)--Ooo-';i+=1;\"*len(a);print s+t+u[:-1]",
        "i=input();l=len(i)\nfor l in[' '*4+' -'[x==6]+\"_,o=+#**|_)(x@(>'^)\\\\&_,o=+#~*|/)(x_(X*^||&_,o=+#**|7)(x__<`^(/&\"[x::21]+' -'[x==6]+' '*5for x in i],['    (o o)     ']*l,['ooO--(_)--Ooo-']*l:print''.join(l)"
    ],
    "primes-and-twin-primes": [
        "p=lambda x:0<all(x%i for i in range(2,x))<x\nf=lambda n:[str(i)+'*'*(p(i-2)|p(i+2))for i in range(2,n)if p(i)]",
        "N=10000000"
    ],
    "simplification-of-numbers": [
        "lambda n:min((len(c(n,b))+len(set(c(n,b))),b,c(n,b))for b in range(2,37))[1:]\nc=lambda n,b,s='':n and c(n/b,b,chr(n%b+48+7*(n%b>9))+s)or s or'0'",
        "lambda n:min([(b,g(n,b))for b in range(2,36)],key=lambda(b,s):len(s)+len(set(s)))\ng=lambda n,b:n and g(n/b,b)+chr(n%b+48+7*(n%b>9))or''"
    ],
    "new-order-4-world": [
        "a=lambda n:n<1or a(n-1)*6**(a(n-1)//2in[0]+map(a,range(n)))//2",
        "def f(n):\n s=0,1\n while len(s)<=n:t=s[-1]//2;s+=(t in s)*3*s[-1]or t,\n return s[-1]",
        "l=lambda n,p=1,s=[0]:p*(n<len(s))or l(n,3*p*(p/2in s)or p/2,[p]+s)"
    ],
    "this-is-how-we-roll": [
        "def f(s):*s,d,t=s;n=len(s)-d;return s*0**d or s[:n]+s[-t%d-d:]+s[n:-t%d-d]",
        "lambda r:r[2:r[1]+2][r[0]:]+r[2:r[0]]+r[r[1]+2:]"
    ],
    "excessive-integers": [
        "n=input()\ni=2\nf=[]\nwhile i<n:\n if n%i:i+=1\n else:n/=i;f+=i,\nif-~n:f+=n,\nprint len(f)-len(set(f))",
        "f=lambda n,k=2:n/k and[f(n,k+1),(n/k%k<1)+f(n/k)][n%k<1]"
    ],
    "64-bit-ascii-weaving": [
        "lambda w,s:''.join('|-'[w>>~n/s%8*8+~n%s%8&1]+'\\n'[~n%s:]for n in range(s*s))",
        "k,n=input()\nk=[`['|-'[int(x)]for x in'{0:064b}'.format(k)]`[2::5][i*8:i*8+8]*n for i in range(8)]*n\nfor j in range(n):print k[j][:n]"
    ],
    "the-time-traveler": [
        "R=raw_input\nfor i in' '*input():x,y,z,h,m,s=map(int,(R()+i+R()).split());t=input()+h*y*z+m*z+s;print'%02d:%02d:%02d'%((t/y/z-1)%x+1,t/z%y,t%z)",
        "lambda T:[\"%02d:%02d:%02d\"%((s/z/y%x,x)[s%x<1],s/z%y,s%z)for x,y,z,h,m,s,t in[T[i:i+7]for i in range(1,len(T),7)]for s in[s+m*z+h*y*z+t]]"
    ],
    "garden-architecture-ascii-style": [
        "T=j=10\nn=input()+T\nwhile j:print([(n-j)/T*'|',min(n-T*j,T)*'-'][n>60]+'#'*T)[:T];j-=1",
        "def f(n):\n s=[('-|'[n<51]*n+'#'*100)[i*10:][:10]for i in range(10)]\n for l in[s,zip(*s)][n<51][::-1]:print''.join(l)",
        "n=input();x=n>50;k=x*81+10\nwhile k>0:s='';exec\"s+='|-##'[x::2][n<k];k+=x or 10;\"*10;print s;k+=x*81-101"
    ],
    "the-original-number-ii": [
        "lambda s:''.join(min(w)*(2*sum(map(s.count,w[:2]))-sum(map(s.count,w)))for w in\"O1WU W2 H3G U4 F5U X6 S7X G8 IUFXG9\".split())",
        "c=map(input().count,\"OWHUFXSGIQ\")\ni=4\nfor j in\"71735539994\":c[i*2]-=c[int(j)];i=-~i%5\ns=\"\"\nfor n in c:i+=1;s+=`i`*n\nprint s",
        "def f(s):\n\tr=[]\n\tfor i,w in zip([2,4,6,8,3,5,7,1,9],[\"WTO\",\"UFOR\",\"XSI\",\"GEIHT\",\"HTREE\",\"FIVE\",\"VSEEN\",\"ONE\",\"NINE\"]):\n\t\twhile s.count(w[0]):\n\t\t\tr+=[i]\n\t\t\tfor l in w:s=\"\".join(s.split(l,1))\n\treturn \"\".join(sorted(map(str,r)))"
    ],
    "read-color-in-my-way": [
        "lambda c,o,t:'#'+''.join(c[o.find(v):][:2]for v in t[1::2])",
        "lambda x,a,b:['#']+[[x[i:i+2]for i in range(1,len(x),2)][i]for i in[a[1::2].index(i)for i in b[1::2]]]",
        "lambda c,s,e:[c[s.index(e[i]):][:2]for i in range(1,len(e),2)]"
    ],
    "listify-a-number": [
        "lambda a:[[]]*(a<0)+[map(int,n)for n in`abs(a)`.split('.')]",
        "lambda x:(x<0)*[[]]+[map(int,i)for i in`abs(x)`.split('.')]",
        "lambda x:[map(int,i)for i in`x`.replace(*'-.').split('.')]"
    ],
    "sum-of-set-bits-from-1-to-n": [
        "f=lambda n:n and(r:=2**(m:=len(bin(n))-3))*m/2+n%r+1+f(n%r)",
        "def f(A):\n A+=1;a=0\n for i in range(32):\n  x=2<<i;d,r=A//x,A%x;a+=d*x/2\n  if 2*r>x:a+=r-x/2\n return a",
        "def f(A):\n c=0\n while A>1:\n  a=len(bin(A))-3;A=A%(2**a);c+=2**a*a/2+A\n return c",
        "f=lambda n:n and(2*f(n//2)+n//2+1if n%2else f(n/2)+f(n/2-1)+n/2)"
    ],
    "ascending-integer-pyramid": [
        "k=1\nexec\"print range(k,0,-9)[:101-k];k+=10-k/91*9;\"*19",
        "r=range\nfor a in r(0,90,10)+r(90,100):print r(a,a/10+a%10*10-1,-9)"
    ],
    "find-the-wavy-words": [
        "\"watch\"",
        "lambda s:[2<len(set(s))<s[::b]==sorted(s)for b in-1,1]",
        "lambda x:(len(set(x))>2)*(list(x)==sorted(x)or(list(x)==sorted(x)[::-1])*2)"
    ],
    "is-this-a-circular-step-sequence": [
        "f=lambda n,l,x=0,m=0:all(f(n,l[1:],y%n,m^1<<y%n)for y in[x+l[0],x-l[0]])if l else m-2**n+2",
        "f=lambda n,b,i=[0]:b and(f(n,b[1:],[(i[0]+b[0])%n]+i)+f(n,b[1:],[(i[0]-b[0])%n]+i))or len(set(i))==n",
        "f=lambda n,a,v=[0]:a and any(f(n,a[1:],[(v[0]+x*a[0])%n]+v)for x in(-1,1))or len({*v})==n",
        "f=lambda n,l,m=1:all(f(n,l[1:],m<<d*l[0]|1)for d in[1,n-1])if l else m%~-2**n",
        "lambda n,b:n in map(len,map(set,reduce(lambda Q,k:[q+[(q[-1]+v)%n]for q in Q for v in-k,k],b,[[0]])))",
        "lambda n,a,r=range:n in(len({sum([a[j]*(k>>j&1or-1)for j in r(i)])%n for i in r(n)})for k in r(1<<n))"
    ],
    "may-the-wind-be-always-at-your-back": [
        "g=input()\nW=len(g[0])\na=[divmod(`g`.find(\"c\")-2,W+4)]\nfor y,x in a:A,B,C,D,E,F=map(((g+[\"~\"*W])[y]+\"~\")[x].__eq__,\"><v^~i\");a+={(y+a%3+1/~-F,x+a/3-1)for a in{3+3*A-3*B-~C-D}-{4-E}or[3,5,1,7]}-set(a)",
        "e=enumerate\nd={\"^\":(0,-1),\"v\":(0,1),\"<\":(-1,0),\">\":(1,0),\"~\":(0,0)}\ndef f(g,x=e,y=0,V=[]):\n\tif x==e:x,y=[(x,y)for y,r in e(g)for x,c in e(r)if c==\"c\"][0]\n\tif(x,y)in V or x<0 or x>=len(g[0])or y<0 or y>=len(g):return 0\n\tv=g[y%len(g)][x%len(g[0])]\n\tif v in d:a,b=d[v];return f(g,x+a,y+b,V+[(x,y)])\n\treturn v==\"i\"or any(f(g,x+j,y+k,V+[(x,y)])for j,k in d.values())",
        "lambda w,h,b:b.find('i')in(r:={b.find('c')})|{r.update(*([{(d:={'<':i-1,'>':i+1,'^':i+~w,'v':i-~w}).get(b[i],i)},{*d.values()}][b[i]in'*c']for i in r if-1<i<len(b)))for _ in b}"
    ],
    "is-it-a-pascal-prime": [
        "a=q=[1];n=input();r=n<4;p=1\nfor i in range(2,n):q=a+map(sum,zip(q[1:],q))+a;r+=n in q;p*=n%i\nprint p+r<1",
        "def f(n):l=[1];exec\"(n in l)>=any(n%k<1for k in range(2,n))>q;l=map(sum,zip([0]+l,l+[0]));\"*n"
    ],
    "sort-by-what-the-digit-pairs-describe": [
        "lambda l:sorted(l,key=lambda x:int(''.join(v*int(c)for c,v in zip(*[iter(`x`[len(`x`)%2:])]*2))or 0))",
        "def g(l):l.sort(key=f)\nf=lambda n:+(n>9)and int(`f(n/100)`+n/10%10*`n%10`)"
    ],
    "reverse-maths-cycles": [
        "lambda l:[eval(y+'+*-/%*'[x%6]*-~(x%6>4)+l[~x])for x,y in enumerate(l)]",
        "lambda l:[eval(j+'*+*-/%*'[-~i%6::6]+l[~i])for i,j in enumerate(l)]"
    ],
    "render-an-ascii-maze": [
        "m=input()\nf=lambda x,y:(['']+m+[''])[y+1][x:x+1]>' '\nprint[[(c<'!')*' 'or'+-|+'[f(x+1,y)|f(x-1,y)|2*f(x,y+1)|2*f(x,y-1)]for x,c in enumerate(r)]for y,r in enumerate(m)]",
        "def g(s):\n h,j,s=' +|-+','',s.splitlines()\n s+=['']\n for n in range(len(s)):\n  s[n]+=' '\n  for i in range(len(s[n])-1):\n   l,r,k=s[n][i-1],s[n][i+1],0\n   try:u=s[n-1][i]\n   except:u=' '\n   try:d=s[n+1][i]\n   except:d=' '\n   if not s[n][i]==' ':\n    k+=1\n    if not u==d==' ':k+=1\n    if not l==r==' ':k+=2\n   j+=h[k]\n  j+='\\n'\n print(j)"
    ],
    "grid-crossing-sequence": [
        "lambda m,n:[x%m<1for x in range(1,m*n)if x%m*(x%n)<1]",
        "lambda m,n:[m>i*n%(m+n)for i in range(1,m+n-1)]",
        "a,b=input()\ni=1e-4\nx=y=l=o=p=0\nk=\"\"\nwhile len(k)<a+b-2:x+=i*a;y+=i*b;k+=\"V\"*int(x//1-o//1)+\"H\"*int(y//1-p//1);o,p=x,y\nprint k"
    ],
    "infer-geometric-sequences": [
        "x=lambda a,b,c,i=0,q=[]:a*(b/a)**i>c and q or x(a,b,c,i+1,q+[a*(b/a)**i])",
        "a,b,c=input()\nx=b/a\nwhile c/a:print a;a*=x"
    ],
    "how-many-holes": [
        "s=input()\no=[-1,0,1]\nm=lambda x,y:0if x in[-1,len(s[0])]or y in[-1,len(s)]else 1if s[y][x]else(s[y].__setitem__(x,1),all([m(x+a,y+b)for a in o for b in o]))[1]\ne=enumerate\nprint sum(m(x,y)-c for y,l in e(s)for x,c in e(l))",
        "A=input()\nc=0\nX=len(A[0])-1\nY=len(A)-1\ndef C(T):\n x,y=T\n global g\n if A[y][x]<'#':\n    if y<1or y==Y or x<1or x==X:g=0\n    A[y][x]='#';map(C,zip([x]*3+[min(x+1,X)]*3+[max(x-1,0)]*3,[y,min(y+1,Y),max(y-1,0)]*3))\nwhile' 'in sum(A,[]):i=sum(A,[]).index(' ');g=1;C((i%-~X,i/-~X));c+=g\nprint c"
    ],
    "the-back-and-forth-sequence": [
        "def l(b):l=len(b);return(l>=sum(b)*2or l%2<1)and-~l or[i+1for i,c in enumerate(b)if b[i]][l/2]*2",
        "def f(x):k=len(x)+1;print next((i*2for i in range(k)if k==2*sum(x[:i])),k)",
        "def l(b):\n p=e=w=len(b);d=i=1\n while e:p+=1-2*b[w-e];d*=2*(1!=d-p>~w)-1;p-=d;e=(e-d)%-~w;i+=1\n return i"
    ],
    "plain-hunt-bell-ringing": [
        "lambda n:[[.5+abs((n+j-i*(-1)**(i+j))%(2*n)-n+.5)for j in range(n)]for i in range(2*n+(n>2))]",
        "n=input()\nR=range\ns=R(1,n+1)\nfor k in R(n*2-2/n+1):\n print s\n for i in R(k%2,n-1,2):s[i:i+2]=s[i+1],s[i]"
    ],
    "91-bottles-of-ascii-beer-on-the-wall": [
        "center",
        "B=['  |=|   ','  | |   ','  | |   ',' /   \\\\  ','.     . ','|-----| ','|     | ','|-----| ','|_____| ']\nN=lambda r:sum(n for n in range(1,r+1))\nn=input()\nR=0\nwhile N(R)<n:R+=1\nL=R-n+N(R-1)\ne=range(1,R)+([R],[])[L!=0]\nfor r in range(1,14):\n    if r in e:continue\n    if(r-1 in e)<1:print('',' '*(1+(13-r)*4)+'='*(r*8-3))[r!=1]\n    i=(0,R-L)[r==R];w=(8*i+(13-r)*4,0)[i==0];print'\\n'.join([' '*w+((13-r)*4*' '+l*r)[w:]for l in B])\nif n=91:print':('"
    ],
    "make-wise-numbers": [
        "lambda x:'<'.join('>~<~'*int(i)for i in bin(x)[2:])",
        "def w(x):a=map(int,bin(x)[2:]);return x%2*(\"~<~:<\"+\"<\".join(\":\"*e for e in a[-2::-1])+\"|\"*sum(a))or w(x/2)+\"<\""
    ],
    "the-meta-polyglot-quine": [
        "_='_=%r;print(_%%_['+'~'*-~int(-1/2)+'int(-1/2):])';print(_%_)",
        "#\nprint\"\\nS`((.+))\"*2+\"\\n\\n\"\n#?\n#_='_=%r;%_\\n';_\n#?;\n#;print _%\n#"
    ],
    "output-the-partial-products": [
        "def p(a,b):\n j=0\n while b>0:\n  print`b%10*a`+j*'0';b/=10;j+=1",
        "f=lambda a,b:b*[0]and[b%10*a]+f(a*10,b/10)"
    ],
    "permutations-in-disguise": [
        "def p(a,r,l):\n if r==[]:l+=[a];return\n for i in range(len(r)):\n  p(a+[r[i]],r[:i]+r[i+1:],l)\ndef m(l):\n s=(float(\"inf\"),0);q=[];p([],list(range(len(l))),q)\n for t in q:D=sum(abs(e-f)for e,f in zip(l,t));s=(D,t)if D<s[0]else s\n return s[1]",
        "def f(l):z=zip(l,range(len(l)));print map(sorted(z).index,z)"
    ],
    "draw-growing-stacks-of-boxes": [
        "n=input()\nw=n*n+n+2>>1\na=eval(`[[' ']*w]*-~n**2`)\nr=range\nj=[i*i+i>>1for i in r(n+1)]\np=0\nfor i in r(w):\n if i in j:\n    p+=p<n\n    for k in r(p*p+1):a[~k][i]='+'if k%p<1or' '<a[~k][i-1]<'.'else'|'\n else:\n    for k in r(p*p+1):a[~k][i]=' 'if k%p else'-'\nprint'\\n'.join(''.join(i)for i in a)",
        "n=input()\ni=n*n\nwhile-~i:j=x=1;l=\"\";exec'y=i%j<1;z=i>j*j;l+=j*z*\" \"or\"|+\"[x|y]+\" -\"[y]*~-j;x=y^z>z;j+=1;'*n;print l+\"|+\"[x];i-=1",
        "Q=input()\nY=[]\nfor i in range(Q):\n    f=\"+\"+i*\"-\"+\"+\";x=map(list,zip(*([f]+[\"|\"+\" \"*i+\"|\"]*i)*(i+1)+[f]))\n    if i:y=Y.pop();x[0][-len(y):]=y\n    Y+=x\nprint\"\\n\".join(\"\".join(i)for i in zip(*[\"\".join(j[::-1]).ljust(Q*Q+1,\" \")for j in Y])[::-1])"
    ],
    "missile-mounted-cameras": [
        "f=lambda l,i=1:i/l[-1]or max(f(l,i+1),*[g(a,l,i)for a in l])\ng=lambda a,l,i:a in l and-~g(a+i,l,i)",
        "lambda l:max(reduce(lambda i,x:i+(a+i*(b-a)==x),l,0)for a in l for b in l)"
    ],
    "olympic-rings-sequence": [
        "p=lambda r,x='',i=1:sum(map(int,str(x[6*r-2]+x[6*r-4]+x[6*r-6]+x[12*r-4]+x[12*r-6])))if len(x)>12*r-2else p(r,x+str(i),i+1)",
        "n=input()*6\ns=''.join(map(str,range(n*2)))\nprint sum(map(int,s[n-5:n:2]+s[n*2-5:n*2-1:2]))",
        "n=input()*6;k=1;s=''\nexec's+=`k`;k+=1;'*n*2\nprint sum(int(s[p])for p in(n-2,n-4,n-6,n*2-4,n*2-6))"
    ],
    "golf-the-chinese-99-multiple-table": [
        "l=\" \u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\"\nfor i in range(1,10):print([l[j//i]+l[i]+('\u5f97',l[j//10][10<j<20:]+'\u5341')[j>9]+l[j%10]for j in range(i,i*i+1,i)])",
        "n=\" \u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\"\nfor x in range(1,10):print([n[y//x]+n[x]+n[y//10][20>y!=10:]+'\u5f97\u5341'[y>9]+n[y%10]for y in range(x,x*x+1,x)])",
        "lambda c=' \u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d':[[c[j]+c[i]+[('\u5f97'+c[(i*j%10)]),((c[(int(i*j/10))]*((i*j>19)or(i*j==10)))+'\u5341'+(c[i*j%10])*(i*j%10!=0))][i*j>9]for j in range(1,i+1)]for i in range(1,10)]"
    ],
    "hilberts-binary-hotel": [
        "r='print 0';s='<<'\nfor n in input():r+=oct(n)[:0:-1];s+='0'+'1'*n\nexec r+s",
        "a=input()\nwhile a[0]<1:a.pop(0)\ny=\"\".join(\"2\"+bin(v)[2:]for v in a)\nprint~-2**y.count(\"1\")<<int(y,3)"
    ],
    "product-over-exclusive-and-inclusive-ranges": [
        "y,r=input().split(',')\nt=int(y[1:])+(y[0]<')')\nfor x in range(t+1,int(r[:-1])+(r[-1]>'[')):t*=x\nprint(t)",
        "lambda s:reduce(int.__mul__,range(*eval(s[1:-1]+'+'+`']'in s`))[s<'[':])"
    ],
    "numbering-hierarchical-outlines": [
        "S=[]\nfor r in input().split(\"\\n\"):S=([0]+S)[-len(r):];S[0]+=1;print r[:-1]+`S[0]`",
        "def p(s,i,v,n=1):\n    while i<len(s)and s[i]and'0'not in s[i][:v]:\n        if s[i][v]=='0':s[i]=' '*v+str(n);n+=1;i+=1\n        else:i=p(s,i,v+1)\n    return(s,i)[v!=0]\nz=lambda r:'\\n'.join(p(r.split('\\n'),0,0))",
        "S={'0':0}\nfor w in input().split('\\n'):S[w]+=1;S[' '+w]=0;print w[:-1]+`S[w]`"
    ],
    "interleaving-sequences": [
        "f=lambda a:any(a)and[b[:1]+c for b in a if b for c in f([c[c==b:]for c in a])]or[[]]",
        "def f(A,c=[]):\n if not[f([b[b==x:]for b in A],c+x[:1])for x in A if x]:print c"
    ],
    "recognize-mod-folds": [
        "f=lambda a,i=0:i/len(a)or a[i]in[a[i-1]+1,i,0][i<=max(a)::2]*f(a,i+1)",
        "f=lambda l,r:r==x or l and f(l-1,[t%l for t in r])|f(l-1,r)\nx=input();l=len(x);print+f(l,range(l))"
    ],
    "jimmy-needs-a-new-pair-of-shoes": [
        "o=1;W=[]\nfor g in map(len,input().split('/o\\\\')):W+=[' '*(g-o)];o=max(o-g,0)+2\nfor q in' /o\\ ','_/ \\_':print q.join(W)",
        "o=[-4]\nfor i,c in enumerate(input()):o+=[max(i,o[-1]+5)]*('/'==c)\nfor s in' /o\\ ','_/ \\_':print''.join('%*s'%(b-a,s)for a,b in zip(o,o[1:]))"
    ],
    "is-this-a-valid-shakashaka-solution": [
        "C=eval(input())\nN=next\nE=enumerate\ndef F(x,y,f):\n try:1/-~x/-~y;c=C[y][x];(x,y)in v<Q;n[c]+=1;c&f<1<Q;C[y][x]=0;v[:0]=[(x,y)];[c>>i&1and F(x+i%2*(2-i),y+(i-1&~i),1<<(i^2))for i in(0,1,2,3)]\n except:1\nwhile l:=[(x,y)for y,r in E(C)for x,e in E(r)if e]:\n a=0;v=[];n={k:0for k in range(16)};F(*l[0],15);a=len(v)+n[15];(len(v)!=n[15]or(N(M:=map(max,zip(*v)))-N(m:=map(min,zip(*v)))+1)*(N(M)-N(m)+1)!=a/2)and(a!=4*n[6]*n[12]or n[6]!=n[9]or n[3]!=n[12]or n[0]>0)and z",
        "lambda C:all({'','11','1'*4}>={*bin(65793*(a&3|c&12|d&48|b&192)).split(\"0\")[2:-1]}for\ni,j in p(C,[0]*len(C[0]))for(a,b),(c,d)in p([*zip(i,j)],(0,0)))\np=lambda l,d:zip([d]+l,l+[d])"
    ],
    "how-long-does-it-take-to-paint-a-stick": [
        "def r(s,a):c=s[0];z=c in a;return s[1:]and min([1+r(s[1:],a+c)]+[r(s[1:],a[:a.rfind(c)+1])]*z)or(1-z)\nprint(r(input(),''))",
        "D=lambda s:0 if s=='?'*len(s)else min(1+D(s[:i]+'?'*(j-i)+s[j:])for i in range(len(s))for j in range(i+1,len(s)+1)if set(s[i:j])-set('?')==set(s[i]))",
        "p=lambda s:len(s)and-~min(sum(map(p,s.split(c)))for c in s)"
    ],
    "compute-modular-inverse": [
        "lambda a,b:pow(a,-1,2**b)",
        "lambda x,n:pow(x,2**n-1,2**n)",
        "f=lambda x,n,b=1,i=1:n and f(x,n-1,b-(b&i)*~-x,i+i)or b%i"
    ],
    "pi-calculation-code-golf": [
        "355/113",
        "print \"%.5f\"%(355.0/113.0)",
        "(6*sum(n**-2for n in range(1,9**9)))**0.5",
        "l=q=d=0;t,s,n,r=3.,3,1,24\nwhile s!=l:l,n,q,d,r=s,n+q,q+8,d+r,r+32;t=(t*n)/d;s+=t\nprint s",
        "acos(-1)",
        "p,n,s=3,2,1\nwhile s<99:\n n,s,z=n+2,s+1,4/(n*(n+1)*(n+2))\n if s%2<1:p+=z\n else:p-=z\nprint(p)",
        "_=lambda x,y=1:x^y and y*2-1+y**2/_(x,y+1)or x*2.0+1\nprint 4/_(99)",
        "sum(93555./i**10 for i in[1,2,3])**.1\n    3.1415923154068"
    ],
    "turn-an-integer-n-into-a-list-containing-it-n-times": [
        "a=[];i=input()\nfor _ in\" \"*int(i):a+=(i);\nprint(a)",
        "lambda k:[k]*k"
    ],
    "write-a-function": [
        "f=lambda:0",
        "def f():1"
    ],
    "print-last-inputted-byte": [
        "lambda x:x[-1]",
        "x=lambda a:a[-1]"
    ],
    "average-two-letters": [
        "print(chr(int((ord(input())+ord(input()))/2)))",
        "lambda*A:chr(sum(map(ord,A))/2)",
        "lambda a,b:chr((ord(a)+ord(b))//2)"
    ],
    "greeting-the-user": [
        "a=\"\\n)-*-*-*^_^*-*-*-(\\n\"\nprint a+'| Welcome User! |'+a",
        "print(\")-*-*-*^_^*-*-*-(\\n| Welcome User! |\\n)-*-*-*^_^*-*-*-(\")",
        "print(\")-*-*-*^_^*-*-*-(\\n| Welcome User! |\\n\"*2)[:53]"
    ],
    "find-the-number-of-integers-in-the-range-from-1-to-n-that-ends-with-2": [
        "lambda N:sum(x%10==2for x in range(N+1))",
        "lambda n:(n+8)//10",
        "lambda n:(n+8)/10"
    ],
    "nest-a-string-inside-an-array-n-times": [
        "lambda s,n:eval('['*n+`s`+']'*n)",
        "f=lambda s,n:n and f([s],~-n)or s",
        "__('_=_[_>_]'+';_=[_]'*_[_==_])",
        "N=lambda s,n:n and[N(s,n-1)]or s",
        "def f(a,b):\n if b:f([a],b-1)\n else:print a"
    ],
    "get-rid-of-whitespace-on-otherwise-empty-lines": [
        "lambda l:map(str.rstrip,l)",
        "lambda s:[x.strip()and x for x in s]"
    ],
    "give-a-permutation-with-no-two-consecutive-integers-next-to-each-other": [
        "lambda n:range(1,n,2)+range(0,n,2)",
        "lambda n:[*range(1,n,2),*range(0,n,2)]",
        "lambda n:(range(n|1)*2)[1:n*2:2]"
    ],
    "divisible-strings": [
        "lambda h:print({0}=={*[ord(i)%len(h)for i in h]})",
        "lambda s:all(ord(i)%len(s)<1for i in s)",
        "N=input();print(not sum([ord(i)%len(N) for i in N]))"
    ],
    "simple-complexity": [
        "g=lambda n,i,j,*_:g(n/2,*[~i,j,i,~j][2*(j&n>0)-(i&n>0):])if n*(i&n<=j&n)else'# '[i&n>0]\nr=range(64)\nfor j in r:print''.join(g(32,j,i)for i in r)",
        "for k in range(64):print\"\".join(ord(i)*\" #\"[j%2]for j,i in enumerate('\u0012\u0001\t\u0001\u0002\u0001\u0004\u0001\u0002\u0001\u0001\u0005\u0002\u0002\u0004\u0001\u001b\u0002\b\u0004\u0004\u0007\u0002\u0001\u0003\u0001\u0004\u0002\u0018\u0004\b\u0002\u0006\u0002\u0004\u0001\u0002\u0003\u0001\u0007\u0018\u0001\u0002\u0001\t\u0001\u0007\u0001\u0004\u0005\u0001\u0003\u0001\u0001\u0002\u0001\u0018\u0001\u0002\u0001\u0001\u0003\u0001\u0005\u0003\u0005\u0004\u0001\t\u0001\u0002\u0001\u0018\u0007\u0001\u0003\u0002\u0001\u0002\u0003\u0002\u0001\u0004\u0002\b\u0004\u0018\u0002\u0004\u0001\u0003\u0001\u0002\u0003\u0002\u0001\u0002\u0007\b\u0002\u001b\u0001\u0004\u0002\u0002\u0005\u0003\u0005\u0001\u0001\u0002\u0001\t\u0001\u001a\u0002\u0004\u0001\u0013\u0001\t\u0001\u0002\u0001\u0001\u0005\u0013\u0001\u0004\u0002\u0012\u0002\b\u0007\u0002\u0001\u0013\u0007\u0010\u0004\b\u0002\u0004\u0001\u0002\u0003\u0010\u0003\u0001\u0001\u0002\u0001\u0010\u0001\u0002\u0001\t\u0001\u0004\u0005\u0015\u0001\u0002\u0001\u0010\u0001\u0002\u0001\u0001\u0003\u0001\u0005\u0004\u0001\u0019\u0004\u0010\u0007\u0001\u0003\u0002\u0001\u0004\u0002\u0018\u0002\u0012\u0002\u0004\u0001\u0003\u0001\u0002\u0007\u0019\u0001\u0013\u0001\u0004\u0002\u0002\u0005\u0001\u0001\u0002\u0001\b\u0001\u0002\u0001\u0001\u0005\u0002\u0002\u0004\u0001\u0013\u0001\u0019\u0007\u0002\u0001\u0003\u0001\u0004\u0002\u0012\u0002\u0018\u0002\u0004\u0001\u0002\u0003\u0001\u0007\u0010\u0004\u0019\u0001\u0004\u0005\u0001\u0003\u0001\u0001\u0002\u0001\u0010\u0001\u0002\u0001\u0015\u0005\u0004\u0001\t\u0001\u0002\u0001\u0010\u0001\u0002\u0001\u0001\u0003\u0010\u0003\u0002\u0001\u0004\u0002\b\u0004\u0010\u0007\u0013\u0001\u0002\u0007\b\u0002\u0012\u0002\u0004\u0001\u0013\u0005\u0001\u0001\u0002\u0001\t\u0001\u0013\u0001\u0004\u0002\u001a\u0001\t\u0001\u0002\u0001\u0001\u0005\u0003\u0005\u0002\u0002\u0004\u0001\u001b\u0002\b\u0007\u0002\u0001\u0002\u0003\u0002\u0001\u0003\u0001\u0004\u0002\u0018\u0004\b\u0002\u0004\u0001\u0002\u0003\u0002\u0001\u0002\u0003\u0001\u0007\u0018\u0001\u0002\u0001\t\u0001\u0004\u0005\u0003\u0005\u0001\u0003\u0001\u0001\u0002\u0001\u0018\u0001\u0002\u0001\u0001\u0003\u0001\u0005\u0004\u0001\u0007\u0001\t\u0001\u0002\u0001\u0018\u0007\u0001\u0003\u0002\u0001\u0004\u0002\u0006\u0002\b\u0004\u0018\u0002\u0004\u0001\u0003\u0001\u0002\u0007\u0004\u0004\b\u0002\u001b\u0001\u0004\u0002\u0002\u0005\u0001\u0001\u0002\u0001\u0004\u0001\u0002\u0001\t\u0001<\u0001?\u0002<\u0004<\u0001\u0002\u0001<\u0001\u0002\u0001\u0001\u00038\u00079\u0002\u0004\u0001:\u0001\u0004\u00021\u0005\u0002\u0002\u0004\u00011\u0003\u0002\u0001\u0003\u0001\u0004\u00022\u0001\u0002\u0003\u0001\u00072\u0005\u0001\u0003\u0001\u0001\u0002\u00012\u0001\t\u0001\u0002\u00012\u0002\b\u00040\u0004\b\u00022\u0001\u0002\u0001\t\u00014\u0001\t\u0001\u0002\u0001\u0004\u0001\u0002\u0001\u0001\u0005$\u0002\b\u0004\u0004\u0007\u0002\u0001\"\u0004\b\u0002\u0006\u0002\u0004\u0001\u0002\u0003 \u0001\u0002\u0001\t\u0001\u0007\u0001\u0004\u0005!\u0001\u0002\u0001\u0001\u0003\u0001\u0005\u0003\u0005\u0004\u0001%\u0007\u0001\u0003\u0002\u0001\u0002\u0003\u0002\u0001\u0004\u0002$\u0002\u0004\u0001\u0003\u0001\u0002\u0003\u0002\u0001\u0002\u0007%\u0001\u0004\u0002\u0002\u0005\u0003\u0005\u0001\u0001\u0002\u0001$\u0002\u0004\u0001\u0013\u0001&\u0001\u0004\u0002\u0012\u0002%\u0007\u0010\u0004$\u0003\u0001\u0001\u0002\u0001\u0010\u0001\u0002\u0001(\u0001\u0002\u0001\u0010\u0001\u0002\u0001\u0001\u0003$\u0004\u0010\u0007%\u0002\u0012\u0002\u0004\u0001&\u0001\u0013\u0001\u0004\u0002'))[k<<6:][:64]"
    ],
    "ipv4-integer-conversion-function": [
        "sum((int(j)*4**(4*i)) for i,j in enumerate(input().split('.')[::-1]))",
        "c=lambda x:long(''.join([\"%02X\"%long(i) for i in x.split('.')]),16)",
        "c=lambda x:eval('((('+x.replace('.','<<8)+'))"
    ],
    "plus-or-minus-polyglots": [
        "lambda l:eval(l.replace(' ','-+'[1/2>0]))",
        "1//1;\"\"\"\nf=(l)=>eval(l.join`-`)//\"\"\";f=lambda l:sum(l)",
        "lambda l,*r:l+sum(r)*(1/2>0 or-1)",
        "lambda l:sum(l[:1]+[x*int(1-(1/2)*4)for x in l[1:]])"
    ],
    "reversencode-the-given-string": [
        "lambda s:s[(l:=len(s))//2-1::-1]+s[l//2]*(l&1)+s[:-~l//2-1:-1]",
        "lambda x:x[(l:=len(x)//2)-1::-1]+x[l:-l]+x[:~l:-1]"
    ],
    "disappearing-elements": [
        "X,S=input()\nfor a in X:\n    print S\n    S=S[:a]+S[a+1:]\nprint S",
        "a,b=input();print a\nfor i in b:a.pop(i);print a",
        "s,i=input()\nfor i in i+[0]:print s;s.pop(i)",
        "s,i=input()\nfor j in i+[0]:print s;s=s[:j]+s[j+1:]"
    ],
    "animate-finding-the-middle": [
        "def f(i,j=0):\n print' '*j+i\n if i:f(i[1:-1],j+1)",
        "f=lambda s,p='\\n ':s and s+p+f(s[1:-1],p+' ')"
    ],
    "perfect-squares-without-borders": [
        "lambda t:[k for k in range(t,~-t*t)if k%t>1]",
        "def f(s):\n r=[]\n for i in[i[1:-1]for i in[[(j*s)+i+1 for i in range(s)]for j in range(s)][1:-1]]:r+=i\n return r"
    ],
    "you-are-the-host-of-the-olympics": [
        "L,x=input()\nk='+'+'-'*(L+4)+'+\\n| +'+'-'*L+'+ |\\n'\nf=lambda k:'| |'+k*L+'| |\\n'\nprint k+f(':').join([f(' ')*2]*x)[:-1]+k[::-1]",
        "l,x=input()\no='+--%s--+\\n| +%s+ |\\n'%(('-'*l,)*2)\nprint o+'| |%s| |\\n'*(x*3-1)%((' '*l,' '*l,':'*l)*x)[:-1]+o[-2::-1]",
        "L,x=input()\nfor i in'01'+'223'*~-x+'2210':r=('+|||-   -+||'+L*'-- :')[int(i)::4];print r+r[2::-1]"
    ],
    "cadaddadadaddddaddddddr-linked-list-accessing": [
        "lambda l,c,a=lambda x:x[0],d=lambda x:x[1:]:eval(\"(\".join(d(c))[:-1]+l+\")\"*(len(c)-2))",
        "f=lambda s,x:eval(['%s[1:]','%s[0]','x#%s','%s'][ord(s[0])%4]%'f(s[1:],x)')",
        "lambda r,s:eval(s[:0:-1].translate([\"[1:]\",\"[0]\"]*51))"
    ],
    "an-array-of-challenges-3-moving-averages": [
        "f=lambda n,l:l[n-1:]and[sum(l[:n])/n]+f(n,l[1:])",
        "lambda L,n:[sum(L[i:(i+n)])/n for i in range(len(L)-n+1)]",
        "lambda l,n:[sum(e)/n for e in zip(*[l[i:]for i in range(n)])]",
        "lambda n,A:[sum(A[j:n+j])/n for j in range(-n-~len(A))]"
    ],
    "construct-the-natural-numbers-with-sets": [
        "f=lambda n:[[],n and f(n-1)][:n]",
        "lambda x:\"{{}\"*x+x*\"}\"or\"{}\""
    ],
    "reverse-two-sections-of-a-string-around-a-pivot": [
        "lambda s,p:p.join(s.split(p)[1:]+s.split(p)[:1])",
        "lambda a,b:b.join(a.split(b,1)[::-1])",
        "p,m=input()\nk=m.split(p,1)\nprint k[1]+p+k[0]"
    ],
    "find-distance-between-the-closest-3d-points": [
        "lambda p:min(sum((a-b)**2for a,b in zip(x,y))**.5for x in p for y in p if x!=y)",
        "f=lambda a,*b:[*b]and[min([sum((x-y)**2for x,y in zip(a,q))**.5for q in b]+f(*b))]",
        "lambda l:min(sum((a-b)**2for a,b in zip(l[p],v))**.5for q,v in enumerate(l)for p in range(q))"
    ],
    "display-the-result-of-doing-8-perfect-shuffles-of-a-deck-of-cards": [
        "d=zip(\"23456789TJQKA\"*4,\"CDHS\"*13)\nexec'print d;d[::2],d[1::2]=d[:26],d[26:];'*9",
        "d=[s+[r,`10`][r>\"Q\"]for r in'A23456789ZJQK'for s in\"SCDH\"]\nexec'print d;d=sum(zip(d[:26],d[26:]),());'*9"
    ],
    "bookkeeping-for-the-sex-bob-ombs-check-if-a-running-sum-ever-gets-too-low": [
        "f=lambda a,t:t<=0<(a and f(a[1:],t-a[0]))",
        "f=lambda T,l:all(T<=sum(l[:i])for i in range(len(l)+1))"
    ],
    "sort-spelled-out-serial-numbers": [
        "lambda _:sorted(_,key=lambda L:['zeontwthfofisiseeini'.find(s[:2])/2for s in L])",
        "lambda m:sorted(m,key=lambda r:[int(s,36)%6779%531for s in r])",
        "print(sorted(eval(input()),key=lambda l:int(''.join([str(\"zero one two three four five six seven eight nine\".split().index(i))for i in l]))))",
        "lambda m:sorted(m,key=lambda r:[hash(s)%2249518for s in r])"
    ],
    "is-it-a-doubling-sequence": [
        "lambda l:all(b>=a*2for a,b in zip(l,l[1:]))",
        "f=lambda a,*b:2*a<=b[0]>f(*b)",
        "lambda l:all(l[i-1]*2<=l[i]for i in range(1,len(l)))",
        "lambda l:all(2*l[i]<=l[i+1]for i in range(len(l)-1))"
    ],
    "do-i-have-a-twin-with-permutated-remainders": [
        "lambda x:int('4LR2991ODO5GS2974QWH22YTLL3E3I6TDADQG87I0',36)&1<<x%210",
        "lambda n:n%5!=n%7<5or n%3!=n%5<3or-~n%6/4"
    ],
    "and-and-and-and": [
        "q='\\141\\156\\144'\nl='=l\\141mb\\144\\141 x:'\nexec(f\"f{l}x {q} x[0]+((q+x[:5])*2+q+f(x[4:])if' {q} '==x[:5].lower()else f(x[1:]));g{l}f(' '+x+' ')[1:-1]\")",
        "k=i\u207fput().split();o=[]\nwhile k:w,*k=k;o+=([w],[x:=w.lower(),w,x,w,x])[\"\\x61\\x6e\\x64\"==x]\npri\u207ft(*o)"
    ],
    "decode-a-7-segment-display": [
        "b'~0my3[_p\u007f{'.find",
        "lambda n:'99608231754'[n%41%11]"
    ],
    "search-text-for-a-prefix-and-list-all-its-suffixes-in-the-text": [
        "lambda i,j:[w[len(i):]for w in j.split()if w.find(i)==0]",
        "lambda i,j:[w.split()[0]for w in j.split(i)if len(w)]"
    ],
    "primes-numbers-with-prime-index": [
        "P=p=1;l=[]\nwhile p<82e5/6:l+=P%p*[p];P*=p*p;p+=1\nfor x in l:print l[x-1]",
        "def p(x):\n c=n=2\n for i in range(3,x):\n  c*=i-1\n  if c%i!=0:\n   print(n,i)\n   n+=1"
    ],
    "jfor-more-like-xnor": [
        "lambda a,b:bin(a&b).count('01')==1",
        "def f(x,y):\n\tb=format;z='08b';x=b(x,z);y=b(y,z);a=\"\"\n\tfor i in range(8):a+=str(int(x[i])and int(y[i]))\n\treturn int(a[7])+a.count(\"10\")==2"
    ],
    "additive-primes-amongst-first-x-primes": [
        "p=-input(),0;m=k=1\nwhile sum(p):\n m*=k*k;k+=1;p+=m%k,\n if m%k*p[int(`k`,36)%35]:print k",
        "n,f,P=input(),filter,lambda n:all(n%i for i in range(2,n))\nf(lambda x:P(sum(map(int,`x`)))&P(x),f(P,range(2,n*n))[:n])"
    ],
    "trim-elements-from-the-ends-of-a-list": [
        "f=lambda a,b:a[-1]in b and f(a[:-1],b)or a[0]in b and f(a[1:],b)or a",
        "a,f=input()\nfor i in-1,0:\n while a and a[i]in f:a.pop(i)\nprint a"
    ],
    "elixir-array-syntactic-sugar": [
        "lambda k:\"[\"+''.join(f\"{u}|[\"for u in eval(k))+-~len(eval(k))*\"]\"",
        "lambda s:'['+'|['.join(map(str,eval(s))+[']'])+']'*len(eval(s))",
        "r='%s'\nfor x in input():r%='[%s|%%s]'%x\nprint r%[]"
    ],
    "print-the-prime-factorization-of-the-greatest-common-divisor-of-two-numbers": [
        "i=1\na,b=map(int,raw_input().split())\nwhile b:a,b=b,a%b\nwhile~-a:\n i+=1;j=0\n while a%i<1:j+=1;a/=i\n if j:print`i`+'^'+`j`,",
        "n,m=input(),input()\nf=lambda i:set(filter(lambda x:i%x<1,range(1,i+1)))\ng=max(f(n)&f(m))\np=[]\nwhile g-1:\n p+=[min(filter(lambda x:x>1 and x%2!=(x==2)and not any(map(lambda y:x%y<1,range(2,x))),f(g)))]\n g/=p[-1]\nprint ' '.join(`a`+^+`p.count(a)`for a in set(p))",
        "a,b=map(int,input().split())\nt,g='',1\nwhile g<a:\n g,p=g+1,0\n if a%g+b%g<1:\n  while a%g+b%g<1:a/=g;b/=g;p+=1\n  t+='%d^%d '%(g,p)\nprint(t)",
        "a,b=map(int,input().split())\ns='';p=1\nwhile p<a:\n c=0;p+=1\n while a%p+b%p<1:a/=p;b/=p;c+=1\n if c:s+='%d^%d '%(p,c)\nprint(s)"
    ],
    "decode-a-variable-length-quantity": [
        "f=lambda a:a>[]and a[-1]%128+f(a[:-1])*128",
        "lambda x:int(\"\".join(bin(a|128)[3:]for a in x),2)"
    ],
    "de-interleave-log-lines": [
        "lambda a:sorted(a,key=lambda l:l.split()[0])",
        "a={}\ntry:\n while 1:\n  b=input();c=b.split(\"]\")[0]\n  if 1-(c in a):a[c]=[]\n  a[c]+=[b]\nexcept:[print(e)for k in a for e in a[k]]"
    ],
    "weight-of-the-least-weighted-rod-path": [
        "def f(A,m,n,i=0,j=0):r=i+1<m and f(A,m,n,i+1,j);d=j+1<n and f(A,m,n,i,j+1);return A[i][j]+min(r or d,d or r)",
        "f=lambda A:len(A)>1<len(A[0])and A[0][0]+min(f(zip(*A)[1:]),f(A[1:]))or sum(sum(A,()))"
    ],
    "alienese-cycles": [
        "lambda s:(g:=lambda r,i=1:all(ord(c)%r==~r%2for c in s[:-i])or g(r,i*r)*r)(2)*g(13)",
        "s=k=input();n=1\nwhile 1:\n l=[ord(x)-65for x in s];s=''.join(chr(sum(l[:x+1])%26+65)for x in range(len(l)))\n if s==k:break\n n+=1\nprint(n)",
        "lambda s:                      # xxx\n[ord(c)-65for c in s]          # convert input string to list of alphabet indeces\n(t:=)                          # assign to `t` initially\niter(lambda: ,)                # repeat until t recurs:\n            [sum(t[:j+1])%26   # cumulative sums of `t`\n      for j in range(len(s))]  \n           (t:=)               # reassign to `t`\n1+len([*])                     # length of repeating segment"
    ],
    "are-you-ready-to-meet-the-elite-four": [
        "f=lambda b,r:b==\"\"or any(B in r[0]and f(b[:i]+b[i+1:],r[1:])for i,B in enumerate(b))",
        "f=lambda s,l:l and any(f(s.replace(x,'',1),l[1:])for x in l[0])or''==s",
        "f=lambda a,b:a==[]or any(f(a[x in a[0]:],b[:i]+b[i+1:])for i,x in enumerate(b))"
    ],
    "least-integer-as-a-product-of-given-factors": [
        "f=lambda n,l,x=1:min(f(n,l,x*e)for e in l)if x<n else x",
        "f=lambda n,l:n<2or any(n%x<1and f(n/x,l)for x in l)\ng=lambda n,l:n*f(n,l)or g(n+1,l)"
    ],
    "integer-digits-of-the-arithmetic-tables": [
        "o=input()\nr=range(10)\ng=[['']*10 for i in r]\nfor x in r:\n for y in r:exec('if\"/\"!=o and(o!=\"%\"or x)and(o!=\"**\"or x or y):k=str(y'+o+'x);g[x][y]=k')\nif'/'==o:\n for x in r:\n  for y in r:\n   if x and y%x<1:g[x][y]=str(round(y/x))\nif'**'==o:o='^'\nprint('\\n'.join([' '.join([o]+list(map(str,r)))]+[' '.join([str(q)]+[' 'if len(x)!=1else x for x in g[q]])for q in r]))",
        "a=i=input()\nR=range(10)\nfor z in R:a+=' '+`z`\nprint a\nfor x in R:\n try:\n\td=`x`\n\tfor b in R:c=eval(\"b%s(x*1.)\"%('**',i)[i<'^']);d+=' '+(' ',`int(c)`)[(i<'^'or x+b>0)and c in R]\n except:pass\n print d",
        "p=input()\nr=range(10)\ns=' '\nprint p+s+s.join(map(str,r))\nfor i in r:print str(i)+s+s.join(eval((\"s\",\"str(j\"+p+\"i)\")[i and(j%i==0 and'/'==p or'%'==p)or p in'**+-'and eval(\"j\"+p+\"i\")in r])for j in r)"
    ],
    "dimensional-countdown": [
        "f=lambda n,k:n>1<k and f(n,k-1)+f(n-1,k)or'987654321\\n'[~n:]",
        "c=lambda n,k:k>1and'\\n'.join(c(n-i,k-1)for i in range(n))or'987654321'[-n:]",
        "o=lambda d,n:\"987654321\"[-n:]if d<2else\"\\n\".join([o(d-1,n-x) for x in range(n)])"
    ],
    "generate-gmail-dot-aliases": [
        "g=lambda e:(f\"{''.join(p+t for p,t in zip(((['','.'][s>>i&1]for i in range(len(e)-1,-1,-1))),e))}@gmail.com\"for s in range(2**(len(e)-1)))",
        "@gmail.com"
    ],
    "generate-mathjax-for-the-golden-ratio-continued-fraction": [
        "f=lambda n:'$$\\\\varphi=1+\\ddots$$'if n==0 else f(n-1).replace('\\ddots','\\cfrac{1+\\ddots}')\n# or, with exactly the same length\nx='\\ddots';f=lambda n:'$$\\\\varphi=1+'x+'$$'if n==0 else f(n-1).replace(x,'\\cfrac{1+'x+'}')",
        "lambda n:\"$$\\\\varphi=1+\\%sdots%s$$\"%(\"cfrac1{1+\\\\\"*n+\"d\"[:n],\"}\"*n)"
    ],
    "size-does-matter-at-least-referring-to-bottles": [
        "n=input()/2\nfor c in 4,8:exec\"print c*75;c*=1+.06*n;\"*n",
        "lambda n:[a*(1+.03*n)**i*75for a in 4,8for i in range(n/2)]"
    ],
    "enumerate-derangements": [
        "lambda n:(p for i in range(n**n)if len({*(p:=[j for k in range(n)for j in{i//n**k%n}-{k}])})==n)",
        "f=lambda n,i=0:i/n*[[]]or[[x]+l for l in f(n,i+1)for x in range(n)if~-(x in[i]+l)]"
    ],
    "compute-the-eulerian-number": [
        "t=lambda n,k:n and(n-k)*t(n-1,k-1)-~k*t(n-1,k)or k==0",
        "a=lambda n,m:n>=m>0and(n-m)*a(n-1,m-1)-~m*a(n-1,m)or m<1"
    ],
    "shorten-an-absolute-path": [
        "os.path",
        "i=0\na,c=input()\nb,d=a.split('/')*(a!=c),c.split('/')\nwhile b[:i+1]==d[:i+1]:i+=1\nprint'.'[i:]or min('/'.join(['..']*len(d[i:])+b[i:]),a,key=len)"
    ],
    "find-the-reference-angle": [
        "lambda x:`90-abs(x%180-90)`+' deg'",
        "lambda x:`min(x%180,-x%180)`+' deg'"
    ],
    "is-this-a-rectangle": [
        "lambda l:len({abs(sum(l)/4-z)for z in l})<2",
        "lambda a,b,c,d:g(a,b,c,d)+g(a,c,b,d)+g(a,b,d,c)\ng=lambda a,b,c,d:b+d-a-c==((b-a)*(d-a).conjugate()).real==0"
    ],
    "reciprocal-copycats": [
        "lambda a,b:g(a,b)*g(b,a)\ng=lambda a,b:any(g(a/10,b-(a%10)**-~i)for i in(a*b>0)*range(len(bin(b))))or b==0",
        "lambda a,b:g(a,b)*g(b,a)\ng=lambda a,b,e=1:b==a<1or(b>0<=b-e>=0<a)and(g(a/10,b-(a%10)**e)or g(a,b,e+1))"
    ],
    "generate-the-rummy-sequence": [
        "a=b=0\nexec'a,b=[a-1,b+1,0][a<1:][:2];'*input()\nprint[1]*b+[0]*a",
        "j=(2*input()+.25)**.5-.5\nprint[i/j<j%1for i in range(int(j))]",
        "f=lambda n,i=0:n>i and f(n+~i,i+1)or[1]*n+[0]*(i-n)"
    ],
    "longest-uncommon-substring": [
        "lambda a,b,l=len,r=range:max(l(c)for c in(a[x:y]for y in r(l(a)+1)for x in r(y))if all(c[n:n+2]not in b for n in r(l(c)-1)))",
        "f=lambda b,a,*r:{*zip(a,a[1:])}&{*zip(b,b[1:])}and f(b,*r,a[1:],a[:-1])or len(a)",
        "f=lambda a,b,s=1:a>''and+max(f(a[1:],b,a[:2]in b or-~s),s)"
    ],
    "lets-move-the-mars-rover": [
        "N,E,S,W=q='NESW'\nx,y,d=input()\nd=q.find(d)\nfor c in raw_input():exec['d+','d-','yx'[d%2]+'+-'[d/2]]['RL'.find(c)]+'=1;d%=4'\nprint`x`+','+`y`+','+q[d]",
        "q='NESW';x,y,d=raw_input().split(',');x=int(x);y=int(y);d=q.find(d);v={0:'y+',1:'x+',2:'y-',3:'x-'}\nfor c in raw_input():exec['d+','d-',v[d]]['RL'.find(c)]+'=1;d=d%4'\nprint`x`+','+`y`+','+q[d]",
        "S,W,N,E=0,1,2,3;a,b,d=input();v=[b,a]\nfor c in map(ord,raw_input()):d+=c%23;v[d&1]+=c%2*~-(d&2)\nprint'%d,%d,%s'%(v[1],v[0],'SWNE'[d&3])",
        "I=input\na,b,D=I().split(',')\nw='ENWS'\nd=w.find(D)\nx=int(a)+int(b)*1j\nfor c in I():x+=(c=='M')*1j**d;d+='ML'.find(c)\nprint(x.real,x.imag,w[d%4])",
        "input =  raw_input(\"Initial: \")\ninput2 = raw_input(\"Command: \")\n\nposition = [int(input[0]), int(input[2]), input[4]]\n\nbearings = \"NESW\"\nturns = {\"L\" : -1, \"M\": 0, \"R\" : 1}\nmove = {\"N\" : [0, 1], \"E\" : [1, 0], \"S\" : [0, -1], \"W\" : [-1, 0]}\n\nfor c in input2:\n    turn = turns[c];\n    if (turn == 0):\n        position[0] += move[position[2]][0]\n        position[1] += move[position[2]][1]\n    else:\n        position[2] = bearings[(bearings.index(position[2]) + turn)%4]\n\nprint \"Output: \", ','.join((str(s) for s in position))",
        "m=['N','E','S','W']\ncords=[int(n) for n in input().split()] + [input()] #Convert first inputs to integers and retrieve third\nfor n in input(): #Get instructions\n    if n=='M':\n        i=[1,0][cords[2] in m[1:3]] #See if vertical or horizontal\n        j=[-1,1][cords[2] in m[0:2]] #See if negative or positive\n        cords[i]+=j\n    else:\n        i=[-1,1][n=='R'] #Translate turn to numerals\n        cords[2]=m[m.index(cords[2])+i] #Change direction relative to current orientation\nprint(cords)"
    ],
    "bleeeet-bleeeet-bl-bleet": [
        "def f(s):\n b=[];t='';f=[];a=list.append\n for c in s:\n  if c.isalpha():t+='e'\n  else:\n   if t:a(b,t);t=''\n    a(b,c)\n if t:a(b,t)\n for i in b:\n  i=[*i]\n  if i[0]=='e':\n   i[0]='B';i[-1]=[i[-1],'t'][len(i)>2]\n   if len(i)>2:i[1]='l'\n  a(f,''.join(i))\n return ''.join(f)",
        "def f(s,r='',l=-3):\n for c in s+'\\0':\n\tif c.isalpha():l+=1\n\telse:r+=('Bl%st'%('e'*l))[:l+3*(l>=0)]+c;l=-3\n print r"
    ],
    "binary-substrings": [
        "lambda n:sum(bin(i)[2:]in bin(n)for i in range(n))",
        "lambda n:len({int(n[i:j+1],2)for i in range(len(n))for j in range(i,len(n))}-{0})"
    ],
    "counting-in-pyramids": [
        "lambda L:[sum(x==max(L[i:j])for j in range(len(L)+1)for i in range(j))for x in L]",
        "def f(L):\n if L:i=L.index(max(L));L=f(L[:i])+[~i*(i-len(L))]+f(L[i+1:])\n return L"
    ],
    "implement-swap-encoding": [
        "def f(s):\n if s:t=s[1:];i=t.find(s[0]);return s[0]+f([t,s[i::-1]+t[i+1:]][i>0])\n return s",
        "f=lambda s,i=0:i<len(s)and f(i<(j:=s[i+1:].find(s[i])+i+1)and s[:i]+s[j:i:-1]+s[j:]or s,i+1)or s",
        "f=lambda s:s and s[0]+f(s[(j:=abs(s.find(s[0],1)))-1:0:-1]+s[j:])"
    ],
    "format-the-given-number-of-bytes-to-a-human-readable-format": [
        "f=lambda n,i=0:\"%.1f%cB\"%(n,\" kMG\"[i])*(n<1e3)or f(n/1e3,i+1)",
        "n=input();m=0;f=1e3\nwhile n>=f:n/=f;m+=2\nprint\"%.1f%s\"%(n,'B kBMBGB'[m:m+2])",
        "C=lambda v:min(['%.1f %sB'%(x,u)for x,u in[(v/1000.0**i,'bkMG'[i])for i in range(4)]if x>=1]).replace('.0 b',' ')if v else'0 B'"
    ],
    "help-my-son-find-his-letters": [
        "f=lambda o,s,S='':s and f(o[s[0]==o[0]:],s[1:]+s[:s[0]!=o[0]],S+s[0])or S",
        "f=lambda o,s:o and s[0]+f(o[s[0]==o[0]:],s[1:]+s[0]*(s[0]!=o[0]))",
        "s,t=input()\nfor c in s*99:\n if c in t:print c;t=t.lstrip(c)"
    ],
    "a-twist-of-a-trivial-sequence": [
        "f=lambda n,k=3:k>n or n%k and f(n,k+2)or(f(k-1)+f(k+1))*f(n/k)",
        "g=lambda n,k=3:(n&~-n<1)or n%k and g(n,k+2)or(g(k+1)+g(k-1))*g(n/k,k)"
    ],
    "help-me-with-my-polyrhythms": [
        "def f(r,l):\n     c='.';d=' ';M,R,L=[r*l*[d]for _ in d*3]\n     for i in range(r*l):\n      if i%r<1:L[i]=M[i]=c\n      if i%l<1:R[i]=M[i]=c\n      if r<R.count(c)and l<L.count(c):R[i]=L[i]=M[i]=d;break\n     print d,i*'-','\\nR',''.join(R),'\\nL',''.join(L),'\\nM',''.join(M)",
        "a,b=input();n=a\nwhile n%b:n+=a\nfor i in-1,1,2,3:print'_RLM '[i],''.join(' -'[i%2>>m*a%n|i/2>>m*b%n]for m in range(n))"
    ],
    "conways-prime-game": [
        "f=lambda n,k=2:n and f(n-1,[k*a//b for a,b in zip(b\"\u0011N\u0013\u0017\u001dM_M\u0001\u000b\\r\u000f\u000f7\",b\"[U3&!\u001d\u0017\u0013\u0011\\r\u000b\u000e\u0002\u0001\")if k*a%b<1][0])or k",
        "f=lambda n:2>>n*2or[f(n-1)*t//d for t,d in zip(b\"\u0011N\u0013\u0017\u001dM_M\u0001\u000b\\r\u000f\u000f7\",b\"[U3&!\u001d\u0017\u0013\u0011\\r\u000b\u000e\u0002\u0001\")if f(n-1)*t%d<1][0]"
    ],
    "evaluate-a-dice-10-000-roll": [
        "L.count",
        "lambda r:100*sum(c/3*((v<2)*9+v)+c%3*(v<2or(v==5)/2.)for v,c in enumerate(map(r.count,range(7))))",
        "lambda r,C=list.count:sum([x%7*100,1e3][x%7<2]*(C(r,x%7)>2and not exec('r.remove(x%7);'*3))for x in range(14))+50*C(r,5)+100*C(r,1)"
    ],
    "calculating-total-slots": [
        "f=lambda a,b=[]:a and f(*[a[1:],a,a[:1]+b,[b]+b][a[0]in b[:2]::2])or len(b)",
        "r=[]\nfor x in input():\n while x in r[-2:]:r+=r,\n r+=x,\nprint len(r)",
        "lambda a:len(reduce(lambda b,c:b+[c]*-~((c in b[-2:])+(c in b[-1:])),a,[]))"
    ],
    "is-this-sequence-graphic": [
        "l=input()\nwhile any(l):l.sort();l[~l[-1]]-=1;l[-1]-=1",
        "def f(x):p=x[0]+1;x=sorted(x+[0]*p)[::-1];return~x[-1]and(p<2or f(sorted([a-1for a in x[1:p]]+x[p:])[::-1]))"
    ],
    "the-unholy-numbers": [
        "lambda s:sum(min([9e999]+[abs(i-j)for j,c in enumerate(s)if c in'04689'])for i in range(len(s)))",
        "def f(s):\n l=range(len(s))\n r=[min(i)for i in zip(*[[abs(j-i)for j in l]for i in l if s[i]in'46890'])]\n return sum(r)if r else'\u221e'"
    ],
    "integer-goes-back-and-forth-through-time": [
        "def f(n):d=len(str(n))-1;l=10**d;return 0if n<1else(n<l*4and[73,88,67,77,263,242,252,438,417,427][d]+f(n-l))or(l<=n//9and[161,155,144,340,505,494,690,855,844][d]+f(n-9*l))or(n<l*5and[159,164,135,338,514,485,688,864,835][d]+f(n-4*l))or[86,76,68][d%3]+(d//3*175)+f(n-5*l)",
        "def p(n=int(input()),r=range):return sum([f*g for f,g in zip([abs(((n-4)%5)-1)]+[t for T in zip([((n+10**g)//(10**g*5))%2for g in r(10)],[(n%(10**g*5))//(10**g*4)+max((n%(10**g*5)%(10**g*4)+10**(g-1))//(10**g),0)for g in r(1,10)])for t in T],[73,86,88,76,67,68,77,261,263,251,242,243,252,436,438,426,417,418,427])])",
        "def g(m):x=0;r=[73,86,88,76,67,68,77,261,263,251,242,243,252,436,438,426,417,418,427,0,0];return sum([b%5%4*r[i+(i*1)]+((b==9)*(r[i+(i*1)]+r[(i+1)*2]))+((b==4)*(r[i+(i*1)]+r[i+1+(i*1)]))+((b in [5,6,7,8])*r[i+1+(i*1)])for i,b in enumerate(map(int,str(m)[::-1]))])"
    ],
    "decomposition-of-a-matrix-in-sl-2-mathbbz": [
        "def f(a,b,c,d,l=''):\n while c:\n  while 0>a or b<0:a,b,c,d=c,d,-a,-b;l+='S'\n  if c:q=-a//c;a+=q*c;b+=q*d;l+='T'*-q\n return l+'T'*b",
        "g=lambda z,w:(z/w).real>0and'T'+g(z-w,w)or z+w*w and'S'+g(w,-z)or''"
    ],
    "surjection-from-one-string-to-two-strings": [
        "lambda s:(s.split(\"1\"+len(s)/2*\"0\")*2)[:2]",
        "lambda s:(s.split('_x'+s.count('x')/2*'x')+[''])[:2]"
    ],
    "recam%c3%a1ns-duplicates": [
        "k=input();n=0;l=n,\nwhile k:n+=1;x=l[-1]-n;u=x+2*n*(x<1or x in l);k-=u in l;l+=u,\nprint l[n]",
        "n=input()\nl=[];d=x=0\nwhile n:d-=1;l+=x,d;x+=[d,-d][x+d in l];n-=x in l\nprint x"
    ],
    "we-do-tower-hopping": [
        "def f(a):\n i={0};l=len(a)\n for j in range(l):\n\tfor q in{0}|i:\n\t if q<l:i|=set(range(q-a[q],q-~a[q]))\n\t if max(i)/l:return-~j",
        "lambda a:a and(a[0]and-~min(f(a[k+1:])for k in range(a[0]))or 1e999)or 0"
    ],
    "legalize-reversed-date": [
        "z=input().split(\"-\");r=[x[::-1]for x in z];z[1]=r[1]if r[1]<'12'else '12';z[0]=r[0]if r[0]<'31'else '30'if z[1]=='11'else '31';z[2]=r[2];print \"-\".join(z)",
        "lambda x:[min(x[0][::-1],['31','30'][x[1]=='11']),min(x[1][::-1],'12'),x[2][::-1]]"
    ],
    "sequence-of-integer-square-roots": [
        "s=[]\nexec'x=q=1\\nwhile(x in s)+q%1:x+=1;q=(v+x)**.5\\nv=q;s+=x,;'*input()\nprint s",
        "t,=s=1,\nfor n in~-input()*s:\n while(n in s)+(t+n)**.5%1:n+=1\n s+=n,;t=(t+n)**.5\nprint s",
        "t,=r=1,;exec\"x=1\\nwhile(t+x)**.5%1or x in r:x+=1\\nr+=x,;t=(t+x)**.5;\"*~-input();print r"
    ],
    "write-the-shortest-program-to-check-if-a-binary-tree-is-balanced": [
        "lambda A:A==[]or(abs(D(A[1])-D(A[2]))<2)*f(A[1])*f(A[2])\nD=lambda A:A>[]and-~max(map(D,A[1:]))",
        "b=lambda t:((max(l[0],r[0])+1,abs(l[0]-r[0])<2)if(l:=b(t[1]))[1]and(r:=b(t[2]))[1]else(0,0))if t else(0,1)\nh=lambda t:b(t)[1]"
    ],
    "progression-of-matrix-columns": [
        "n,x=input()\na=i=1\nexec\"print(([0]*i+range(a,a+i))*n)[n];a+=i;i+=1;\"*x",
        "lambda n,x:[n/y%2*(n%y+y*~-y/2+1)for y in range(1,x+1)]"
    ],
    "ordinal-string-check": [
        "lambda v:'hsnrhhhhhh'[(v[-4:-3]!='1')*int(v[-3])]in v",
        "lambda s:'tsnrthtddh'[min(4,int(s[-3])*(('0'+s)[-4]!='1'))::5]==s[-2:]",
        "lambda s:(a+'t'*10+a*8)[int(s[-4:-2]):][:1]==s[-2:-1]\na='tsnr'+'t'*6"
    ],
    "sevens-cycle-sum-sequence": [
        "lambda s:s.strip('05')and''.join(`(c>'0')*2`for c in s)+'0'or s",
        "lambda n:[''.join('02'[x>'0']for x in`n`)+'0',n][set(`n`)<=set('05')]"
    ],
    "counting-fountains": [
        "f=lambda n,p:sum([f(n-p,q)for q in range(1,p+2)])if p<n else int(p==n)\nt=lambda n:f(n,1)",
        "f=lambda n,i=0:sum(f(n-j,j)for j in range(1,i+2)[:n])or 1"
    ],
    "undirect-a-graph": [
        "l=list;g=l(map(set,eval(input())))\nfor i in range(len(g)):\n    for j in g[i]:g[j]=g[j]^g[j]&{j}|{i}\nprint(l(map(l,g)))",
        "def u(g):e=enumerate;o=[set(_)-{i}for i,_ in e(g)];[o[j].add(i)for i,_ in e(o)for j in _];print map(list,o)"
    ],
    "create-an-abacaba-city": [
        "f=lambda n,s=1:n*\"'\"and\"  _\"*s+f(n-1,0)+\"_\"*(n-2)+\"\\n%c|%s|\"%(64+n,\"_\"*n)+f(n-1,0)",
        "f=lambda n:n*[n]and f(n-1)+[n]+f(n-1)\nL=f(input('  _\\n'))\nfor i,j in zip(L,L[1:]+L):print'%c|%s|'%(64+i,'_'*i)+'_'*(j+~i)",
        "b=1;i=2**input('  _\\n')-1\nwhile i:i-=1;a=len(bin(i&-i))-2;print'%c|%s|'%(64+b,'_'*b)+'_'*(a+~b);b=a"
    ],
    "extract-a-string-from-a-given-string": [
        "s,i=input(),input();a,b=s.find(i[0]),s.find(i[2]);print('\"'+('null',[s[a+1:b],s[b+1:a]][b<a])[(s.count(i[0])==s.count(i[2])==1)*(a!=b)*(a*b>-1)]+'\"')",
        "x=input()\na=input()\na,b=a[0],a[2]\nif(a!=b)&(x.count(b)==x.count(a)==1):\n if x.index(a)>x.index(b):q=a;a=b;b=q\n print('\"'+x.split(a)[1].split(b)[0]+'\"')\nelse:print('\"null\"')",
        "s,n,a,b=[input(),'null']+list(input())[::2];q,w=[s.find(a),s.find(b)];print('\"'+{0>1:n,0<1:s[min(q,w)+1:max(q,w)],a==b:n}[s.count(a)==s.count(b)==1]+'\"')"
    ],
    "partition-a-map-of-water-flows": [
        "t=map(int,open('a').read().split());n=t.pop(0);q=n*n;r,b,u=range(q),[1]*q,1\nwhile u!=0:\n    u=0\n    for j in r:\n        d=min((t[x],x)for x in [j,j-1,j+1,j-n,j+n]if int(abs(j/n-x/n))+abs(j%n-x%n)<=1 and x in r)[1]\n        if j-d:u|=b[j];b[d]+=b[j];b[j]=0\nfor x in sorted(b)[::-1]:print x or '',",
        "def f(x,m=[],d=[],s=[]):\n n=[e[a]if b else 99for a,b in(x-1,x%z),(x+1,x%z<z-1),(x-z,x/z),(x+z,x/z<z-1)];t=min(n)\n if t<e[x]:r=f(x+(-1,1,-z,z)[n.index(t)])[0];s[r]+=x not in m;m+=[x]\n else:c=x not in d;d+=[x]*c;r=d.index(x);s+=[1]*c\n return r,s\nz,e=input(),[]\nexec'e+=map(int,raw_input().split());'*z\nfor x in range(z*z):s=f(x)[1]\nprint' '.join(map(str,sorted(s)[::-1]))"
    ],
    "chocolate-numbers": [
        "f=lambda n:n<1or n*f(n-1);a=lambda m,n,c=lambda m,n:sum(f(m*n-2)/f(i*n-1)/f((m-i)*n-1)*a(i,n)*a(m-i,n)for i in range(1,m)):+(m+n<4)or c(m,n)+c(n,m)",
        "C=lambda A:sum(C(A[:i]+A[i+1:]+[(c,H),(W-c,H)])for i,Q in enumerate(A)for W,H in(Q,Q[::-1])for c in range(1,W))or 1\nprint C([input()])"
    ],
    "rebuilding-an-ascii-city": [
        "n=input()\nk=-~n/2\nfor i in range(k+2):\n s=\"\";p=j=1\n while~n+j:a=(j%3<1)+(j%5<1)+(j%10<1)+(p%j<1);s+=\" |+  -  - |+   \"[(i>=a)+(i in{a,k+1})::3];p*=j*j;j+=1\n print s",
        "I=input()\nR=range\nB=[(-~I/2)-(x%3<1)-(x%5<1)-(x%10<1)-(~all([x%a for a in R(2,x)]or[x==2])+2)for x in R(1,I+1)]\nE='+--+'\nO=['\\n']*I\nfor r in R(I):\n for h in B:O[r]+=['|  |',' '*4,E][(r==h)+(r>=h)]\nprint ''.join(O[::-1])+'\\n'+E*I"
    ],
    "2-dimensional-bubble-sort": [
        "G=input()\nO=e=enumerate\nwhile O!=G:\n O=eval(`G`)\n for i,k in e(G):\n\tfor j,l in e(k):v,x,y=min((G[i+x/2][j+x%2],x&1,x/2)for x in(0,1,2)if i+x/2<len(G)and j+x%2<len(k));G[i][j],G[i+y][j+x]=v,l\nprint G",
        "m=input()\nh=len(m);w=len(m[0])\nwhile 1:\n M=eval(`m`)\n for k in range(h*w):i,j=k/w,k%w;v,b,a=min([(M[x][y],y,x)for x,y in(i,j),(i+(i<h-1),j),(i,j+(j<w-1))]);M[i][j],M[a][b]=M[a][b],M[i][j]\n M!=m or exit(M);m=M"
    ],
    "cell-phone-keyboard-typing": [
        "def f(i):\n d=dict(zip(\"0123456789\",\" 0|.?!1|ABC2|DEF3|GHI4|JKL5|MNO6|PQRS7|TUV8|WXYZ9\".split(\"|\")))\n s,x,j='',i[0],0\n for c in i[1:]+'#':\n  if c==x:j+=1\n  else:\n   if x>'/':s+=d[x][j%len(d[x])]\n   j=0\n  if c=='*':s=s[:-1]\n  x=c\n return s",
        "a=reduce(lambda q,w:q+\" \"+[w,\"\"][w==\"#\"]if q[-1]!=w else q+w,raw_input()).split()\nwhile \"*\" in a:del a[a.index(\"*\")-1:a.index(\"*\")+1]\nprint\"\".join([(lambda a:a[len(q)%len(a)-1])(\" 0:.?!1:ABC2:DEF3:GHI4:JKL5:MNO6:PQRS7:TUV8:WXYZ9\".split(\":\")[int(q[0])])for q in a])"
    ],
    "dead-frog-walking": [
        "m=input()\nexec\"\"\"for i,r in enumerate(m):\n d=-int(min('1',r[-1]));q=r[d*2]\n if m[i+1:]:r=sum([r[d+1:d-1],[[q,' '][q<'L']]][::d-~d],[])+r[-1:]\n if'F'in r:j=r.index('F');r[j]='L';m[i-1][j]=min('F',m[i-1][j])\n m[i]=r\n\"\"\"*~-len(m)\nprint'F'in m[0]",
        "s=input();x=s[-1].find('F');L=len(s[0]);i=k=1\nfor l in s[-2:0:-1]:d=('<'in l)%-2|1;k*=l[(x-d*i)%L]>'0'>-1<x+d<L;x+=d;i+=1\nprint k"
    ],
    "make-me-a-pizza": [
        "n,t=eval(input())\nk=n+1\ny=print\ni=0\nf,s,e,b,p=\"/ =\\\\|\"\nt+=s*99\ny(s+f+e*~-n+b)\nif n>4:y(f+t[:k]+b);i+=k\ny(p+t[i:i+k]+p);i+=k\nif~-n%2:y(p+t[i:i+k]+p);i+=k\nif n>4:y(b+t[i:i+k]+f);i+=k\ny(s+b+e*~-n+f)",
        "n,t=input()\ny=n+1\ns=' '\nl=' /'+'='*(n-1)+'\\\\ '+('','\\n/'+s*y+'\\\\')[n>4]+'\\n|'\nprint l+t[:y].center(y,s)+('','|\\n|'+t[y:].center(y,s))[y%2]+l[::-1]"
    ],
    "create-an-ascii-line-given-a-length": [
        "for i in range(int(input())):print(' '*i+'\\\\')",
        "f=lambda n,s=\"\\\\\\n\":n*s and s+f(n-1,' '+s)",
        "x='\\\\'\nexec'print x;x=\" \"+x;'*input()"
    ],
    "implement-a-zipwith-function": [
        "lambda f,*a:[f(*t)for t in zip(*a)]",
        "lambda*l:[*map(*l)]"
    ],
    "talk-interpreter": [
        "f=lambda a,c:f([a,1,0,a][int(c[:2],2)],c[2:])if c else a",
        "def f(a,b):\n    c=a\n    for i in range(0,len(b)-1,2):\n        c=(not b[i])*(c or b[i] or b[i+1]) or c*b[i]*b[i+1]\n    return c",
        "lambda l:[y for*x,y in l if[y]!=x][-1]",
        "f=lambda a,s:s and f([s[1],a][s[0]==s[1]],s[2:])or a"
    ],
    "find-the-minimum-and-maximum-integers-in-an-array-without-using-builtins": [
        "lambda s:s[s.sort():1]+s[-1:]",
        "def k(s):\n d=s[0]\n if s[1:]:\n  a,b=k(s[1:])\n  return(a+d+abs(a-d))/2,(b+d-abs(b-d))/2\n return d,d",
        "def m(a):\n d=a[0]\n if len(a)==1:return d,d\n b,c=m(a[1:])\n if b>=d>=c:return b,c\n if d>b:return d,c\n return b,d",
        "x=sorted(input());print x[0],x[-1]",
        "lambda s:s.sort()or[s[0],s[-1]]",
        "lambda s:sorted(s+s[:1])[::len(s)]"
    ],
    "detect-the-zeroless-numbers": [
        "n=input();v=0\nwhile n:v+=1;n-=min(`v`)>'0'\nprint v",
        "f=lambda n:n and~-n%9+1+f(~-n/9)*10",
        "lambda n:[k for k in range(2*n)if('0'in`k`)<1][n]",
        "n=input()\ni=0\nwhile n:i+=1;n-=1-('0'in`i`)\nprint i"
    ],
    "implement-the-hyperfactorial": [
        "f=lambda n:n<1or n**n*f(n-1)",
        "z=lambda k,a=1: z(k-1,a*k**k) if k else a"
    ],
    "draw-an-ascii-grid": [
        "lambda n:([(\"+--\"*n)[1:],\"  |\"*~-n]*n)[1:]",
        "lambda n:f\"-{'-+-'*~-n}-\\n\".join([f\" {' | '*~-n} \\n\"]*n)",
        "lambda n:f'\\n{\"--+\"*~-n}--\\n'.join(['  |'*~-n]*n)"
    ],
    "calculate-golden-ratio": [
        "(1+5**.5)/2",
        "ratio=(1+5**(1/2))/2\nprint(ratio)",
        ".5+5**.5/2"
    ],
    "create-an-accurate-how-to-article": [
        "p=print\na=input()[9:-1]\nn=id(a)%99%10+1\ns=\"Step %d - %%s.\"\np(f\"How to {a} in {n} easy ste{'ps'[:n]}!\\n\")\nfor i in range(1,n):p(s%i%f\"Do not {a}\")\np(s%n%a.capitalize())",
        "x=input()[9:-1]\nn=id(0)%19/2+1\ni=1\nprint'How to %s in %d easy ste%s!\\n'%(x,n,'ps'[:n])\nexec\"print'Step %d -'%i,('Do not %s.'%x)[i/n*7:].capitalize();i+=1;\"*n"
    ],
    "number-of-coins-needed-to-make-change": [
        "f=n=>n&&(n%10)**29%3571%4+f(n/10|0)",
        "f=lambda n:n and n/5%2-n%5/-2+f(n/10)",
        "f=lambda x:x and int(\"0112212233\"[x%10])+f(x/10)"
    ],
    "spell-out-the-revua": [
        "f=lambda s:s and f(s[:-1])+\" \"+s",
        "b='';y=input()\nfor a in range(len(y)):b+=y[a];print(b)",
        "f=lambda s:f(s[:-1])+[s]if s else[]"
    ],
    "count-the-number-of-vowels-in-each-word-of-a-string": [
        "for x in input().upper().split():\n p=0\n for y in x:\n  if 1065233>>(ord(y)-65)&1:\n   p+=1\n print(p,end=\" \")",
        "print' '.join(`sum(y in'aeiouAEIOU'for y in x)`for x in raw_input().split())",
        "print(*[sum(c in'aeiouAEIOU'for c in w)for w in input().split()])"
    ],
    "number-of-pieces-on-a-checkers-board": [
        "lambda n:~-n/2*n+1>>1",
        "n=int(input());print(((n-1)//2*n+1)//2)"
    ],
    "ascii-meme-arrow-generator": [
        "n=range(int(input()))\nfor i in n:print(' '*i+'\\\\')\nfor i in n:print(' '*(n[-1]-i)+'/')",
        "lambda n:'\\n'.join([' '*i+'\\\\'for i in range(n)]+[' '*(n+~i)+'/'for i in range(n)])",
        "def a(n):l=\"for i in range(n):print' '*\";exec l+\"i+'\\\\\\\\'\\n\"+l+\"(n+~i)+'/'\"",
        "f=lambda n,s='':n and f(n-1,~-n*' '+'\\\\\\n'+s+~-n*' '+'/\\n')or s",
        "lambda n:'\\n'.join([' '*i+'\\\\'for i in(r:=range(n))]+[' '*(n+~i)+'/'for i in r])",
        "f=lambda n,i=\"\":n and i+\"\\\\\\n\"+f(n-1,i+\" \")+i+\"/\\n\"or\"\"",
        "f=lambda n,p='':n*'?'and p+'\\\\\\n'+f(n-1,p+' ')+p+'/\\n'"
    ],
    "how-many-partitions-do-i-have": [
        "lambda n:len(p(n))\np=lambda n,I=1:{(n,)}|{y+(x,)for x in range(I,n/2+1)for y in p(n-x,x)}",
        "lambda n:n<1or sum(sum(i*((n-k)%i<1)for i in range(1,n+1))*p(k)for k in range(n))/n",
        "f=lambda n,k=1:1+sum(f(n-j,j)for j in range(k,n/2+1))"
    ],
    "undulant-numbers": [
        "def u(x):l=[cmp(i,j)for i,j in zip(`x`,`x`[1:])];print x>9and all([i*j<0 for i,j in zip(l,l[1:])])and l!=[0]",
        "def f(x):d=[cmp(*i)for i in zip(`x`,`x`[1:])]if x>9 else[0];n=d[0]>0;return all(i<0 for i in d[n::2])&all(i>0 for i in d[n<1::2])",
        "c=lambda r,t:len(r)<2 or(cmp(*r[:2])==t and c(r[1:],-t))\nu=lambda x:x>9and c(`x`,cmp(*`x`[:2])or 1)",
        "def undulant(x):\n    x = `x`\n    return any((int(x[1])-int(x[0]))*-1**i*(int(x[i])-int(x[i-1]))>0 for i in range(2,len(x)))",
        "a=raw_input()\nprint{cmp(a[i+1],a[i])for i in range(len(a)-1)}=={-1,1}",
        "g=lambda a,b:all(x>y for x,y in zip(a,b))\nu=lambda D:g(D[::2],D[1::2])&g(D[2::2],D[1::2])\ndef U(n):D=map(int,str(n));return(n>9)&(u(D)|u([-d for d in D]))",
        "undulate = (lambda n: n > 9\n            and all(cmp(*digits) == (i % 2) * 2 - 1\n                    for i, digits\n                    in enumerate(zip(min(`n`,`n`[1:]), \n                                     max(`n`,`n`[1:])))))",
        "def f(a):z=[cmp(*x)for x in zip(a[1:],a)];return{(a&b)-(a^b)for a,b in zip(z[1:],z)}=={3}"
    ],
    "multiplicative-persistence-2": [
        "d=[]\nfor x in range(input()):d+=x<10or-~d[eval('*'.join(`x`))],\nprint d.index(max(d))",
        "lambda n:max(range(n),key=g)\ng=lambda x:x<10or-~g(eval('*'.join(`x`)))"
    ],
    "distinct-sieves": [
        "f=lambda l:l and[l.pop(0)in l]+f(l)",
        "lambda n:[n.pop(0)in n for x in n*1]"
    ],
    "shorter-than-a-split-second": [
        "def g(l):\n i=j=0;o=[]\n for e in l:\n  if l[:i].count(e)==1:o+=[l[j:i]];j=i+1\n  i+=1\n return o+[l[j:]]",
        "l=[[]];p=[]\nfor x in input():p+=[x];b=p.count(x)==2;l+=[[]]*b;l[-1]+=[x][b:]\nprint l",
        "def s(a):z=len(a);x=[-1]+sorted({[i for i in range(z)if a[i]==n][1]for n in a if a.count(n)>1})+[z];return[a[x[i]+1:x[i+1]]for i in range(len(x)-1)]"
    ],
    "the-program-that-will-find-the-next-prime-number": [
        "def g(b):\n while 1:\n  b+=1\n  for i in range(2,b):\n   if b%i<1:break\n  else:return b",
        "f=lambda n,k=1,m=1:m%k*k>n or-~f(n,k+1,m*k*k)",
        "def f(n):\n while 1:\n    n+=1\n    if[i for i in range(1,n)if n%i<1]==[1]:return n"
    ],
    "sign-that-word-2": [
        "c=1\nfor d in(input__+'~')*26:print(end=d[ord(d)&31^c:]);c+=d>'z'",
        "l=[0]*123\nfor e in raw_input():l[ord(e)]+=1\nprint''.join(chr(j)*l[j]for i in range(26)for j in(i+65,i+97))",
        "s=input()\nprint(\"\".join(d*(ord(d)&31==c)for c in range(27)for d in s))",
        "i=input();i,x=map(list,(i,i.lower()))\nwhile x:q=min(x);x.remove(q);q=[q.upper(),q][q in i];i.remove(q);print(q,end=\"\")",
        "z=['']*42\nfor c in input():z[ord(c)&31]+=c\nprint(*z,sep='')"
    ],
    "digital-diversity": [
        "n=r=input();k=2\nwhile k<n:r=r*n+k;k+=1\nprint r",
        "f=lambda n,k=1:n*(n<k+2)or-~f(n,k+1)*n-k"
    ],
    "interpret-p-code": [
        "p,i=input()\nfor c in p:n=i.pop(0);print all(n%k for k in range(2,n))if c>'+'else n+i.pop(0)",
        "l,p=input()\ni=j=0\nwhile len(l)-i:print(int(all(l[i]%k for k in range(2,l[i])))if p[j]=='p'else l[i]+l[i+1]);i+=1+'p+'.find(p[j]);j+=1"
    ],
    "hello-permutations": [
        "lambda t='lambda t=%r:t%%t#Helo,Puins!':t%t#Helo,Puins!\nlambda s:s ##!!%%%%'',,:==HHPPaabdeeiilllmnnoorttttttuu\nlambda:'Hello, Permutations!'## !%%%%,:==HPabdilnsttttu",
        "exec(l:=\"input('exec(l:=%r)'%l)#Ho, Pmutationsp!\")"
    ],
    "visualize-nested-array": [
        "p=lambda l,d=1:[p(i,d+1)if isinstance(i,list)else print(\"-\"*d+\">\"+i)for i in l]",
        "f=lambda o,d=0:o<''and'\\n'.join(f(e,d+1)for e in o)or'-'*d+'>'+o"
    ],
    "calculate-covid-spread": [
        "f=lambda a,e=enumerate:all(map(all,a))or-~f([[1in[0,*r][j:j+3]+[0,*c][i:i+3]for j,c in e(zip(*a))]for i,r in e(a)])",
        "lambda a,e=enumerate:max([min([abs(x-X)+abs(y-Y)for X,I in e(a)for Y,J in e(I)if J]or[0])for x,i in e(a)for y,j in e(i)if j<1]+[0])"
    ],
    "tell-my-friends-to-which-comma-club-they-belong": [
        "f = ['John', 'Jamie', 'Kylie', 'Laura', 'Russ', 'Karla', 'Reid', 'Mark', 'Manson', 'Lonnie', 'Nelly']\na = [100000, 0.05, 1549001.10, 999999999.99, 986000000, 1, 99.99, 999.99, 1000.01, 999999999999.00, -123.45]",
        "for n,a in input():print n+' is in the %dd-comma club.'%'{:20,.2f}'.format(a).count(',')",
        "n = ['John', 'Jamie', 'Kylie', 'Laura', 'Russ', 'Karla', 'Reid', 'Mark', 'Manson', 'Lonnie']\na = [100000, 0.05, 1549001.10, 999999999.99, 1000000000, 1, 99.99, 999.99, 1000.01, 999999999999.00]",
        "for g,b in zip(*input()):print g,'is in the',`(len('%d'%b)+~(b<0))/3`+'-comma club.'"
    ],
    "filter-out-the-pseudo-elements": [
        "lambda x:[*filter((sum(-~a*b for a,b in enumerate(x))/len(x)).__gt__,x)]",
        "lambda x:[w for w in x if w<sum(u*v+v for u,v in enumerate(x[::-1]))/len(x)]",
        "lambda l:[x for x in l if x<sum(sum(l[:i])for i in range(len(l)))]"
    ],
    "calculate-pi-to-5-decimals": [
        "print reduce(lambda x,p:p/2*x/p+2*10**999,range(6637,1,-2))",
        "t=s=0\nk=i=1\nwhile t<1e6:t,s,i,k=t+1,k*4./i+s,i+2,-k",
        "print 4*sum((-1)**i/(2*i+1.)for i in range(9**6))"
    ],
    "calculate-a-tip": [
        "a,b=map(str,raw_input().split('.'));c=str(int(a+b)<<1).zfill(4);print c[:-3]+'.'+c[-3:-1]",
        "d=`len('X'*int(\"{}{:>02}\".format(*(raw_input()+\".0\").split('.')))*2)`;print'%s.%s'%(d[:-3],d[-3:])"
    ],
    "summing-a-sub-square-of-a-quarter-of-an-infinite-chessboard": [
        "lambda x,y:sum(k/-~x^k%-~x for k in range(~x*~y))",
        "lambda x,y:sum(a^b for a in range(x+1)for b in range(y+1))"
    ],
    "drop-down-the-numbers": [
        "def f(a):r,c=a.nonzero();v=a[r,c];r+=v;i=v.argsort();a*=0;a[r[i]%len(a),c[i]]=v[i];return a",
        "r=range\nf=lambda A:[*zip(*[[max(i*(c[j-i]==i)for i in r(len(c)))for j in r(len(c))]for c in zip(*A)])]",
        "e=enumerate;l=input();j=[[0]*len(l[0])for _ in l]\nfor x,y,z in sorted([((n+x)%len(l),m,x)for n,y in e(l)for m,x in e(y)],key=lambda e:e[2]):j[x][y]=z\nprint j"
    ],
    "the-decryption-function": [
        "f=lambda s,i=0:s[i:]and s[(i^1)-len(s)/2]+f(s,i+1)",
        "a=input();x=len(a)//2;b=a[x:]+a[:x];c=''\nfor i in range(0,len(b),2):c+=b[i+1]+b[i]\nprint(c)"
    ],
    "clarks-triangle": [
        "f=lambda r,c:c<2or c>r and r*6or f(r-1,c-1)+f(r-1,c)",
        "a,b=input()\nx=[1,6]\nexec\"x=map(sum,zip([0]+x,x+[6]));\"*a\nprint x[b]"
    ],
    "find-the-translation-table": [
        "def f(a,b):\n r=([\"\"]*2,0)[len(a)!=len(b)]\n for u,v in zip(a,b):\n\tif r:\n\t\tq,w=r\n\t\tf=q.find(u)\n\t\tif u!=v:r=(([q+u,w+v],r)[f>-1 and w[f]==v],0)[f<0 and v in w]\n print r",
        "def f(x,y,d={}):\n    for a,b in zip(x,y):1/(a not in d or b==d[a]or len(x)-len(y));d[a]=b;1/([*d.values()].count(b)<2)\n    return map(''.join,zip(*[x for x in d.items()if x[0]!=x[1]]))"
    ],
    "digit-small-numbers": [
        "lambda n:any(`i`>`n`>n%i<1for i in range(n))",
        "f=lambda n:max(`x`for x in range(1,n+1)if n%x==0)==`n`"
    ],
    "determine-if-a-grid-contains-another-grid": [
        "f=lambda a,b,r=4:b*r and f(a,b[1:],r)|f(a,zip(*b)[::-1],r-1)or a==b",
        "lambda a,b,L=len:any(sum(A==B[j:j+L(A)]for A,B in zip(a,b[i:]))==L(a)for i in range(L(b))for j in range(L(b[0])))"
    ],
    "produce-a-list-of-rotonyms-1": [
        "lambda l:l&{w.encode('rot13')for w in l}",
        "lambda l:l&{''.join(chr((ord(c)-6)%26+97)for c in w)for w in l}",
        "lambda d:[w for w in d if{''.join(chr((ord(c)+i)%26+97)for c in w)for i in range(26)}&(d-{w})]"
    ],
    "the-sequence-of-range-exponentiated-integers": [
        "lambda N:[n**-~e for n in range(N+2)for e in range(n)][N]",
        "f=lambda x,n=1:n**x*(x<=n)or f(x-n,n+1)"
    ],
    "mayweather-vs-mcgregor-prepare-the-cash-prize": [
        "a=\"6ZBRS533| $\"",
        "print'eNpTUICAeFwAKq/ABWPUKGAHcHGuGlviQA0XTI8KEIEAgkJIgM0Gq1SBqkSlVMAMFRSVClhVQpVhVUnA9njiQA0AtPhDOg=='.decode('base64').decode('zlib')"
    ],
    "is-the-input-bl-lu-ur-rr-ry": [
        "lambda x:x==''.join(c+' '+c for c in x[::3]+x[-1:])[2:-2]",
        "a,*b,c=input()or'ab'\nwhile b:x,y,z,*b=b;x[x!=z][y>' ']"
    ],
    "go-away-no-1s-here": [
        "f=lambda n:[n and(n/2%3>r)+2*f(n/3)[r]for r in 0,1]",
        "def f(a):r=range(a);s=[int(bin(x)[2:].replace(*'12'),3)for x in r];return[(i,j)for i in r for j in r if s[i]+s[j]==a][0]"
    ],
    "make-a-math-competition-grader": [
        "lambda a,b:(['Invalid test',sum([-1,4][i==j]for i,j in zip(a,b))+b.count(' ')][len(a)==len(b)==30and set(a)^set('ABCDE')==set(b)^set('ABCDE ')==set()])",
        "lambda c,d:d.count(' ')+sum([-1,4][a==b]for a,b in zip(c,d)if b!=' ')if not set('ABCDE ')^set(c+d)and len(c)==len(d)==30 else'Test Invalid'"
    ],
    "draw-the-lambda-blazon": [
        "b=c=int(input())*2\nd,e='/\\\\'\nwhile b:print('(|%%ss)|'[2<b<c::2]%f' {d+e:^{c}} ');d+='  ';b-=2",
        "n=input()\nfor i in range(n):m=-~i%n<2;s=' '*(n-i);print'|('[m]+s+'/'+'  '*i+'\\\\'+s+'|)'[m]",
        "n=a=input()\nwhile a:print'(|'[1<a<n]+a*' '+'/'+(n-a)*'  '+'\\\\'+a*' '+')|'[1<a<n];a-=1"
    ],
    "old-macdonald-function": [
        "m,f=\"Old MacDonald had a farm, E-I-E-I-O\",lambda x,y:m+\",\\nAnd on that farm he had a %s, E-I-E-I-O,\\nWith a %shere and a %sthere,\\nHere a %s, there a %s, everywhere a %s %s,\\n%s!\"%((x,)+((y+' ')*2,)*2+(y,)*4+(m,))",
        "def f(**a):print u'\u9c78\ucff3\u5149\u4df0\u764c\ucfc9\u044b\u32b2\u5312\u1214\ud215\u8b12\u7572\u5c14\u3d75\u4175\u5fd8\ucb87\u2f31\u2145\u4f3f\u24a1\ub123\u2c04\u90a9\u0a91\uaa55\u91aa\u5f9c\u59ae\ua28c\u3c3a\u24b3\u2c03\u9b95\uaf9f\u0c59\u33a7\u8b52\u1552\uf312\ub052\u9548\ue480\ub874\uc03c\u602a\u3aa2\u6110\u8164\ub2d4\ua2d4\u72ca\u5154\u2cb8\u3f97\uaf61\u0228\ub600\u4778\u00e5'.encode('u16')[2:].decode('zip')%a"
    ],
    "shortest-program-to-split-a-string-at-non-digits-without-regexps": [
        "f=lambda s:\"\".join([' ',e][e.isdigit()]for e in s).split()",
        "def f(s, o=[], c=\"\"):\n    for i in s:\n        try:int(i);c+=i\n        except:o+=[c];c=\"\"\n    return [i for i in o+[c] if i]"
    ],
    "whens-the-listening-party": [
        "lambda t,s:(str((eval(s[:-5]+t[0])+(t[1]>=s[-2:]))%24),s[-2:])",
        "a,b=input();print(eval(b[:-5]+a[:-3])+(a[-2:]>=b[-2:]))%24,b[-2:]"
    ],
    "multiple-lit-plume-mute-pill-and-so-on": [
        "lambda k,N:[k*(10**N**k+10**i)for i in range(N)]",
        "k,n=input()\nl=[];m=0;s=sorted\nwhile 1:m+=k;l+=m,;t=[x for x in l if s(`x`)==s(`m`)];n==len(t)>exit(t)"
    ],
    "is-this-a-major-scale-or-equivalent": [
        "def f(t):r=[ord(x[0])//.6+ord(x[1:]or'\"')%13-8for x in t];return[(y-x)%12for x,y in zip(r,r[1:])]==[2,2,1,2,2,2]",
        "Jo King"
    ],
    "numbers-x-such-that-x2-divides-7x-1": [
        "f=lambda n,k=2:n<2or-~f(n-(7**k%k**2==1),k+1)",
        "lambda n:[x for x in range(1,2**n+1)if(7**x-1)%x**2<1][n]",
        "i=0\ng=input()\nwhile g:i+=1;g-=~-7**i%i**2<1\nprint i",
        "f=lambda n,i=1:n and-~f(n-(~-7**i%i**2<1),i+1)"
    ],
    "generalise-perfect-numbers": [
        "def f(m,k,n=1):\n s=n;exec\"i=t=s\\nwhile~-i:i-=1;s+=i>>t%i*t\\n\"*m\n if s==k*n:print n\n f(m,k,n+1)",
        "g=lambda n,m:m and g(n+sum(i*(n%i<1)for i in range(1,n)),m-1)or n\nf=lambda m,k,n,x=1:n and f(m,k,n-(g(x,m)==k*x),x+1)or x-1"
    ],
    "quines-that-print-what-their-index-is": [
        "exec(a:='g=0\\nfor i in b\"exec(a:=%r)\"%a:g=g*95+i-31\\nprint(g)')",
        "x=\"g=0\\nfor i in'x=%r;exec x'%x:g=95*g+ord(i)-31\\nprint g\";exec x"
    ],
    "rod-of-asclepius": [
        "for c in b'[S [S [S [S [S KCMSMC JGJSJG JJGIBHGJ IMEIFDEM HQBEAABBDDBQ GWCCBBDV FWFFBX EWDIBY DXEDE[ B[Hb B]J^ E]IY H]GU K]FP NVBCEM OTDAEM QPBBCACL MSCBBAAS KUFX HYGY E]HZ BbG\\\\ CdD[ D`ACCZ E_CABZ F[F\\\\ HRAFCABGAR HODFDIDO ILFGEGFL JHIIEEIH JELKBFLE KBNSNB [JAH [JAH [S [S [S'.split():print(''.join(' L'[i%2]*(j-64)for i,j in enumerate(c)))",
        "s=\"\";i=0\nfor n in b\"_____)393O-090S0-/(.-V3+/,*+Y7(+''((**(]=))((*b=,,(d=*/(e>+*+gA.nC0jC/eC-aC,\\<()+Y:*'+Y6(()')X9)((''_;,d?-eC.fH-hJ*gF'))fE)'(fA,h8',)'(-'^5*,*/*[2,-+-,X.//++/T+21(,2Q(494N0'T0'T___\":\n s+=n%38*\"L \"[i];i^=1\n if n>75:print(f\"{s:^71}\");s=\"\";i=0",
        "i=k=0\nfor c in b\"b!FjnuaV5\u001dk6[Z\u001bvtUk]-M81/DoW(3D|I]wB$j;D0mR' |tBjimp?$NAWR5N^21\u001fZLk#sqG:GRQcB\u001eXMAgSYaZL\\:%El2:=T{Kw%o,pd3Tav[pM$\u001e-&pN|jVdYlavl^;8E?zI\\\"PQ5:%A>yHa:7^)\u001f ,LX~3RH^bG;dGg.2{xsqLW5o\":i=i*100+c-27\ns=''\nwhile~i+k:c=i%37;i//=37;s+=' L'[k]*c;k^=1;c or print(f'{s:^71}'+(s:=''))"
    ],
    "sum-chain-sequence": [
        "n=1\nf=1\nexec'print f;n+=1;d=f+n;f=(d+n*(d%2<1)-n*(d%3<1))*[1,n][d%4<1];'*100",
        "i=s=1\nexec('print(s);i+=1;s+=i;s=(s+i-i*(s%2+(s%3<1)))*i**(s%4<1);'*100)"
    ],
    "falling-ascii-balls": [
        "lambda x:[[i,(20*x[x.find(i):x.find('_')].count('\\n'))**.5]for i in x if i.isdigit()]",
        "lambda a:[(c,(~-(len(a)-i)*20)**.5)for i,s in enumerate(a)for c in s if c.isdigit()]"
    ],
    "construct-a-graph": [
        "l=input()\ng={}\nn=0\nfor x in l:\n n+=1;g[n]=set()\n if x>1:h={i for i in g if len(g[i])%x};g={i:g[i]&h for i in set(g)&h}\n if x==1:\n  for i in g:g[i]^={n};g[n]^={i}\nprint len(g)",
        "s=input();e=[];n=[];c=0\nfor t in s:\n    if t<2:e=e+[[]]if t==0 else [x+[c]for x in e]+[n[:]];n+=[c];c+=1\n    else:\n        M=zip(*[(i,n[i])for i,x in enumerate(e)if not len(x)%t])\n        if M:e=[list(set(z)-set(M[1]))for j,z in enumerate(e)if j not in M[0]];n=list(set(n)-set(M[1]))\nprint len(n)"
    ],
    "mario-kart-scoring-w-ties": [
        "lambda s,p:[sum(p[s.index(i):][:s.count(i)])/s.count(i)for i in s]",
        "lambda s,p:[sum(v for j,v in zip(s,p)if j==i)/s.count(i)for i in s]",
        "lambda s,p:[sum(p[s.index(i):12-s[::-1].index(i)])/s.count(i)for i in s]"
    ],
    "counting-n-bit-integer-multiplication-overflows": [
        "n=input()\na=1<<n\ns=~-a*a/2\nx=y=0\nwhile y<1:s+=y;x-=1;y=a/x-x\nprint s",
        "lambda n:sum(k-min(~-2**n/k,k)for k in range(1,2**n))"
    ],
    "its-all-about-the-sum-of-the-digits": [
        "f=lambda n,x=[0]:x.count(x[-1])+~n and-~f(n,x+[sum(map(int,`len(x)`))])",
        "f=lambda n,x=1:n==sum(sum(map(int,`i`))==sum(map(int,`x`))for i in range(x))and x or f(n,x+1)"
    ],
    "how-many-partitions-contain-only-perfect-squares": [
        "def f(a):\n s=[a[:1]]\n for i in a[1:]:s=sum([[x+[i],x[:-1]+[x[-1]*10+i]]for x in s],[])\n return sum({n**.5%1for n in x}=={0}for x in s)",
        "lambda s:len([l for l in[''.join(sum(zip(s,[','*(n>>i&1)for i in range(len(s))]+['']),())).split(',')for n in range(2**~-len(s))]if {int(x)**.5%1for x in l}=={0}])"
    ],
    "verify-the-queens-puzzle": [
        "lambda x,c=lambda x:x.count(\"Q\")==1:all([*map(c,x+[[l[i]for l in x]for i in range(len(x[0]))])])*~any(map(lambda s:\"Q%sQ\"%(s*\".\")in\"\".join(x),[len(x[0]),len(x[0])-2]))==-1",
        "d=1\nf=input()\nQ=[]\nfor i in f:d=[0,d][i.count('Q')==1];Q+=[(len(Q),i.index('Q'))]\nprint[0,d][sum(k[1]==i[1]or sum(k)==sum(i)for k in Q for i in Q)==len(Q)]"
    ],
    "is-this-quadrilateral-tangential": [
        "f=lambda l,i=3:i+1and abs(l[i]-l[i-1])-f(l,i-1)",
        "lambda l:sum((-1)**i*abs(l[i-1]-l[i])for i in range(4))"
    ],
    "undo-the-square-roots": [
        "i=input;n=int(i());x=float(i());m=int(x*x);a=m**n\nwhile a:\n s=[a/m**b%m+1for b in range(n)];a-=1\n if abs(x-sum(b**.5for b in s))<1e-5:print' '.join(map(str,s))",
        "def S(N,x,n=[],i=1):\n if x*x<1e-12>N==0:print(*n)\n while.1+x*x>i:S(N-1,x-i**.5,n+[i]);i+=1"
    ],
    "display-a-tally-in-varying-bases": [
        "k=input()\nk=i,j=((k,5),k)[k>[]]\nfor m in[' |','-+',' |']*all(k):\n print(m*(j-1)+m[0]+' ')*(i/j*(j>1))+' |'*(i%(j+(j<2)*i))",
        "lambda i,j=5,a=\" |\":\"\\n\".join((\"\",(a*~-j+\"  \",\"-+\"*~-j+\"- \")[x%2]*(i/j))[j>1]+a*(i,i%j)[j>1]for x in(0,1,2)if i*j)",
        "i=input();t,b=i if[0]<i else(i,5);b=[b,t+1][b==1];l,d,m,o=' |',t/b,t%b,b-1;r=(l*o+'  ')*d+l*m\nif t*b>0:print r,'\\n',('-+'*o+'- ')*d+l*m,'\\n',r",
        "i=input()\nn,b=[(i,5),i][i>[]]\no=b-1\na=[n,n%b][b>1]*' |'\nm=(b>1)*n/b\ns=(' |'*o+'  ')*m+a\nprint(s+'\\n'+('-+'*o+'- ')*m+a+'\\n'+s)*(b*n>0)"
    ],
    "xor-sort-an-array": [
        "lambda k,l:[x(k,s)for s in sorted(x(k,s)for s in l)]\nx=lambda k,s:''.join(chr(ord(v)^ord(k[i%len(k)]))for i,v in enumerate(s))",
        "lambda k,x:x.sort(key=lambda s:[ord(x)^ord(y)for x,y in zip(s,k*len(s))])"
    ],
    "test-if-given-number-is-a-keith-number": [
        "a=input()\nn=map(int,`a`)\nwhile a>n[0]:n=n[1:]+[sum(n)]\nprint(a==n[0])&(a>9)",
        "x=input();n=`x`;d=[int(i)for i in n];f=d[-1]\nwhile f<x:d+=[sum(d[-len(n):])];f=d[-1]\nif f==x>13:print 1\nelse:print 0",
        "#BEGIN_CODE\ndef k(z):\n c=str(z);a=list(map(int,c));b=sum(a)\n while b<z:a=a[1:]+[b];b=sum(a)\n return(b==z)&(len(c)>1)\n#END_CODE score: 104\n\nprint([i for i in filter(k, range(1,101))])  #[14, 19, 28, 47, 61, 75]"
    ],
    "binary-triangle-a141727": [
        "v=-4**64;W=w=v*v;v+=w;O=1\nwhile[print(hex(O)[2::32])]:O*=w;O^=O//v&W//v;W*=w",
        "n=1\nwhile 1:print'%o'%n;x=n;n*=64;exec'n^=x;x/=8;'*x",
        "def f(n):\n\tif n<1:return[1]\n\tk=[1];p=f(n-1)+[0,0]\n\tfor i in range(n*2):k+=[p[i-1]^p[i]^p[i+1]^k[-1]]\n\treturn k"
    ],
    "how-many-steps-does-it-take-from-n-to-1-by-subtracting-the-greatest-divisor": [
        "f=lambda n,k=1:2/n or n%(n-k)and f(n,k+1)or-~f(k)",
        "g=lambda x,y=0:y*(x<2)or[g(x-z,y+1)for z in range(1,x)if x%z<1][-1]"
    ],
    "fractal-cathedral": [
        "n=input()\nfor x in range(n):s=bin(2**len(bin(n))/4+x+1)[3:].replace(*'0 ');print s+s[-2::-1]",
        "n=input()+1\nw=' #'\nwhile len(w)<n:w=[s+l+s for s in' #'for l in w]\nprint'\\n'.join(w[1:n])",
        "def f(l):\n for a in range(1,l+1):print(bin(a)[2:]+bin(a)[-2:1:-1]).replace(*'0 ').center(len(bin(l+1))*2-4)",
        "n=input()\nfor i in range(n):s=bin(2**n.bit_length()+i+1)[3:].replace(*'0 ');print s+s[-2::-1]"
    ]
}